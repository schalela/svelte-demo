{"version":3,"file":"index.dad6cb2e.js","sources":["../../../../node_modules/tslib/tslib.es6.js","../../../../node_modules/graphql/jsutils/nodejsCustomInspectSymbol.mjs","../../../../node_modules/graphql/jsutils/inspect.mjs","../../../../node_modules/graphql/language/visitor.mjs","../../../../node_modules/ts-invariant/lib/invariant.esm.js","../../../../node_modules/fast-json-stable-stringify/index.js","../../../../node_modules/apollo-utilities/lib/bundle.esm.js","../../../../node_modules/zen-observable/lib/Observable.js","../../../../node_modules/zen-observable-ts/lib/bundle.esm.js","../../../../node_modules/zen-observable/index.js","../../../../node_modules/apollo-link/node_modules/ts-invariant/lib/invariant.esm.js","../../../../node_modules/graphql/language/blockString.mjs","../../../../node_modules/graphql/language/printer.mjs","../../../../node_modules/apollo-link/lib/bundle.esm.js","../../../../node_modules/symbol-observable/es/index.js","../../../../node_modules/apollo-client/bundle.esm.js","../../../../node_modules/symbol-observable/es/ponyfill.js","../../../../node_modules/apollo-cache/lib/bundle.esm.js","../../../../node_modules/@wry/context/lib/context.esm.js","../../../../node_modules/optimism/lib/bundle.esm.js","../../../../node_modules/apollo-cache-inmemory/lib/bundle.esm.js","../../../../node_modules/apollo-link-http-common/node_modules/ts-invariant/lib/invariant.esm.js","../../../../node_modules/apollo-link-http-common/lib/bundle.esm.js","../../../../node_modules/apollo-link-http/lib/bundle.esm.js","../../../../node_modules/apollo-link-error/lib/bundle.esm.js","../../../../node_modules/graphql/jsutils/defineToJSON.mjs","../../../../node_modules/graphql/jsutils/invariant.mjs","../../../../node_modules/graphql/language/source.mjs","../../../../node_modules/graphql/jsutils/defineToStringTag.mjs","../../../../node_modules/graphql/language/location.mjs","../../../../node_modules/graphql/error/printError.mjs","../../../../node_modules/graphql/error/GraphQLError.mjs","../../../../node_modules/graphql/error/syntaxError.mjs","../../../../node_modules/graphql/language/lexer.mjs","../../../../node_modules/graphql/language/kinds.mjs","../../../../node_modules/graphql/language/directiveLocation.mjs","../../../../node_modules/graphql/language/parser.mjs","../../../../node_modules/graphql-tag/src/index.js","../../../../node_modules/apollo-boost/lib/bundle.esm.js","../../../../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../../../../src/data.js","../../../../node_modules/svelte-observable/dist/svelte-observable.es.js","../../../../src/routes/index.svelte"],"sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nvar nodejsCustomInspectSymbol = typeof Symbol === 'function' ? Symbol.for('nodejs.util.inspect.custom') : undefined;\nexport default nodejsCustomInspectSymbol;","function _typeof(obj) { if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\nvar MAX_ARRAY_LENGTH = 10;\nvar MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */\n\nexport default function inspect(value) {\n  return formatValue(value, []);\n}\n\nfunction formatValue(value, seenValues) {\n  switch (_typeof(value)) {\n    case 'string':\n      return JSON.stringify(value);\n\n    case 'function':\n      return value.name ? \"[function \".concat(value.name, \"]\") : '[function]';\n\n    case 'object':\n      return formatObjectValue(value, seenValues);\n\n    default:\n      return String(value);\n  }\n}\n\nfunction formatObjectValue(value, previouslySeenValues) {\n  if (previouslySeenValues.indexOf(value) !== -1) {\n    return '[Circular]';\n  }\n\n  var seenValues = [].concat(previouslySeenValues, [value]);\n\n  if (value) {\n    var customInspectFn = getCustomFn(value);\n\n    if (customInspectFn) {\n      // $FlowFixMe(>=0.90.0)\n      var customValue = customInspectFn.call(value); // check for infinite recursion\n\n      if (customValue !== value) {\n        return typeof customValue === 'string' ? customValue : formatValue(customValue, seenValues);\n      }\n    } else if (Array.isArray(value)) {\n      return formatArray(value, seenValues);\n    }\n\n    return formatObject(value, seenValues);\n  }\n\n  return String(value);\n}\n\nfunction formatObject(object, seenValues) {\n  var keys = Object.keys(object);\n\n  if (keys.length === 0) {\n    return '{}';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[' + getObjectTag(object) + ']';\n  }\n\n  var properties = keys.map(function (key) {\n    var value = formatValue(object[key], seenValues);\n    return key + ': ' + value;\n  });\n  return '{ ' + properties.join(', ') + ' }';\n}\n\nfunction formatArray(array, seenValues) {\n  if (array.length === 0) {\n    return '[]';\n  }\n\n  if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n    return '[Array]';\n  }\n\n  var len = Math.min(MAX_ARRAY_LENGTH, array.length);\n  var remaining = array.length - len;\n  var items = [];\n\n  for (var i = 0; i < len; ++i) {\n    items.push(formatValue(array[i], seenValues));\n  }\n\n  if (remaining === 1) {\n    items.push('... 1 more item');\n  } else if (remaining > 1) {\n    items.push(\"... \".concat(remaining, \" more items\"));\n  }\n\n  return '[' + items.join(', ') + ']';\n}\n\nfunction getCustomFn(object) {\n  var customInspectFn = object[String(nodejsCustomInspectSymbol)];\n\n  if (typeof customInspectFn === 'function') {\n    return customInspectFn;\n  }\n\n  if (typeof object.inspect === 'function') {\n    return object.inspect;\n  }\n}\n\nfunction getObjectTag(object) {\n  var tag = Object.prototype.toString.call(object).replace(/^\\[object /, '').replace(/]$/, '');\n\n  if (tag === 'Object' && typeof object.constructor === 'function') {\n    var name = object.constructor.name;\n\n    if (typeof name === 'string') {\n      return name;\n    }\n  }\n\n  return tag;\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nexport var QueryDocumentKeys = {\n  Name: [],\n  Document: ['definitions'],\n  OperationDefinition: ['name', 'variableDefinitions', 'directives', 'selectionSet'],\n  VariableDefinition: ['variable', 'type', 'defaultValue', 'directives'],\n  Variable: ['name'],\n  SelectionSet: ['selections'],\n  Field: ['alias', 'name', 'arguments', 'directives', 'selectionSet'],\n  Argument: ['name', 'value'],\n  FragmentSpread: ['name', 'directives'],\n  InlineFragment: ['typeCondition', 'directives', 'selectionSet'],\n  FragmentDefinition: ['name', // Note: fragment variable definitions are experimental and may be changed\n  // or removed in the future.\n  'variableDefinitions', 'typeCondition', 'directives', 'selectionSet'],\n  IntValue: [],\n  FloatValue: [],\n  StringValue: [],\n  BooleanValue: [],\n  NullValue: [],\n  EnumValue: [],\n  ListValue: ['values'],\n  ObjectValue: ['fields'],\n  ObjectField: ['name', 'value'],\n  Directive: ['name', 'arguments'],\n  NamedType: ['name'],\n  ListType: ['type'],\n  NonNullType: ['type'],\n  SchemaDefinition: ['directives', 'operationTypes'],\n  OperationTypeDefinition: ['type'],\n  ScalarTypeDefinition: ['description', 'name', 'directives'],\n  ObjectTypeDefinition: ['description', 'name', 'interfaces', 'directives', 'fields'],\n  FieldDefinition: ['description', 'name', 'arguments', 'type', 'directives'],\n  InputValueDefinition: ['description', 'name', 'type', 'defaultValue', 'directives'],\n  InterfaceTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  UnionTypeDefinition: ['description', 'name', 'directives', 'types'],\n  EnumTypeDefinition: ['description', 'name', 'directives', 'values'],\n  EnumValueDefinition: ['description', 'name', 'directives'],\n  InputObjectTypeDefinition: ['description', 'name', 'directives', 'fields'],\n  DirectiveDefinition: ['description', 'name', 'arguments', 'locations'],\n  SchemaExtension: ['directives', 'operationTypes'],\n  ScalarTypeExtension: ['name', 'directives'],\n  ObjectTypeExtension: ['name', 'interfaces', 'directives', 'fields'],\n  InterfaceTypeExtension: ['name', 'directives', 'fields'],\n  UnionTypeExtension: ['name', 'directives', 'types'],\n  EnumTypeExtension: ['name', 'directives', 'values'],\n  InputObjectTypeExtension: ['name', 'directives', 'fields']\n};\nexport var BREAK = {};\n/**\n * visit() will walk through an AST using a depth first traversal, calling\n * the visitor's enter function at each node in the traversal, and calling the\n * leave function after visiting that node and all of its child nodes.\n *\n * By returning different values from the enter and leave functions, the\n * behavior of the visitor can be altered, including skipping over a sub-tree of\n * the AST (by returning false), editing the AST by returning a value or null\n * to remove the value, or to stop the whole traversal by returning BREAK.\n *\n * When using visit() to edit an AST, the original AST will not be modified, and\n * a new version of the AST with the changes applied will be returned from the\n * visit function.\n *\n *     const editedAST = visit(ast, {\n *       enter(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: skip visiting this node\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       },\n *       leave(node, key, parent, path, ancestors) {\n *         // @return\n *         //   undefined: no action\n *         //   false: no action\n *         //   visitor.BREAK: stop visiting altogether\n *         //   null: delete this node\n *         //   any value: replace this node with the returned value\n *       }\n *     });\n *\n * Alternatively to providing enter() and leave() functions, a visitor can\n * instead provide functions named the same as the kinds of AST nodes, or\n * enter/leave visitors at a named key, leading to four permutations of\n * visitor API:\n *\n * 1) Named visitors triggered when entering a node a specific kind.\n *\n *     visit(ast, {\n *       Kind(node) {\n *         // enter the \"Kind\" node\n *       }\n *     })\n *\n * 2) Named visitors that trigger upon entering and leaving a node of\n *    a specific kind.\n *\n *     visit(ast, {\n *       Kind: {\n *         enter(node) {\n *           // enter the \"Kind\" node\n *         }\n *         leave(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n *\n * 3) Generic visitors that trigger upon entering and leaving any node.\n *\n *     visit(ast, {\n *       enter(node) {\n *         // enter any node\n *       },\n *       leave(node) {\n *         // leave any node\n *       }\n *     })\n *\n * 4) Parallel visitors for entering and leaving nodes of a specific kind.\n *\n *     visit(ast, {\n *       enter: {\n *         Kind(node) {\n *           // enter the \"Kind\" node\n *         }\n *       },\n *       leave: {\n *         Kind(node) {\n *           // leave the \"Kind\" node\n *         }\n *       }\n *     })\n */\n\nexport function visit(root, visitor) {\n  var visitorKeys = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : QueryDocumentKeys;\n\n  /* eslint-disable no-undef-init */\n  var stack = undefined;\n  var inArray = Array.isArray(root);\n  var keys = [root];\n  var index = -1;\n  var edits = [];\n  var node = undefined;\n  var key = undefined;\n  var parent = undefined;\n  var path = [];\n  var ancestors = [];\n  var newRoot = root;\n  /* eslint-enable no-undef-init */\n\n  do {\n    index++;\n    var isLeaving = index === keys.length;\n    var isEdited = isLeaving && edits.length !== 0;\n\n    if (isLeaving) {\n      key = ancestors.length === 0 ? undefined : path[path.length - 1];\n      node = parent;\n      parent = ancestors.pop();\n\n      if (isEdited) {\n        if (inArray) {\n          node = node.slice();\n        } else {\n          var clone = {};\n\n          for (var _i = 0, _Object$keys = Object.keys(node); _i < _Object$keys.length; _i++) {\n            var k = _Object$keys[_i];\n            clone[k] = node[k];\n          }\n\n          node = clone;\n        }\n\n        var editOffset = 0;\n\n        for (var ii = 0; ii < edits.length; ii++) {\n          var editKey = edits[ii][0];\n          var editValue = edits[ii][1];\n\n          if (inArray) {\n            editKey -= editOffset;\n          }\n\n          if (inArray && editValue === null) {\n            node.splice(editKey, 1);\n            editOffset++;\n          } else {\n            node[editKey] = editValue;\n          }\n        }\n      }\n\n      index = stack.index;\n      keys = stack.keys;\n      edits = stack.edits;\n      inArray = stack.inArray;\n      stack = stack.prev;\n    } else {\n      key = parent ? inArray ? index : keys[index] : undefined;\n      node = parent ? parent[key] : newRoot;\n\n      if (node === null || node === undefined) {\n        continue;\n      }\n\n      if (parent) {\n        path.push(key);\n      }\n    }\n\n    var result = void 0;\n\n    if (!Array.isArray(node)) {\n      if (!isNode(node)) {\n        throw new Error('Invalid AST Node: ' + inspect(node));\n      }\n\n      var visitFn = getVisitFn(visitor, node.kind, isLeaving);\n\n      if (visitFn) {\n        result = visitFn.call(visitor, node, key, parent, path, ancestors);\n\n        if (result === BREAK) {\n          break;\n        }\n\n        if (result === false) {\n          if (!isLeaving) {\n            path.pop();\n            continue;\n          }\n        } else if (result !== undefined) {\n          edits.push([key, result]);\n\n          if (!isLeaving) {\n            if (isNode(result)) {\n              node = result;\n            } else {\n              path.pop();\n              continue;\n            }\n          }\n        }\n      }\n    }\n\n    if (result === undefined && isEdited) {\n      edits.push([key, node]);\n    }\n\n    if (isLeaving) {\n      path.pop();\n    } else {\n      stack = {\n        inArray: inArray,\n        index: index,\n        keys: keys,\n        edits: edits,\n        prev: stack\n      };\n      inArray = Array.isArray(node);\n      keys = inArray ? node : visitorKeys[node.kind] || [];\n      index = -1;\n      edits = [];\n\n      if (parent) {\n        ancestors.push(parent);\n      }\n\n      parent = node;\n    }\n  } while (stack !== undefined);\n\n  if (edits.length !== 0) {\n    newRoot = edits[edits.length - 1][1];\n  }\n\n  return newRoot;\n}\n\nfunction isNode(maybeNode) {\n  return Boolean(maybeNode && typeof maybeNode.kind === 'string');\n}\n/**\n * Creates a new visitor instance which delegates to many visitors to run in\n * parallel. Each visitor will be visited for each node before moving on.\n *\n * If a prior visitor edits a node, no following visitors will see that node.\n */\n\n\nexport function visitInParallel(visitors) {\n  var skipping = new Array(visitors.length);\n  return {\n    enter: function enter(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          false);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === false) {\n              skipping[i] = node;\n            } else if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined) {\n              return result;\n            }\n          }\n        }\n      }\n    },\n    leave: function leave(node) {\n      for (var i = 0; i < visitors.length; i++) {\n        if (!skipping[i]) {\n          var fn = getVisitFn(visitors[i], node.kind,\n          /* isLeaving */\n          true);\n\n          if (fn) {\n            var result = fn.apply(visitors[i], arguments);\n\n            if (result === BREAK) {\n              skipping[i] = BREAK;\n            } else if (result !== undefined && result !== false) {\n              return result;\n            }\n          }\n        } else if (skipping[i] === node) {\n          skipping[i] = null;\n        }\n      }\n    }\n  };\n}\n/**\n * Creates a new visitor instance which maintains a provided TypeInfo instance\n * along with visiting visitor.\n */\n\nexport function visitWithTypeInfo(typeInfo, visitor) {\n  return {\n    enter: function enter(node) {\n      typeInfo.enter(node);\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      false);\n\n      if (fn) {\n        var result = fn.apply(visitor, arguments);\n\n        if (result !== undefined) {\n          typeInfo.leave(node);\n\n          if (isNode(result)) {\n            typeInfo.enter(result);\n          }\n        }\n\n        return result;\n      }\n    },\n    leave: function leave(node) {\n      var fn = getVisitFn(visitor, node.kind,\n      /* isLeaving */\n      true);\n      var result;\n\n      if (fn) {\n        result = fn.apply(visitor, arguments);\n      }\n\n      typeInfo.leave(node);\n      return result;\n    }\n  };\n}\n/**\n * Given a visitor instance, if it is leaving or not, and a node kind, return\n * the function the visitor runtime should call.\n */\n\nexport function getVisitFn(visitor, kind, isLeaving) {\n  var kindVisitor = visitor[kind];\n\n  if (kindVisitor) {\n    if (!isLeaving && typeof kindVisitor === 'function') {\n      // { Kind() {} }\n      return kindVisitor;\n    }\n\n    var kindSpecificVisitor = isLeaving ? kindVisitor.leave : kindVisitor.enter;\n\n    if (typeof kindSpecificVisitor === 'function') {\n      // { Kind: { enter() {}, leave() {} } }\n      return kindSpecificVisitor;\n    }\n  } else {\n    var specificVisitor = isLeaving ? visitor.leave : visitor.enter;\n\n    if (specificVisitor) {\n      if (typeof specificVisitor === 'function') {\n        // { enter() {}, leave() {} }\n        return specificVisitor;\n      }\n\n      var specificKindVisitor = specificVisitor[kind];\n\n      if (typeof specificKindVisitor === 'function') {\n        // { enter: { Kind() {} }, leave: { Kind() {} } }\n        return specificKindVisitor;\n      }\n    }\n  }\n}","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\nfunction wrapConsoleMethod(method) {\r\n    return function () {\r\n        return console[method].apply(console, arguments);\r\n    };\r\n}\r\n(function (invariant) {\r\n    invariant.warn = wrapConsoleMethod(\"warn\");\r\n    invariant.error = wrapConsoleMethod(\"error\");\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\n// However, because most ESM-to-CJS compilers will rewrite the process import\r\n// as tsInvariant.process, which prevents proper replacement by minifiers, we\r\n// also attempt to define the stub globally when it is not already defined.\r\nvar processStub = { env: {} };\r\nif (typeof process === \"object\") {\r\n    processStub = process;\r\n}\r\nelse\r\n    try {\r\n        // Using Function to evaluate this assignment in global scope also escapes\r\n        // the strict mode of the current module, thereby allowing the assignment.\r\n        // Inspired by https://github.com/facebook/regenerator/pull/369.\r\n        Function(\"stub\", \"process = stub\")(processStub);\r\n    }\r\n    catch (atLeastWeTried) {\r\n        // The assignment can fail if a Content Security Policy heavy-handedly\r\n        // forbids Function usage. In those environments, developers should take\r\n        // extra care to replace process.env.NODE_ENV in their production builds,\r\n        // or define an appropriate global.process polyfill.\r\n    }\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n","'use strict';\n\nmodule.exports = function (data, opts) {\n    if (!opts) opts = {};\n    if (typeof opts === 'function') opts = { cmp: opts };\n    var cycles = (typeof opts.cycles === 'boolean') ? opts.cycles : false;\n\n    var cmp = opts.cmp && (function (f) {\n        return function (node) {\n            return function (a, b) {\n                var aobj = { key: a, value: node[a] };\n                var bobj = { key: b, value: node[b] };\n                return f(aobj, bobj);\n            };\n        };\n    })(opts.cmp);\n\n    var seen = [];\n    return (function stringify (node) {\n        if (node && node.toJSON && typeof node.toJSON === 'function') {\n            node = node.toJSON();\n        }\n\n        if (node === undefined) return;\n        if (typeof node == 'number') return isFinite(node) ? '' + node : 'null';\n        if (typeof node !== 'object') return JSON.stringify(node);\n\n        var i, out;\n        if (Array.isArray(node)) {\n            out = '[';\n            for (i = 0; i < node.length; i++) {\n                if (i) out += ',';\n                out += stringify(node[i]) || 'null';\n            }\n            return out + ']';\n        }\n\n        if (node === null) return 'null';\n\n        if (seen.indexOf(node) !== -1) {\n            if (cycles) return JSON.stringify('__cycle__');\n            throw new TypeError('Converting circular structure to JSON');\n        }\n\n        var seenIndex = seen.push(node) - 1;\n        var keys = Object.keys(node).sort(cmp && cmp(node));\n        out = '';\n        for (i = 0; i < keys.length; i++) {\n            var key = keys[i];\n            var value = stringify(node[key]);\n\n            if (!value) continue;\n            if (out) out += ',';\n            out += JSON.stringify(key) + ':' + value;\n        }\n        seen.splice(seenIndex, 1);\n        return '{' + out + '}';\n    })(data);\n};\n","import { visit } from 'graphql/language/visitor';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { __assign } from 'tslib';\nimport stringify from 'fast-json-stable-stringify';\n\nfunction isScalarValue(value) {\n    return ['StringValue', 'BooleanValue', 'EnumValue'].indexOf(value.kind) > -1;\n}\nfunction isNumberValue(value) {\n    return ['IntValue', 'FloatValue'].indexOf(value.kind) > -1;\n}\nfunction isStringValue(value) {\n    return value.kind === 'StringValue';\n}\nfunction isBooleanValue(value) {\n    return value.kind === 'BooleanValue';\n}\nfunction isIntValue(value) {\n    return value.kind === 'IntValue';\n}\nfunction isFloatValue(value) {\n    return value.kind === 'FloatValue';\n}\nfunction isVariable(value) {\n    return value.kind === 'Variable';\n}\nfunction isObjectValue(value) {\n    return value.kind === 'ObjectValue';\n}\nfunction isListValue(value) {\n    return value.kind === 'ListValue';\n}\nfunction isEnumValue(value) {\n    return value.kind === 'EnumValue';\n}\nfunction isNullValue(value) {\n    return value.kind === 'NullValue';\n}\nfunction valueToObjectRepresentation(argObj, name, value, variables) {\n    if (isIntValue(value) || isFloatValue(value)) {\n        argObj[name.value] = Number(value.value);\n    }\n    else if (isBooleanValue(value) || isStringValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isObjectValue(value)) {\n        var nestedArgObj_1 = {};\n        value.fields.map(function (obj) {\n            return valueToObjectRepresentation(nestedArgObj_1, obj.name, obj.value, variables);\n        });\n        argObj[name.value] = nestedArgObj_1;\n    }\n    else if (isVariable(value)) {\n        var variableValue = (variables || {})[value.name.value];\n        argObj[name.value] = variableValue;\n    }\n    else if (isListValue(value)) {\n        argObj[name.value] = value.values.map(function (listValue) {\n            var nestedArgArrayObj = {};\n            valueToObjectRepresentation(nestedArgArrayObj, name, listValue, variables);\n            return nestedArgArrayObj[name.value];\n        });\n    }\n    else if (isEnumValue(value)) {\n        argObj[name.value] = value.value;\n    }\n    else if (isNullValue(value)) {\n        argObj[name.value] = null;\n    }\n    else {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(17) : new InvariantError(\"The inline argument \\\"\" + name.value + \"\\\" of kind \\\"\" + value.kind + \"\\\"\" +\n            'is not supported. Use variables instead of inline arguments to ' +\n            'overcome this limitation.');\n    }\n}\nfunction storeKeyNameFromField(field, variables) {\n    var directivesObj = null;\n    if (field.directives) {\n        directivesObj = {};\n        field.directives.forEach(function (directive) {\n            directivesObj[directive.name.value] = {};\n            if (directive.arguments) {\n                directive.arguments.forEach(function (_a) {\n                    var name = _a.name, value = _a.value;\n                    return valueToObjectRepresentation(directivesObj[directive.name.value], name, value, variables);\n                });\n            }\n        });\n    }\n    var argObj = null;\n    if (field.arguments && field.arguments.length) {\n        argObj = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj, name, value, variables);\n        });\n    }\n    return getStoreKeyName(field.name.value, argObj, directivesObj);\n}\nvar KNOWN_DIRECTIVES = [\n    'connection',\n    'include',\n    'skip',\n    'client',\n    'rest',\n    'export',\n];\nfunction getStoreKeyName(fieldName, args, directives) {\n    if (directives &&\n        directives['connection'] &&\n        directives['connection']['key']) {\n        if (directives['connection']['filter'] &&\n            directives['connection']['filter'].length > 0) {\n            var filterKeys = directives['connection']['filter']\n                ? directives['connection']['filter']\n                : [];\n            filterKeys.sort();\n            var queryArgs_1 = args;\n            var filteredArgs_1 = {};\n            filterKeys.forEach(function (key) {\n                filteredArgs_1[key] = queryArgs_1[key];\n            });\n            return directives['connection']['key'] + \"(\" + JSON.stringify(filteredArgs_1) + \")\";\n        }\n        else {\n            return directives['connection']['key'];\n        }\n    }\n    var completeFieldName = fieldName;\n    if (args) {\n        var stringifiedArgs = stringify(args);\n        completeFieldName += \"(\" + stringifiedArgs + \")\";\n    }\n    if (directives) {\n        Object.keys(directives).forEach(function (key) {\n            if (KNOWN_DIRECTIVES.indexOf(key) !== -1)\n                return;\n            if (directives[key] && Object.keys(directives[key]).length) {\n                completeFieldName += \"@\" + key + \"(\" + JSON.stringify(directives[key]) + \")\";\n            }\n            else {\n                completeFieldName += \"@\" + key;\n            }\n        });\n    }\n    return completeFieldName;\n}\nfunction argumentsObjectFromField(field, variables) {\n    if (field.arguments && field.arguments.length) {\n        var argObj_1 = {};\n        field.arguments.forEach(function (_a) {\n            var name = _a.name, value = _a.value;\n            return valueToObjectRepresentation(argObj_1, name, value, variables);\n        });\n        return argObj_1;\n    }\n    return null;\n}\nfunction resultKeyNameFromField(field) {\n    return field.alias ? field.alias.value : field.name.value;\n}\nfunction isField(selection) {\n    return selection.kind === 'Field';\n}\nfunction isInlineFragment(selection) {\n    return selection.kind === 'InlineFragment';\n}\nfunction isIdValue(idObject) {\n    return idObject &&\n        idObject.type === 'id' &&\n        typeof idObject.generated === 'boolean';\n}\nfunction toIdValue(idConfig, generated) {\n    if (generated === void 0) { generated = false; }\n    return __assign({ type: 'id', generated: generated }, (typeof idConfig === 'string'\n        ? { id: idConfig, typename: undefined }\n        : idConfig));\n}\nfunction isJsonValue(jsonObject) {\n    return (jsonObject != null &&\n        typeof jsonObject === 'object' &&\n        jsonObject.type === 'json');\n}\nfunction defaultValueFromVariable(node) {\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(18) : new InvariantError(\"Variable nodes are not supported by valueFromNode\");\n}\nfunction valueFromNode(node, onVariable) {\n    if (onVariable === void 0) { onVariable = defaultValueFromVariable; }\n    switch (node.kind) {\n        case 'Variable':\n            return onVariable(node);\n        case 'NullValue':\n            return null;\n        case 'IntValue':\n            return parseInt(node.value, 10);\n        case 'FloatValue':\n            return parseFloat(node.value);\n        case 'ListValue':\n            return node.values.map(function (v) { return valueFromNode(v, onVariable); });\n        case 'ObjectValue': {\n            var value = {};\n            for (var _i = 0, _a = node.fields; _i < _a.length; _i++) {\n                var field = _a[_i];\n                value[field.name.value] = valueFromNode(field.value, onVariable);\n            }\n            return value;\n        }\n        default:\n            return node.value;\n    }\n}\n\nfunction getDirectiveInfoFromField(field, variables) {\n    if (field.directives && field.directives.length) {\n        var directiveObj_1 = {};\n        field.directives.forEach(function (directive) {\n            directiveObj_1[directive.name.value] = argumentsObjectFromField(directive, variables);\n        });\n        return directiveObj_1;\n    }\n    return null;\n}\nfunction shouldInclude(selection, variables) {\n    if (variables === void 0) { variables = {}; }\n    return getInclusionDirectives(selection.directives).every(function (_a) {\n        var directive = _a.directive, ifArgument = _a.ifArgument;\n        var evaledValue = false;\n        if (ifArgument.value.kind === 'Variable') {\n            evaledValue = variables[ifArgument.value.name.value];\n            process.env.NODE_ENV === \"production\" ? invariant(evaledValue !== void 0, 1) : invariant(evaledValue !== void 0, \"Invalid variable referenced in @\" + directive.name.value + \" directive.\");\n        }\n        else {\n            evaledValue = ifArgument.value.value;\n        }\n        return directive.name.value === 'skip' ? !evaledValue : evaledValue;\n    });\n}\nfunction getDirectiveNames(doc) {\n    var names = [];\n    visit(doc, {\n        Directive: function (node) {\n            names.push(node.name.value);\n        },\n    });\n    return names;\n}\nfunction hasDirectives(names, doc) {\n    return getDirectiveNames(doc).some(function (name) { return names.indexOf(name) > -1; });\n}\nfunction hasClientExports(document) {\n    return (document &&\n        hasDirectives(['client'], document) &&\n        hasDirectives(['export'], document));\n}\nfunction isInclusionDirective(_a) {\n    var value = _a.name.value;\n    return value === 'skip' || value === 'include';\n}\nfunction getInclusionDirectives(directives) {\n    return directives ? directives.filter(isInclusionDirective).map(function (directive) {\n        var directiveArguments = directive.arguments;\n        var directiveName = directive.name.value;\n        process.env.NODE_ENV === \"production\" ? invariant(directiveArguments && directiveArguments.length === 1, 2) : invariant(directiveArguments && directiveArguments.length === 1, \"Incorrect number of arguments for the @\" + directiveName + \" directive.\");\n        var ifArgument = directiveArguments[0];\n        process.env.NODE_ENV === \"production\" ? invariant(ifArgument.name && ifArgument.name.value === 'if', 3) : invariant(ifArgument.name && ifArgument.name.value === 'if', \"Invalid argument for the @\" + directiveName + \" directive.\");\n        var ifValue = ifArgument.value;\n        process.env.NODE_ENV === \"production\" ? invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), 4) : invariant(ifValue &&\n            (ifValue.kind === 'Variable' || ifValue.kind === 'BooleanValue'), \"Argument for the @\" + directiveName + \" directive must be a variable or a boolean value.\");\n        return { directive: directive, ifArgument: ifArgument };\n    }) : [];\n}\n\nfunction getFragmentQueryDocument(document, fragmentName) {\n    var actualFragmentName = fragmentName;\n    var fragments = [];\n    document.definitions.forEach(function (definition) {\n        if (definition.kind === 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(5) : new InvariantError(\"Found a \" + definition.operation + \" operation\" + (definition.name ? \" named '\" + definition.name.value + \"'\" : '') + \". \" +\n                'No operations are allowed when using a fragment as a query. Only fragments are allowed.');\n        }\n        if (definition.kind === 'FragmentDefinition') {\n            fragments.push(definition);\n        }\n    });\n    if (typeof actualFragmentName === 'undefined') {\n        process.env.NODE_ENV === \"production\" ? invariant(fragments.length === 1, 6) : invariant(fragments.length === 1, \"Found \" + fragments.length + \" fragments. `fragmentName` must be provided when there is not exactly 1 fragment.\");\n        actualFragmentName = fragments[0].name.value;\n    }\n    var query = __assign({}, document, { definitions: [\n            {\n                kind: 'OperationDefinition',\n                operation: 'query',\n                selectionSet: {\n                    kind: 'SelectionSet',\n                    selections: [\n                        {\n                            kind: 'FragmentSpread',\n                            name: {\n                                kind: 'Name',\n                                value: actualFragmentName,\n                            },\n                        },\n                    ],\n                },\n            }\n        ].concat(document.definitions) });\n    return query;\n}\n\nfunction assign(target) {\n    var sources = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        sources[_i - 1] = arguments[_i];\n    }\n    sources.forEach(function (source) {\n        if (typeof source === 'undefined' || source === null) {\n            return;\n        }\n        Object.keys(source).forEach(function (key) {\n            target[key] = source[key];\n        });\n    });\n    return target;\n}\n\nfunction getMutationDefinition(doc) {\n    checkDocument(doc);\n    var mutationDef = doc.definitions.filter(function (definition) {\n        return definition.kind === 'OperationDefinition' &&\n            definition.operation === 'mutation';\n    })[0];\n    process.env.NODE_ENV === \"production\" ? invariant(mutationDef, 7) : invariant(mutationDef, 'Must contain a mutation definition.');\n    return mutationDef;\n}\nfunction checkDocument(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc && doc.kind === 'Document', 8) : invariant(doc && doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    var operations = doc.definitions\n        .filter(function (d) { return d.kind !== 'FragmentDefinition'; })\n        .map(function (definition) {\n        if (definition.kind !== 'OperationDefinition') {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(9) : new InvariantError(\"Schema type definitions not allowed in queries. Found: \\\"\" + definition.kind + \"\\\"\");\n        }\n        return definition;\n    });\n    process.env.NODE_ENV === \"production\" ? invariant(operations.length <= 1, 10) : invariant(operations.length <= 1, \"Ambiguous GraphQL document: contains \" + operations.length + \" operations\");\n    return doc;\n}\nfunction getOperationDefinition(doc) {\n    checkDocument(doc);\n    return doc.definitions.filter(function (definition) { return definition.kind === 'OperationDefinition'; })[0];\n}\nfunction getOperationDefinitionOrDie(document) {\n    var def = getOperationDefinition(document);\n    process.env.NODE_ENV === \"production\" ? invariant(def, 11) : invariant(def, \"GraphQL document is missing an operation\");\n    return def;\n}\nfunction getOperationName(doc) {\n    return (doc.definitions\n        .filter(function (definition) {\n        return definition.kind === 'OperationDefinition' && definition.name;\n    })\n        .map(function (x) { return x.name.value; })[0] || null);\n}\nfunction getFragmentDefinitions(doc) {\n    return doc.definitions.filter(function (definition) { return definition.kind === 'FragmentDefinition'; });\n}\nfunction getQueryDefinition(doc) {\n    var queryDef = getOperationDefinition(doc);\n    process.env.NODE_ENV === \"production\" ? invariant(queryDef && queryDef.operation === 'query', 12) : invariant(queryDef && queryDef.operation === 'query', 'Must contain a query definition.');\n    return queryDef;\n}\nfunction getFragmentDefinition(doc) {\n    process.env.NODE_ENV === \"production\" ? invariant(doc.kind === 'Document', 13) : invariant(doc.kind === 'Document', \"Expecting a parsed GraphQL document. Perhaps you need to wrap the query string in a \\\"gql\\\" tag? http://docs.apollostack.com/apollo-client/core.html#gql\");\n    process.env.NODE_ENV === \"production\" ? invariant(doc.definitions.length <= 1, 14) : invariant(doc.definitions.length <= 1, 'Fragment must have exactly one definition.');\n    var fragmentDef = doc.definitions[0];\n    process.env.NODE_ENV === \"production\" ? invariant(fragmentDef.kind === 'FragmentDefinition', 15) : invariant(fragmentDef.kind === 'FragmentDefinition', 'Must be a fragment definition.');\n    return fragmentDef;\n}\nfunction getMainDefinition(queryDoc) {\n    checkDocument(queryDoc);\n    var fragmentDefinition;\n    for (var _i = 0, _a = queryDoc.definitions; _i < _a.length; _i++) {\n        var definition = _a[_i];\n        if (definition.kind === 'OperationDefinition') {\n            var operation = definition.operation;\n            if (operation === 'query' ||\n                operation === 'mutation' ||\n                operation === 'subscription') {\n                return definition;\n            }\n        }\n        if (definition.kind === 'FragmentDefinition' && !fragmentDefinition) {\n            fragmentDefinition = definition;\n        }\n    }\n    if (fragmentDefinition) {\n        return fragmentDefinition;\n    }\n    throw process.env.NODE_ENV === \"production\" ? new InvariantError(16) : new InvariantError('Expected a parsed GraphQL query with a query, mutation, subscription, or a fragment.');\n}\nfunction createFragmentMap(fragments) {\n    if (fragments === void 0) { fragments = []; }\n    var symTable = {};\n    fragments.forEach(function (fragment) {\n        symTable[fragment.name.value] = fragment;\n    });\n    return symTable;\n}\nfunction getDefaultValues(definition) {\n    if (definition &&\n        definition.variableDefinitions &&\n        definition.variableDefinitions.length) {\n        var defaultValues = definition.variableDefinitions\n            .filter(function (_a) {\n            var defaultValue = _a.defaultValue;\n            return defaultValue;\n        })\n            .map(function (_a) {\n            var variable = _a.variable, defaultValue = _a.defaultValue;\n            var defaultValueObj = {};\n            valueToObjectRepresentation(defaultValueObj, variable.name, defaultValue);\n            return defaultValueObj;\n        });\n        return assign.apply(void 0, [{}].concat(defaultValues));\n    }\n    return {};\n}\nfunction variablesInOperation(operation) {\n    var names = new Set();\n    if (operation.variableDefinitions) {\n        for (var _i = 0, _a = operation.variableDefinitions; _i < _a.length; _i++) {\n            var definition = _a[_i];\n            names.add(definition.variable.name.value);\n        }\n    }\n    return names;\n}\n\nfunction filterInPlace(array, test, context) {\n    var target = 0;\n    array.forEach(function (elem, i) {\n        if (test.call(this, elem, i, array)) {\n            array[target++] = elem;\n        }\n    }, context);\n    array.length = target;\n    return array;\n}\n\nvar TYPENAME_FIELD = {\n    kind: 'Field',\n    name: {\n        kind: 'Name',\n        value: '__typename',\n    },\n};\nfunction isEmpty(op, fragments) {\n    return op.selectionSet.selections.every(function (selection) {\n        return selection.kind === 'FragmentSpread' &&\n            isEmpty(fragments[selection.name.value], fragments);\n    });\n}\nfunction nullIfDocIsEmpty(doc) {\n    return isEmpty(getOperationDefinition(doc) || getFragmentDefinition(doc), createFragmentMap(getFragmentDefinitions(doc)))\n        ? null\n        : doc;\n}\nfunction getDirectiveMatcher(directives) {\n    return function directiveMatcher(directive) {\n        return directives.some(function (dir) {\n            return (dir.name && dir.name === directive.name.value) ||\n                (dir.test && dir.test(directive));\n        });\n    };\n}\nfunction removeDirectivesFromDocument(directives, doc) {\n    var variablesInUse = Object.create(null);\n    var variablesToRemove = [];\n    var fragmentSpreadsInUse = Object.create(null);\n    var fragmentSpreadsToRemove = [];\n    var modifiedDoc = nullIfDocIsEmpty(visit(doc, {\n        Variable: {\n            enter: function (node, _key, parent) {\n                if (parent.kind !== 'VariableDefinition') {\n                    variablesInUse[node.name.value] = true;\n                }\n            },\n        },\n        Field: {\n            enter: function (node) {\n                if (directives && node.directives) {\n                    var shouldRemoveField = directives.some(function (directive) { return directive.remove; });\n                    if (shouldRemoveField &&\n                        node.directives &&\n                        node.directives.some(getDirectiveMatcher(directives))) {\n                        if (node.arguments) {\n                            node.arguments.forEach(function (arg) {\n                                if (arg.value.kind === 'Variable') {\n                                    variablesToRemove.push({\n                                        name: arg.value.name.value,\n                                    });\n                                }\n                            });\n                        }\n                        if (node.selectionSet) {\n                            getAllFragmentSpreadsFromSelectionSet(node.selectionSet).forEach(function (frag) {\n                                fragmentSpreadsToRemove.push({\n                                    name: frag.name.value,\n                                });\n                            });\n                        }\n                        return null;\n                    }\n                }\n            },\n        },\n        FragmentSpread: {\n            enter: function (node) {\n                fragmentSpreadsInUse[node.name.value] = true;\n            },\n        },\n        Directive: {\n            enter: function (node) {\n                if (getDirectiveMatcher(directives)(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n    if (modifiedDoc &&\n        filterInPlace(variablesToRemove, function (v) { return !variablesInUse[v.name]; }).length) {\n        modifiedDoc = removeArgumentsFromDocument(variablesToRemove, modifiedDoc);\n    }\n    if (modifiedDoc &&\n        filterInPlace(fragmentSpreadsToRemove, function (fs) { return !fragmentSpreadsInUse[fs.name]; })\n            .length) {\n        modifiedDoc = removeFragmentSpreadFromDocument(fragmentSpreadsToRemove, modifiedDoc);\n    }\n    return modifiedDoc;\n}\nfunction addTypenameToDocument(doc) {\n    return visit(checkDocument(doc), {\n        SelectionSet: {\n            enter: function (node, _key, parent) {\n                if (parent &&\n                    parent.kind === 'OperationDefinition') {\n                    return;\n                }\n                var selections = node.selections;\n                if (!selections) {\n                    return;\n                }\n                var skip = selections.some(function (selection) {\n                    return (isField(selection) &&\n                        (selection.name.value === '__typename' ||\n                            selection.name.value.lastIndexOf('__', 0) === 0));\n                });\n                if (skip) {\n                    return;\n                }\n                var field = parent;\n                if (isField(field) &&\n                    field.directives &&\n                    field.directives.some(function (d) { return d.name.value === 'export'; })) {\n                    return;\n                }\n                return __assign({}, node, { selections: selections.concat([TYPENAME_FIELD]) });\n            },\n        },\n    });\n}\nvar connectionRemoveConfig = {\n    test: function (directive) {\n        var willRemove = directive.name.value === 'connection';\n        if (willRemove) {\n            if (!directive.arguments ||\n                !directive.arguments.some(function (arg) { return arg.name.value === 'key'; })) {\n                process.env.NODE_ENV === \"production\" || invariant.warn('Removing an @connection directive even though it does not have a key. ' +\n                    'You may want to use the key parameter to specify a store key.');\n            }\n        }\n        return willRemove;\n    },\n};\nfunction removeConnectionDirectiveFromDocument(doc) {\n    return removeDirectivesFromDocument([connectionRemoveConfig], checkDocument(doc));\n}\nfunction hasDirectivesInSelectionSet(directives, selectionSet, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    return (selectionSet &&\n        selectionSet.selections &&\n        selectionSet.selections.some(function (selection) {\n            return hasDirectivesInSelection(directives, selection, nestedCheck);\n        }));\n}\nfunction hasDirectivesInSelection(directives, selection, nestedCheck) {\n    if (nestedCheck === void 0) { nestedCheck = true; }\n    if (!isField(selection)) {\n        return true;\n    }\n    if (!selection.directives) {\n        return false;\n    }\n    return (selection.directives.some(getDirectiveMatcher(directives)) ||\n        (nestedCheck &&\n            hasDirectivesInSelectionSet(directives, selection.selectionSet, nestedCheck)));\n}\nfunction getDirectivesFromDocument(directives, doc) {\n    checkDocument(doc);\n    var parentPath;\n    return nullIfDocIsEmpty(visit(doc, {\n        SelectionSet: {\n            enter: function (node, _key, _parent, path) {\n                var currentPath = path.join('-');\n                if (!parentPath ||\n                    currentPath === parentPath ||\n                    !currentPath.startsWith(parentPath)) {\n                    if (node.selections) {\n                        var selectionsWithDirectives = node.selections.filter(function (selection) { return hasDirectivesInSelection(directives, selection); });\n                        if (hasDirectivesInSelectionSet(directives, node, false)) {\n                            parentPath = currentPath;\n                        }\n                        return __assign({}, node, { selections: selectionsWithDirectives });\n                    }\n                    else {\n                        return null;\n                    }\n                }\n            },\n        },\n    }));\n}\nfunction getArgumentMatcher(config) {\n    return function argumentMatcher(argument) {\n        return config.some(function (aConfig) {\n            return argument.value &&\n                argument.value.kind === 'Variable' &&\n                argument.value.name &&\n                (aConfig.name === argument.value.name.value ||\n                    (aConfig.test && aConfig.test(argument)));\n        });\n    };\n}\nfunction removeArgumentsFromDocument(config, doc) {\n    var argMatcher = getArgumentMatcher(config);\n    return nullIfDocIsEmpty(visit(doc, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { variableDefinitions: node.variableDefinitions.filter(function (varDef) {\n                        return !config.some(function (arg) { return arg.name === varDef.variable.name.value; });\n                    }) });\n            },\n        },\n        Field: {\n            enter: function (node) {\n                var shouldRemoveField = config.some(function (argConfig) { return argConfig.remove; });\n                if (shouldRemoveField) {\n                    var argMatchCount_1 = 0;\n                    node.arguments.forEach(function (arg) {\n                        if (argMatcher(arg)) {\n                            argMatchCount_1 += 1;\n                        }\n                    });\n                    if (argMatchCount_1 === 1) {\n                        return null;\n                    }\n                }\n            },\n        },\n        Argument: {\n            enter: function (node) {\n                if (argMatcher(node)) {\n                    return null;\n                }\n            },\n        },\n    }));\n}\nfunction removeFragmentSpreadFromDocument(config, doc) {\n    function enter(node) {\n        if (config.some(function (def) { return def.name === node.name.value; })) {\n            return null;\n        }\n    }\n    return nullIfDocIsEmpty(visit(doc, {\n        FragmentSpread: { enter: enter },\n        FragmentDefinition: { enter: enter },\n    }));\n}\nfunction getAllFragmentSpreadsFromSelectionSet(selectionSet) {\n    var allFragments = [];\n    selectionSet.selections.forEach(function (selection) {\n        if ((isField(selection) || isInlineFragment(selection)) &&\n            selection.selectionSet) {\n            getAllFragmentSpreadsFromSelectionSet(selection.selectionSet).forEach(function (frag) { return allFragments.push(frag); });\n        }\n        else if (selection.kind === 'FragmentSpread') {\n            allFragments.push(selection);\n        }\n    });\n    return allFragments;\n}\nfunction buildQueryFromSelectionSet(document) {\n    var definition = getMainDefinition(document);\n    var definitionOperation = definition.operation;\n    if (definitionOperation === 'query') {\n        return document;\n    }\n    var modifiedDoc = visit(document, {\n        OperationDefinition: {\n            enter: function (node) {\n                return __assign({}, node, { operation: 'query' });\n            },\n        },\n    });\n    return modifiedDoc;\n}\nfunction removeClientSetsFromDocument(document) {\n    checkDocument(document);\n    var modifiedDoc = removeDirectivesFromDocument([\n        {\n            test: function (directive) { return directive.name.value === 'client'; },\n            remove: true,\n        },\n    ], document);\n    if (modifiedDoc) {\n        modifiedDoc = visit(modifiedDoc, {\n            FragmentDefinition: {\n                enter: function (node) {\n                    if (node.selectionSet) {\n                        var isTypenameOnly = node.selectionSet.selections.every(function (selection) {\n                            return isField(selection) && selection.name.value === '__typename';\n                        });\n                        if (isTypenameOnly) {\n                            return null;\n                        }\n                    }\n                },\n            },\n        });\n    }\n    return modifiedDoc;\n}\n\nvar canUseWeakMap = typeof WeakMap === 'function' && !(typeof navigator === 'object' &&\n    navigator.product === 'ReactNative');\n\nvar toString = Object.prototype.toString;\nfunction cloneDeep(value) {\n    return cloneDeepHelper(value, new Map());\n}\nfunction cloneDeepHelper(val, seen) {\n    switch (toString.call(val)) {\n        case \"[object Array]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_1 = val.slice(0);\n            seen.set(val, copy_1);\n            copy_1.forEach(function (child, i) {\n                copy_1[i] = cloneDeepHelper(child, seen);\n            });\n            return copy_1;\n        }\n        case \"[object Object]\": {\n            if (seen.has(val))\n                return seen.get(val);\n            var copy_2 = Object.create(Object.getPrototypeOf(val));\n            seen.set(val, copy_2);\n            Object.keys(val).forEach(function (key) {\n                copy_2[key] = cloneDeepHelper(val[key], seen);\n            });\n            return copy_2;\n        }\n        default:\n            return val;\n    }\n}\n\nfunction getEnv() {\n    if (typeof process !== 'undefined' && process.env.NODE_ENV) {\n        return process.env.NODE_ENV;\n    }\n    return 'development';\n}\nfunction isEnv(env) {\n    return getEnv() === env;\n}\nfunction isProduction() {\n    return isEnv('production') === true;\n}\nfunction isDevelopment() {\n    return isEnv('development') === true;\n}\nfunction isTest() {\n    return isEnv('test') === true;\n}\n\nfunction tryFunctionOrLogError(f) {\n    try {\n        return f();\n    }\n    catch (e) {\n        if (console.error) {\n            console.error(e);\n        }\n    }\n}\nfunction graphQLResultHasError(result) {\n    return result.errors && result.errors.length;\n}\n\nfunction isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n    if (a instanceof Date && b instanceof Date) {\n        return a.getTime() === b.getTime();\n    }\n    if (a != null &&\n        typeof a === 'object' &&\n        b != null &&\n        typeof b === 'object') {\n        for (var key in a) {\n            if (Object.prototype.hasOwnProperty.call(a, key)) {\n                if (!Object.prototype.hasOwnProperty.call(b, key)) {\n                    return false;\n                }\n                if (!isEqual(a[key], b[key])) {\n                    return false;\n                }\n            }\n        }\n        for (var key in b) {\n            if (Object.prototype.hasOwnProperty.call(b, key) &&\n                !Object.prototype.hasOwnProperty.call(a, key)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return false;\n}\n\nfunction deepFreeze(o) {\n    Object.freeze(o);\n    Object.getOwnPropertyNames(o).forEach(function (prop) {\n        if (o[prop] !== null &&\n            (typeof o[prop] === 'object' || typeof o[prop] === 'function') &&\n            !Object.isFrozen(o[prop])) {\n            deepFreeze(o[prop]);\n        }\n    });\n    return o;\n}\nfunction maybeDeepFreeze(obj) {\n    if (isDevelopment() || isTest()) {\n        var symbolIsPolyfilled = typeof Symbol === 'function' && typeof Symbol('') === 'string';\n        if (!symbolIsPolyfilled) {\n            return deepFreeze(obj);\n        }\n    }\n    return obj;\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nfunction mergeDeep() {\n    var sources = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        sources[_i] = arguments[_i];\n    }\n    return mergeDeepArray(sources);\n}\nfunction mergeDeepArray(sources) {\n    var target = sources[0] || {};\n    var count = sources.length;\n    if (count > 1) {\n        var pastCopies = [];\n        target = shallowCopyForMerge(target, pastCopies);\n        for (var i = 1; i < count; ++i) {\n            target = mergeHelper(target, sources[i], pastCopies);\n        }\n    }\n    return target;\n}\nfunction isObject(obj) {\n    return obj !== null && typeof obj === 'object';\n}\nfunction mergeHelper(target, source, pastCopies) {\n    if (isObject(source) && isObject(target)) {\n        if (Object.isExtensible && !Object.isExtensible(target)) {\n            target = shallowCopyForMerge(target, pastCopies);\n        }\n        Object.keys(source).forEach(function (sourceKey) {\n            var sourceValue = source[sourceKey];\n            if (hasOwnProperty.call(target, sourceKey)) {\n                var targetValue = target[sourceKey];\n                if (sourceValue !== targetValue) {\n                    target[sourceKey] = mergeHelper(shallowCopyForMerge(targetValue, pastCopies), sourceValue, pastCopies);\n                }\n            }\n            else {\n                target[sourceKey] = sourceValue;\n            }\n        });\n        return target;\n    }\n    return source;\n}\nfunction shallowCopyForMerge(value, pastCopies) {\n    if (value !== null &&\n        typeof value === 'object' &&\n        pastCopies.indexOf(value) < 0) {\n        if (Array.isArray(value)) {\n            value = value.slice(0);\n        }\n        else {\n            value = __assign({ __proto__: Object.getPrototypeOf(value) }, value);\n        }\n        pastCopies.push(value);\n    }\n    return value;\n}\n\nvar haveWarned = Object.create({});\nfunction warnOnceInDevelopment(msg, type) {\n    if (type === void 0) { type = 'warn'; }\n    if (!isProduction() && !haveWarned[msg]) {\n        if (!isTest()) {\n            haveWarned[msg] = true;\n        }\n        if (type === 'error') {\n            console.error(msg);\n        }\n        else {\n            console.warn(msg);\n        }\n    }\n}\n\nfunction stripSymbols(data) {\n    return JSON.parse(JSON.stringify(data));\n}\n\nexport { addTypenameToDocument, argumentsObjectFromField, assign, buildQueryFromSelectionSet, canUseWeakMap, checkDocument, cloneDeep, createFragmentMap, getDefaultValues, getDirectiveInfoFromField, getDirectiveNames, getDirectivesFromDocument, getEnv, getFragmentDefinition, getFragmentDefinitions, getFragmentQueryDocument, getInclusionDirectives, getMainDefinition, getMutationDefinition, getOperationDefinition, getOperationDefinitionOrDie, getOperationName, getQueryDefinition, getStoreKeyName, graphQLResultHasError, hasClientExports, hasDirectives, isDevelopment, isEnv, isEqual, isField, isIdValue, isInlineFragment, isJsonValue, isNumberValue, isProduction, isScalarValue, isTest, maybeDeepFreeze, mergeDeep, mergeDeepArray, removeArgumentsFromDocument, removeClientSetsFromDocument, removeConnectionDirectiveFromDocument, removeDirectivesFromDocument, removeFragmentSpreadFromDocument, resultKeyNameFromField, shouldInclude, storeKeyNameFromField, stripSymbols, toIdValue, tryFunctionOrLogError, valueFromNode, valueToObjectRepresentation, variablesInOperation, warnOnceInDevelopment };\n//# sourceMappingURL=bundle.esm.js.map\n","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// === Symbol Support ===\n\nvar hasSymbols = function () {\n  return typeof Symbol === 'function';\n};\nvar hasSymbol = function (name) {\n  return hasSymbols() && Boolean(Symbol[name]);\n};\nvar getSymbol = function (name) {\n  return hasSymbol(name) ? Symbol[name] : '@@' + name;\n};\n\nif (hasSymbols() && !hasSymbol('observable')) {\n  Symbol.observable = Symbol('observable');\n}\n\nvar SymbolIterator = getSymbol('iterator');\nvar SymbolObservable = getSymbol('observable');\nvar SymbolSpecies = getSymbol('species');\n\n// === Abstract Operations ===\n\nfunction getMethod(obj, key) {\n  var value = obj[key];\n\n  if (value == null) return undefined;\n\n  if (typeof value !== 'function') throw new TypeError(value + ' is not a function');\n\n  return value;\n}\n\nfunction getSpecies(obj) {\n  var ctor = obj.constructor;\n  if (ctor !== undefined) {\n    ctor = ctor[SymbolSpecies];\n    if (ctor === null) {\n      ctor = undefined;\n    }\n  }\n  return ctor !== undefined ? ctor : Observable;\n}\n\nfunction isObservable(x) {\n  return x instanceof Observable; // SPEC: Brand check\n}\n\nfunction hostReportError(e) {\n  if (hostReportError.log) {\n    hostReportError.log(e);\n  } else {\n    setTimeout(function () {\n      throw e;\n    });\n  }\n}\n\nfunction enqueue(fn) {\n  Promise.resolve().then(function () {\n    try {\n      fn();\n    } catch (e) {\n      hostReportError(e);\n    }\n  });\n}\n\nfunction cleanupSubscription(subscription) {\n  var cleanup = subscription._cleanup;\n  if (cleanup === undefined) return;\n\n  subscription._cleanup = undefined;\n\n  if (!cleanup) {\n    return;\n  }\n\n  try {\n    if (typeof cleanup === 'function') {\n      cleanup();\n    } else {\n      var unsubscribe = getMethod(cleanup, 'unsubscribe');\n      if (unsubscribe) {\n        unsubscribe.call(cleanup);\n      }\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n}\n\nfunction closeSubscription(subscription) {\n  subscription._observer = undefined;\n  subscription._queue = undefined;\n  subscription._state = 'closed';\n}\n\nfunction flushSubscription(subscription) {\n  var queue = subscription._queue;\n  if (!queue) {\n    return;\n  }\n  subscription._queue = undefined;\n  subscription._state = 'ready';\n  for (var i = 0; i < queue.length; ++i) {\n    notifySubscription(subscription, queue[i].type, queue[i].value);\n    if (subscription._state === 'closed') break;\n  }\n}\n\nfunction notifySubscription(subscription, type, value) {\n  subscription._state = 'running';\n\n  var observer = subscription._observer;\n\n  try {\n    var m = getMethod(observer, type);\n    switch (type) {\n      case 'next':\n        if (m) m.call(observer, value);\n        break;\n      case 'error':\n        closeSubscription(subscription);\n        if (m) m.call(observer, value);else throw value;\n        break;\n      case 'complete':\n        closeSubscription(subscription);\n        if (m) m.call(observer);\n        break;\n    }\n  } catch (e) {\n    hostReportError(e);\n  }\n\n  if (subscription._state === 'closed') cleanupSubscription(subscription);else if (subscription._state === 'running') subscription._state = 'ready';\n}\n\nfunction onNotify(subscription, type, value) {\n  if (subscription._state === 'closed') return;\n\n  if (subscription._state === 'buffering') {\n    subscription._queue.push({ type: type, value: value });\n    return;\n  }\n\n  if (subscription._state !== 'ready') {\n    subscription._state = 'buffering';\n    subscription._queue = [{ type: type, value: value }];\n    enqueue(function () {\n      return flushSubscription(subscription);\n    });\n    return;\n  }\n\n  notifySubscription(subscription, type, value);\n}\n\nvar Subscription = function () {\n  function Subscription(observer, subscriber) {\n    _classCallCheck(this, Subscription);\n\n    // ASSERT: observer is an object\n    // ASSERT: subscriber is callable\n\n    this._cleanup = undefined;\n    this._observer = observer;\n    this._queue = undefined;\n    this._state = 'initializing';\n\n    var subscriptionObserver = new SubscriptionObserver(this);\n\n    try {\n      this._cleanup = subscriber.call(undefined, subscriptionObserver);\n    } catch (e) {\n      subscriptionObserver.error(e);\n    }\n\n    if (this._state === 'initializing') this._state = 'ready';\n  }\n\n  _createClass(Subscription, [{\n    key: 'unsubscribe',\n    value: function unsubscribe() {\n      if (this._state !== 'closed') {\n        closeSubscription(this);\n        cleanupSubscription(this);\n      }\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._state === 'closed';\n    }\n  }]);\n\n  return Subscription;\n}();\n\nvar SubscriptionObserver = function () {\n  function SubscriptionObserver(subscription) {\n    _classCallCheck(this, SubscriptionObserver);\n\n    this._subscription = subscription;\n  }\n\n  _createClass(SubscriptionObserver, [{\n    key: 'next',\n    value: function next(value) {\n      onNotify(this._subscription, 'next', value);\n    }\n  }, {\n    key: 'error',\n    value: function error(value) {\n      onNotify(this._subscription, 'error', value);\n    }\n  }, {\n    key: 'complete',\n    value: function complete() {\n      onNotify(this._subscription, 'complete');\n    }\n  }, {\n    key: 'closed',\n    get: function () {\n      return this._subscription._state === 'closed';\n    }\n  }]);\n\n  return SubscriptionObserver;\n}();\n\nvar Observable = exports.Observable = function () {\n  function Observable(subscriber) {\n    _classCallCheck(this, Observable);\n\n    if (!(this instanceof Observable)) throw new TypeError('Observable cannot be called as a function');\n\n    if (typeof subscriber !== 'function') throw new TypeError('Observable initializer must be a function');\n\n    this._subscriber = subscriber;\n  }\n\n  _createClass(Observable, [{\n    key: 'subscribe',\n    value: function subscribe(observer) {\n      if (typeof observer !== 'object' || observer === null) {\n        observer = {\n          next: observer,\n          error: arguments[1],\n          complete: arguments[2]\n        };\n      }\n      return new Subscription(observer, this._subscriber);\n    }\n  }, {\n    key: 'forEach',\n    value: function forEach(fn) {\n      var _this = this;\n\n      return new Promise(function (resolve, reject) {\n        if (typeof fn !== 'function') {\n          reject(new TypeError(fn + ' is not a function'));\n          return;\n        }\n\n        function done() {\n          subscription.unsubscribe();\n          resolve();\n        }\n\n        var subscription = _this.subscribe({\n          next: function (value) {\n            try {\n              fn(value, done);\n            } catch (e) {\n              reject(e);\n              subscription.unsubscribe();\n            }\n          },\n\n          error: reject,\n          complete: resolve\n        });\n      });\n    }\n  }, {\n    key: 'map',\n    value: function map(fn) {\n      var _this2 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this2.subscribe({\n          next: function (value) {\n            try {\n              value = fn(value);\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'filter',\n    value: function filter(fn) {\n      var _this3 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        return _this3.subscribe({\n          next: function (value) {\n            try {\n              if (!fn(value)) return;\n            } catch (e) {\n              return observer.error(e);\n            }\n            observer.next(value);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'reduce',\n    value: function reduce(fn) {\n      var _this4 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n      var hasSeed = arguments.length > 1;\n      var hasValue = false;\n      var seed = arguments[1];\n      var acc = seed;\n\n      return new C(function (observer) {\n        return _this4.subscribe({\n          next: function (value) {\n            var first = !hasValue;\n            hasValue = true;\n\n            if (!first || hasSeed) {\n              try {\n                acc = fn(acc, value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            } else {\n              acc = value;\n            }\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            if (!hasValue && !hasSeed) return observer.error(new TypeError('Cannot reduce an empty sequence'));\n\n            observer.next(acc);\n            observer.complete();\n          }\n        });\n      });\n    }\n  }, {\n    key: 'concat',\n    value: function concat() {\n      var _this5 = this;\n\n      for (var _len = arguments.length, sources = Array(_len), _key = 0; _key < _len; _key++) {\n        sources[_key] = arguments[_key];\n      }\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscription = void 0;\n        var index = 0;\n\n        function startNext(next) {\n          subscription = next.subscribe({\n            next: function (v) {\n              observer.next(v);\n            },\n            error: function (e) {\n              observer.error(e);\n            },\n            complete: function () {\n              if (index === sources.length) {\n                subscription = undefined;\n                observer.complete();\n              } else {\n                startNext(C.from(sources[index++]));\n              }\n            }\n          });\n        }\n\n        startNext(_this5);\n\n        return function () {\n          if (subscription) {\n            subscription.unsubscribe();\n            subscription = undefined;\n          }\n        };\n      });\n    }\n  }, {\n    key: 'flatMap',\n    value: function flatMap(fn) {\n      var _this6 = this;\n\n      if (typeof fn !== 'function') throw new TypeError(fn + ' is not a function');\n\n      var C = getSpecies(this);\n\n      return new C(function (observer) {\n        var subscriptions = [];\n\n        var outer = _this6.subscribe({\n          next: function (value) {\n            if (fn) {\n              try {\n                value = fn(value);\n              } catch (e) {\n                return observer.error(e);\n              }\n            }\n\n            var inner = C.from(value).subscribe({\n              next: function (value) {\n                observer.next(value);\n              },\n              error: function (e) {\n                observer.error(e);\n              },\n              complete: function () {\n                var i = subscriptions.indexOf(inner);\n                if (i >= 0) subscriptions.splice(i, 1);\n                completeIfDone();\n              }\n            });\n\n            subscriptions.push(inner);\n          },\n          error: function (e) {\n            observer.error(e);\n          },\n          complete: function () {\n            completeIfDone();\n          }\n        });\n\n        function completeIfDone() {\n          if (outer.closed && subscriptions.length === 0) observer.complete();\n        }\n\n        return function () {\n          subscriptions.forEach(function (s) {\n            return s.unsubscribe();\n          });\n          outer.unsubscribe();\n        };\n      });\n    }\n  }, {\n    key: SymbolObservable,\n    value: function () {\n      return this;\n    }\n  }], [{\n    key: 'from',\n    value: function from(x) {\n      var C = typeof this === 'function' ? this : Observable;\n\n      if (x == null) throw new TypeError(x + ' is not an object');\n\n      var method = getMethod(x, SymbolObservable);\n      if (method) {\n        var observable = method.call(x);\n\n        if (Object(observable) !== observable) throw new TypeError(observable + ' is not an object');\n\n        if (isObservable(observable) && observable.constructor === C) return observable;\n\n        return new C(function (observer) {\n          return observable.subscribe(observer);\n        });\n      }\n\n      if (hasSymbol('iterator')) {\n        method = getMethod(x, SymbolIterator);\n        if (method) {\n          return new C(function (observer) {\n            enqueue(function () {\n              if (observer.closed) return;\n              var _iteratorNormalCompletion = true;\n              var _didIteratorError = false;\n              var _iteratorError = undefined;\n\n              try {\n                for (var _iterator = method.call(x)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                  var item = _step.value;\n\n                  observer.next(item);\n                  if (observer.closed) return;\n                }\n              } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n              } finally {\n                try {\n                  if (!_iteratorNormalCompletion && _iterator.return) {\n                    _iterator.return();\n                  }\n                } finally {\n                  if (_didIteratorError) {\n                    throw _iteratorError;\n                  }\n                }\n              }\n\n              observer.complete();\n            });\n          });\n        }\n      }\n\n      if (Array.isArray(x)) {\n        return new C(function (observer) {\n          enqueue(function () {\n            if (observer.closed) return;\n            for (var i = 0; i < x.length; ++i) {\n              observer.next(x[i]);\n              if (observer.closed) return;\n            }\n            observer.complete();\n          });\n        });\n      }\n\n      throw new TypeError(x + ' is not observable');\n    }\n  }, {\n    key: 'of',\n    value: function of() {\n      for (var _len2 = arguments.length, items = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        items[_key2] = arguments[_key2];\n      }\n\n      var C = typeof this === 'function' ? this : Observable;\n\n      return new C(function (observer) {\n        enqueue(function () {\n          if (observer.closed) return;\n          for (var i = 0; i < items.length; ++i) {\n            observer.next(items[i]);\n            if (observer.closed) return;\n          }\n          observer.complete();\n        });\n      });\n    }\n  }, {\n    key: SymbolSpecies,\n    get: function () {\n      return this;\n    }\n  }]);\n\n  return Observable;\n}();\n\nif (hasSymbols()) {\n  Object.defineProperty(Observable, Symbol('extensions'), {\n    value: {\n      symbol: SymbolObservable,\n      hostReportError: hostReportError\n    },\n    configurable: true\n  });\n}","import zenObservable from 'zen-observable';\n\nvar Observable = zenObservable;\n\nexport default Observable;\nexport { Observable };\n//# sourceMappingURL=bundle.esm.js.map\n","module.exports = require('./lib/Observable.js').Observable;\n","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\nvar processStub = typeof process === \"object\" ? process : { env: {} };\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n */\nexport function dedentBlockStringValue(rawString) {\n  // Expand a block string's raw value into independent lines.\n  var lines = rawString.split(/\\r\\n|[\\n\\r]/g); // Remove common indentation from all lines but first.\n\n  var commonIndent = getBlockStringIndentation(lines);\n\n  if (commonIndent !== 0) {\n    for (var i = 1; i < lines.length; i++) {\n      lines[i] = lines[i].slice(commonIndent);\n    }\n  } // Remove leading and trailing blank lines.\n\n\n  while (lines.length > 0 && isBlank(lines[0])) {\n    lines.shift();\n  }\n\n  while (lines.length > 0 && isBlank(lines[lines.length - 1])) {\n    lines.pop();\n  } // Return a string of the lines joined with U+000A.\n\n\n  return lines.join('\\n');\n} // @internal\n\nexport function getBlockStringIndentation(lines) {\n  var commonIndent = null;\n\n  for (var i = 1; i < lines.length; i++) {\n    var line = lines[i];\n    var indent = leadingWhitespace(line);\n\n    if (indent === line.length) {\n      continue; // skip empty lines\n    }\n\n    if (commonIndent === null || indent < commonIndent) {\n      commonIndent = indent;\n\n      if (commonIndent === 0) {\n        break;\n      }\n    }\n  }\n\n  return commonIndent === null ? 0 : commonIndent;\n}\n\nfunction leadingWhitespace(str) {\n  var i = 0;\n\n  while (i < str.length && (str[i] === ' ' || str[i] === '\\t')) {\n    i++;\n  }\n\n  return i;\n}\n\nfunction isBlank(str) {\n  return leadingWhitespace(str) === str.length;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n */\n\n\nexport function printBlockString(value) {\n  var indentation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n  var preferMultipleLines = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  var isSingleLine = value.indexOf('\\n') === -1;\n  var hasLeadingSpace = value[0] === ' ' || value[0] === '\\t';\n  var hasTrailingQuote = value[value.length - 1] === '\"';\n  var printAsMultipleLines = !isSingleLine || hasTrailingQuote || preferMultipleLines;\n  var result = ''; // Format a multi-line block quote to account for leading space.\n\n  if (printAsMultipleLines && !(isSingleLine && hasLeadingSpace)) {\n    result += '\\n' + indentation;\n  }\n\n  result += indentation ? value.replace(/\\n/g, '\\n' + indentation) : value;\n\n  if (printAsMultipleLines) {\n    result += '\\n';\n  }\n\n  return '\"\"\"' + result.replace(/\"\"\"/g, '\\\\\"\"\"') + '\"\"\"';\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { visit } from './visitor';\nimport { printBlockString } from './blockString';\n/**\n * Converts an AST into a string, using one set of reasonable\n * formatting rules.\n */\n\nexport function print(ast) {\n  return visit(ast, {\n    leave: printDocASTReducer\n  });\n} // TODO: provide better type coverage in future\n\nvar printDocASTReducer = {\n  Name: function Name(node) {\n    return node.value;\n  },\n  Variable: function Variable(node) {\n    return '$' + node.name;\n  },\n  // Document\n  Document: function Document(node) {\n    return join(node.definitions, '\\n\\n') + '\\n';\n  },\n  OperationDefinition: function OperationDefinition(node) {\n    var op = node.operation;\n    var name = node.name;\n    var varDefs = wrap('(', join(node.variableDefinitions, ', '), ')');\n    var directives = join(node.directives, ' ');\n    var selectionSet = node.selectionSet; // Anonymous queries with no directives or variable definitions can use\n    // the query short form.\n\n    return !name && !directives && !varDefs && op === 'query' ? selectionSet : join([op, join([name, varDefs]), directives, selectionSet], ' ');\n  },\n  VariableDefinition: function VariableDefinition(_ref) {\n    var variable = _ref.variable,\n        type = _ref.type,\n        defaultValue = _ref.defaultValue,\n        directives = _ref.directives;\n    return variable + ': ' + type + wrap(' = ', defaultValue) + wrap(' ', join(directives, ' '));\n  },\n  SelectionSet: function SelectionSet(_ref2) {\n    var selections = _ref2.selections;\n    return block(selections);\n  },\n  Field: function Field(_ref3) {\n    var alias = _ref3.alias,\n        name = _ref3.name,\n        args = _ref3.arguments,\n        directives = _ref3.directives,\n        selectionSet = _ref3.selectionSet;\n    return join([wrap('', alias, ': ') + name + wrap('(', join(args, ', '), ')'), join(directives, ' '), selectionSet], ' ');\n  },\n  Argument: function Argument(_ref4) {\n    var name = _ref4.name,\n        value = _ref4.value;\n    return name + ': ' + value;\n  },\n  // Fragments\n  FragmentSpread: function FragmentSpread(_ref5) {\n    var name = _ref5.name,\n        directives = _ref5.directives;\n    return '...' + name + wrap(' ', join(directives, ' '));\n  },\n  InlineFragment: function InlineFragment(_ref6) {\n    var typeCondition = _ref6.typeCondition,\n        directives = _ref6.directives,\n        selectionSet = _ref6.selectionSet;\n    return join(['...', wrap('on ', typeCondition), join(directives, ' '), selectionSet], ' ');\n  },\n  FragmentDefinition: function FragmentDefinition(_ref7) {\n    var name = _ref7.name,\n        typeCondition = _ref7.typeCondition,\n        variableDefinitions = _ref7.variableDefinitions,\n        directives = _ref7.directives,\n        selectionSet = _ref7.selectionSet;\n    return (// Note: fragment variable definitions are experimental and may be changed\n      // or removed in the future.\n      \"fragment \".concat(name).concat(wrap('(', join(variableDefinitions, ', '), ')'), \" \") + \"on \".concat(typeCondition, \" \").concat(wrap('', join(directives, ' '), ' ')) + selectionSet\n    );\n  },\n  // Value\n  IntValue: function IntValue(_ref8) {\n    var value = _ref8.value;\n    return value;\n  },\n  FloatValue: function FloatValue(_ref9) {\n    var value = _ref9.value;\n    return value;\n  },\n  StringValue: function StringValue(_ref10, key) {\n    var value = _ref10.value,\n        isBlockString = _ref10.block;\n    return isBlockString ? printBlockString(value, key === 'description' ? '' : '  ') : JSON.stringify(value);\n  },\n  BooleanValue: function BooleanValue(_ref11) {\n    var value = _ref11.value;\n    return value ? 'true' : 'false';\n  },\n  NullValue: function NullValue() {\n    return 'null';\n  },\n  EnumValue: function EnumValue(_ref12) {\n    var value = _ref12.value;\n    return value;\n  },\n  ListValue: function ListValue(_ref13) {\n    var values = _ref13.values;\n    return '[' + join(values, ', ') + ']';\n  },\n  ObjectValue: function ObjectValue(_ref14) {\n    var fields = _ref14.fields;\n    return '{' + join(fields, ', ') + '}';\n  },\n  ObjectField: function ObjectField(_ref15) {\n    var name = _ref15.name,\n        value = _ref15.value;\n    return name + ': ' + value;\n  },\n  // Directive\n  Directive: function Directive(_ref16) {\n    var name = _ref16.name,\n        args = _ref16.arguments;\n    return '@' + name + wrap('(', join(args, ', '), ')');\n  },\n  // Type\n  NamedType: function NamedType(_ref17) {\n    var name = _ref17.name;\n    return name;\n  },\n  ListType: function ListType(_ref18) {\n    var type = _ref18.type;\n    return '[' + type + ']';\n  },\n  NonNullType: function NonNullType(_ref19) {\n    var type = _ref19.type;\n    return type + '!';\n  },\n  // Type System Definitions\n  SchemaDefinition: function SchemaDefinition(_ref20) {\n    var directives = _ref20.directives,\n        operationTypes = _ref20.operationTypes;\n    return join(['schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  OperationTypeDefinition: function OperationTypeDefinition(_ref21) {\n    var operation = _ref21.operation,\n        type = _ref21.type;\n    return operation + ': ' + type;\n  },\n  ScalarTypeDefinition: addDescription(function (_ref22) {\n    var name = _ref22.name,\n        directives = _ref22.directives;\n    return join(['scalar', name, join(directives, ' ')], ' ');\n  }),\n  ObjectTypeDefinition: addDescription(function (_ref23) {\n    var name = _ref23.name,\n        interfaces = _ref23.interfaces,\n        directives = _ref23.directives,\n        fields = _ref23.fields;\n    return join(['type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  }),\n  FieldDefinition: addDescription(function (_ref24) {\n    var name = _ref24.name,\n        args = _ref24.arguments,\n        type = _ref24.type,\n        directives = _ref24.directives;\n    return name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ': ' + type + wrap(' ', join(directives, ' '));\n  }),\n  InputValueDefinition: addDescription(function (_ref25) {\n    var name = _ref25.name,\n        type = _ref25.type,\n        defaultValue = _ref25.defaultValue,\n        directives = _ref25.directives;\n    return join([name + ': ' + type, wrap('= ', defaultValue), join(directives, ' ')], ' ');\n  }),\n  InterfaceTypeDefinition: addDescription(function (_ref26) {\n    var name = _ref26.name,\n        directives = _ref26.directives,\n        fields = _ref26.fields;\n    return join(['interface', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  UnionTypeDefinition: addDescription(function (_ref27) {\n    var name = _ref27.name,\n        directives = _ref27.directives,\n        types = _ref27.types;\n    return join(['union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  }),\n  EnumTypeDefinition: addDescription(function (_ref28) {\n    var name = _ref28.name,\n        directives = _ref28.directives,\n        values = _ref28.values;\n    return join(['enum', name, join(directives, ' '), block(values)], ' ');\n  }),\n  EnumValueDefinition: addDescription(function (_ref29) {\n    var name = _ref29.name,\n        directives = _ref29.directives;\n    return join([name, join(directives, ' ')], ' ');\n  }),\n  InputObjectTypeDefinition: addDescription(function (_ref30) {\n    var name = _ref30.name,\n        directives = _ref30.directives,\n        fields = _ref30.fields;\n    return join(['input', name, join(directives, ' '), block(fields)], ' ');\n  }),\n  DirectiveDefinition: addDescription(function (_ref31) {\n    var name = _ref31.name,\n        args = _ref31.arguments,\n        locations = _ref31.locations;\n    return 'directive @' + name + (hasMultilineItems(args) ? wrap('(\\n', indent(join(args, '\\n')), '\\n)') : wrap('(', join(args, ', '), ')')) + ' on ' + join(locations, ' | ');\n  }),\n  SchemaExtension: function SchemaExtension(_ref32) {\n    var directives = _ref32.directives,\n        operationTypes = _ref32.operationTypes;\n    return join(['extend schema', join(directives, ' '), block(operationTypes)], ' ');\n  },\n  ScalarTypeExtension: function ScalarTypeExtension(_ref33) {\n    var name = _ref33.name,\n        directives = _ref33.directives;\n    return join(['extend scalar', name, join(directives, ' ')], ' ');\n  },\n  ObjectTypeExtension: function ObjectTypeExtension(_ref34) {\n    var name = _ref34.name,\n        interfaces = _ref34.interfaces,\n        directives = _ref34.directives,\n        fields = _ref34.fields;\n    return join(['extend type', name, wrap('implements ', join(interfaces, ' & ')), join(directives, ' '), block(fields)], ' ');\n  },\n  InterfaceTypeExtension: function InterfaceTypeExtension(_ref35) {\n    var name = _ref35.name,\n        directives = _ref35.directives,\n        fields = _ref35.fields;\n    return join(['extend interface', name, join(directives, ' '), block(fields)], ' ');\n  },\n  UnionTypeExtension: function UnionTypeExtension(_ref36) {\n    var name = _ref36.name,\n        directives = _ref36.directives,\n        types = _ref36.types;\n    return join(['extend union', name, join(directives, ' '), types && types.length !== 0 ? '= ' + join(types, ' | ') : ''], ' ');\n  },\n  EnumTypeExtension: function EnumTypeExtension(_ref37) {\n    var name = _ref37.name,\n        directives = _ref37.directives,\n        values = _ref37.values;\n    return join(['extend enum', name, join(directives, ' '), block(values)], ' ');\n  },\n  InputObjectTypeExtension: function InputObjectTypeExtension(_ref38) {\n    var name = _ref38.name,\n        directives = _ref38.directives,\n        fields = _ref38.fields;\n    return join(['extend input', name, join(directives, ' '), block(fields)], ' ');\n  }\n};\n\nfunction addDescription(cb) {\n  return function (node) {\n    return join([node.description, cb(node)], '\\n');\n  };\n}\n/**\n * Given maybeArray, print an empty string if it is null or empty, otherwise\n * print all items together separated by separator if provided\n */\n\n\nfunction join(maybeArray, separator) {\n  return maybeArray ? maybeArray.filter(function (x) {\n    return x;\n  }).join(separator || '') : '';\n}\n/**\n * Given array, print each item on its own line, wrapped in an\n * indented \"{ }\" block.\n */\n\n\nfunction block(array) {\n  return array && array.length !== 0 ? '{\\n' + indent(join(array, '\\n')) + '\\n}' : '';\n}\n/**\n * If maybeString is not null or empty, then wrap with start and end, otherwise\n * print an empty string.\n */\n\n\nfunction wrap(start, maybeString, end) {\n  return maybeString ? start + maybeString + (end || '') : '';\n}\n\nfunction indent(maybeString) {\n  return maybeString && '  ' + maybeString.replace(/\\n/g, '\\n  ');\n}\n\nfunction isMultiline(string) {\n  return string.indexOf('\\n') !== -1;\n}\n\nfunction hasMultilineItems(maybeArray) {\n  return maybeArray && maybeArray.some(isMultiline);\n}","import Observable from 'zen-observable-ts';\nexport { default as Observable } from 'zen-observable-ts';\nimport { invariant, InvariantError } from 'ts-invariant';\nimport { __extends, __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { getOperationName } from 'apollo-utilities';\nexport { getOperationName } from 'apollo-utilities';\n\nfunction validateOperation(operation) {\n    var OPERATION_FIELDS = [\n        'query',\n        'operationName',\n        'variables',\n        'extensions',\n        'context',\n    ];\n    for (var _i = 0, _a = Object.keys(operation); _i < _a.length; _i++) {\n        var key = _a[_i];\n        if (OPERATION_FIELDS.indexOf(key) < 0) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"illegal argument: \" + key);\n        }\n    }\n    return operation;\n}\nvar LinkError = (function (_super) {\n    __extends(LinkError, _super);\n    function LinkError(message, link) {\n        var _this = _super.call(this, message) || this;\n        _this.link = link;\n        return _this;\n    }\n    return LinkError;\n}(Error));\nfunction isTerminating(link) {\n    return link.request.length <= 1;\n}\nfunction toPromise(observable) {\n    var completed = false;\n    return new Promise(function (resolve, reject) {\n        observable.subscribe({\n            next: function (data) {\n                if (completed) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"Promise Wrapper does not support multiple results from Observable\");\n                }\n                else {\n                    completed = true;\n                    resolve(data);\n                }\n            },\n            error: reject,\n        });\n    });\n}\nvar makePromise = toPromise;\nfunction fromPromise(promise) {\n    return new Observable(function (observer) {\n        promise\n            .then(function (value) {\n            observer.next(value);\n            observer.complete();\n        })\n            .catch(observer.error.bind(observer));\n    });\n}\nfunction fromError(errorValue) {\n    return new Observable(function (observer) {\n        observer.error(errorValue);\n    });\n}\nfunction transformOperation(operation) {\n    var transformedOperation = {\n        variables: operation.variables || {},\n        extensions: operation.extensions || {},\n        operationName: operation.operationName,\n        query: operation.query,\n    };\n    if (!transformedOperation.operationName) {\n        transformedOperation.operationName =\n            typeof transformedOperation.query !== 'string'\n                ? getOperationName(transformedOperation.query)\n                : '';\n    }\n    return transformedOperation;\n}\nfunction createOperation(starting, operation) {\n    var context = __assign({}, starting);\n    var setContext = function (next) {\n        if (typeof next === 'function') {\n            context = __assign({}, context, next(context));\n        }\n        else {\n            context = __assign({}, context, next);\n        }\n    };\n    var getContext = function () { return (__assign({}, context)); };\n    Object.defineProperty(operation, 'setContext', {\n        enumerable: false,\n        value: setContext,\n    });\n    Object.defineProperty(operation, 'getContext', {\n        enumerable: false,\n        value: getContext,\n    });\n    Object.defineProperty(operation, 'toKey', {\n        enumerable: false,\n        value: function () { return getKey(operation); },\n    });\n    return operation;\n}\nfunction getKey(operation) {\n    return print(operation.query) + \"|\" + JSON.stringify(operation.variables) + \"|\" + operation.operationName;\n}\n\nfunction passthrough(op, forward) {\n    return forward ? forward(op) : Observable.of();\n}\nfunction toLink(handler) {\n    return typeof handler === 'function' ? new ApolloLink(handler) : handler;\n}\nfunction empty() {\n    return new ApolloLink(function () { return Observable.of(); });\n}\nfunction from(links) {\n    if (links.length === 0)\n        return empty();\n    return links.map(toLink).reduce(function (x, y) { return x.concat(y); });\n}\nfunction split(test, left, right) {\n    var leftLink = toLink(left);\n    var rightLink = toLink(right || new ApolloLink(passthrough));\n    if (isTerminating(leftLink) && isTerminating(rightLink)) {\n        return new ApolloLink(function (operation) {\n            return test(operation)\n                ? leftLink.request(operation) || Observable.of()\n                : rightLink.request(operation) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return test(operation)\n                ? leftLink.request(operation, forward) || Observable.of()\n                : rightLink.request(operation, forward) || Observable.of();\n        });\n    }\n}\nvar concat = function (first, second) {\n    var firstLink = toLink(first);\n    if (isTerminating(firstLink)) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(new LinkError(\"You are calling concat on a terminating link, which will have no effect\", firstLink));\n        return firstLink;\n    }\n    var nextLink = toLink(second);\n    if (isTerminating(nextLink)) {\n        return new ApolloLink(function (operation) {\n            return firstLink.request(operation, function (op) { return nextLink.request(op) || Observable.of(); }) || Observable.of();\n        });\n    }\n    else {\n        return new ApolloLink(function (operation, forward) {\n            return (firstLink.request(operation, function (op) {\n                return nextLink.request(op, forward) || Observable.of();\n            }) || Observable.of());\n        });\n    }\n};\nvar ApolloLink = (function () {\n    function ApolloLink(request) {\n        if (request)\n            this.request = request;\n    }\n    ApolloLink.prototype.split = function (test, left, right) {\n        return this.concat(split(test, left, right || new ApolloLink(passthrough)));\n    };\n    ApolloLink.prototype.concat = function (next) {\n        return concat(this, next);\n    };\n    ApolloLink.prototype.request = function (operation, forward) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError('request is not implemented');\n    };\n    ApolloLink.empty = empty;\n    ApolloLink.from = from;\n    ApolloLink.split = split;\n    ApolloLink.execute = execute;\n    return ApolloLink;\n}());\nfunction execute(link, operation) {\n    return (link.request(createOperation(operation.context, transformOperation(validateOperation(operation)))) || Observable.of());\n}\n\nexport { createOperation, makePromise, toPromise, fromPromise, fromError, empty, from, split, concat, ApolloLink, execute };\n//# sourceMappingURL=bundle.esm.js.map\n","/* global window */\nimport ponyfill from './ponyfill.js';\n\nvar root;\n\nif (typeof self !== 'undefined') {\n  root = self;\n} else if (typeof window !== 'undefined') {\n  root = window;\n} else if (typeof global !== 'undefined') {\n  root = global;\n} else if (typeof module !== 'undefined') {\n  root = module;\n} else {\n  root = Function('return this')();\n}\n\nvar result = ponyfill(root);\nexport default result;\n","import { __extends, __assign, __awaiter, __generator } from 'tslib';\nimport { getOperationDefinition, isEqual, tryFunctionOrLogError, cloneDeep, mergeDeep, hasDirectives, removeClientSetsFromDocument, buildQueryFromSelectionSet, getMainDefinition, getFragmentDefinitions, createFragmentMap, mergeDeepArray, resultKeyNameFromField, argumentsObjectFromField, shouldInclude, isField, isInlineFragment, canUseWeakMap, graphQLResultHasError, removeConnectionDirectiveFromDocument, hasClientExports, getDefaultValues, getOperationName } from 'apollo-utilities';\nimport { Observable as Observable$1, execute, ApolloLink } from 'apollo-link';\nimport $$observable from 'symbol-observable';\nimport { InvariantError, invariant } from 'ts-invariant';\nimport { visit, BREAK } from 'graphql/language/visitor';\n\nvar NetworkStatus;\n(function (NetworkStatus) {\n    NetworkStatus[NetworkStatus[\"loading\"] = 1] = \"loading\";\n    NetworkStatus[NetworkStatus[\"setVariables\"] = 2] = \"setVariables\";\n    NetworkStatus[NetworkStatus[\"fetchMore\"] = 3] = \"fetchMore\";\n    NetworkStatus[NetworkStatus[\"refetch\"] = 4] = \"refetch\";\n    NetworkStatus[NetworkStatus[\"poll\"] = 6] = \"poll\";\n    NetworkStatus[NetworkStatus[\"ready\"] = 7] = \"ready\";\n    NetworkStatus[NetworkStatus[\"error\"] = 8] = \"error\";\n})(NetworkStatus || (NetworkStatus = {}));\nfunction isNetworkRequestInFlight(networkStatus) {\n    return networkStatus < 7;\n}\n\nvar Observable = (function (_super) {\n    __extends(Observable, _super);\n    function Observable() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Observable.prototype[$$observable] = function () {\n        return this;\n    };\n    Observable.prototype['@@observable'] = function () {\n        return this;\n    };\n    return Observable;\n}(Observable$1));\n\nfunction isNonEmptyArray(value) {\n    return Array.isArray(value) && value.length > 0;\n}\n\nfunction isApolloError(err) {\n    return err.hasOwnProperty('graphQLErrors');\n}\nvar generateErrorMessage = function (err) {\n    var message = '';\n    if (isNonEmptyArray(err.graphQLErrors)) {\n        err.graphQLErrors.forEach(function (graphQLError) {\n            var errorMessage = graphQLError\n                ? graphQLError.message\n                : 'Error message not found.';\n            message += \"GraphQL error: \" + errorMessage + \"\\n\";\n        });\n    }\n    if (err.networkError) {\n        message += 'Network error: ' + err.networkError.message + '\\n';\n    }\n    message = message.replace(/\\n$/, '');\n    return message;\n};\nvar ApolloError = (function (_super) {\n    __extends(ApolloError, _super);\n    function ApolloError(_a) {\n        var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError, errorMessage = _a.errorMessage, extraInfo = _a.extraInfo;\n        var _this = _super.call(this, errorMessage) || this;\n        _this.graphQLErrors = graphQLErrors || [];\n        _this.networkError = networkError || null;\n        if (!errorMessage) {\n            _this.message = generateErrorMessage(_this);\n        }\n        else {\n            _this.message = errorMessage;\n        }\n        _this.extraInfo = extraInfo;\n        _this.__proto__ = ApolloError.prototype;\n        return _this;\n    }\n    return ApolloError;\n}(Error));\n\nvar FetchType;\n(function (FetchType) {\n    FetchType[FetchType[\"normal\"] = 1] = \"normal\";\n    FetchType[FetchType[\"refetch\"] = 2] = \"refetch\";\n    FetchType[FetchType[\"poll\"] = 3] = \"poll\";\n})(FetchType || (FetchType = {}));\n\nvar hasError = function (storeValue, policy) {\n    if (policy === void 0) { policy = 'none'; }\n    return storeValue && (storeValue.networkError ||\n        (policy === 'none' && isNonEmptyArray(storeValue.graphQLErrors)));\n};\nvar ObservableQuery = (function (_super) {\n    __extends(ObservableQuery, _super);\n    function ObservableQuery(_a) {\n        var queryManager = _a.queryManager, options = _a.options, _b = _a.shouldSubscribe, shouldSubscribe = _b === void 0 ? true : _b;\n        var _this = _super.call(this, function (observer) {\n            return _this.onSubscribe(observer);\n        }) || this;\n        _this.observers = new Set();\n        _this.subscriptions = new Set();\n        _this.isTornDown = false;\n        _this.options = options;\n        _this.variables = options.variables || {};\n        _this.queryId = queryManager.generateQueryId();\n        _this.shouldSubscribe = shouldSubscribe;\n        var opDef = getOperationDefinition(options.query);\n        _this.queryName = opDef && opDef.name && opDef.name.value;\n        _this.queryManager = queryManager;\n        return _this;\n    }\n    ObservableQuery.prototype.result = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var observer = {\n                next: function (result) {\n                    resolve(result);\n                    _this.observers.delete(observer);\n                    if (!_this.observers.size) {\n                        _this.queryManager.removeQuery(_this.queryId);\n                    }\n                    setTimeout(function () {\n                        subscription.unsubscribe();\n                    }, 0);\n                },\n                error: reject,\n            };\n            var subscription = _this.subscribe(observer);\n        });\n    };\n    ObservableQuery.prototype.currentResult = function () {\n        var result = this.getCurrentResult();\n        if (result.data === undefined) {\n            result.data = {};\n        }\n        return result;\n    };\n    ObservableQuery.prototype.getCurrentResult = function () {\n        if (this.isTornDown) {\n            var lastResult = this.lastResult;\n            return {\n                data: !this.lastError && lastResult && lastResult.data || void 0,\n                error: this.lastError,\n                loading: false,\n                networkStatus: NetworkStatus.error,\n            };\n        }\n        var _a = this.queryManager.getCurrentQueryResult(this), data = _a.data, partial = _a.partial;\n        var queryStoreValue = this.queryManager.queryStore.get(this.queryId);\n        var result;\n        var fetchPolicy = this.options.fetchPolicy;\n        var isNetworkFetchPolicy = fetchPolicy === 'network-only' ||\n            fetchPolicy === 'no-cache';\n        if (queryStoreValue) {\n            var networkStatus = queryStoreValue.networkStatus;\n            if (hasError(queryStoreValue, this.options.errorPolicy)) {\n                return {\n                    data: void 0,\n                    loading: false,\n                    networkStatus: networkStatus,\n                    error: new ApolloError({\n                        graphQLErrors: queryStoreValue.graphQLErrors,\n                        networkError: queryStoreValue.networkError,\n                    }),\n                };\n            }\n            if (queryStoreValue.variables) {\n                this.options.variables = __assign({}, this.options.variables, queryStoreValue.variables);\n                this.variables = this.options.variables;\n            }\n            result = {\n                data: data,\n                loading: isNetworkRequestInFlight(networkStatus),\n                networkStatus: networkStatus,\n            };\n            if (queryStoreValue.graphQLErrors && this.options.errorPolicy === 'all') {\n                result.errors = queryStoreValue.graphQLErrors;\n            }\n        }\n        else {\n            var loading = isNetworkFetchPolicy ||\n                (partial && fetchPolicy !== 'cache-only');\n            result = {\n                data: data,\n                loading: loading,\n                networkStatus: loading ? NetworkStatus.loading : NetworkStatus.ready,\n            };\n        }\n        if (!partial) {\n            this.updateLastResult(__assign({}, result, { stale: false }));\n        }\n        return __assign({}, result, { partial: partial });\n    };\n    ObservableQuery.prototype.isDifferentFromLastResult = function (newResult) {\n        var snapshot = this.lastResultSnapshot;\n        return !(snapshot &&\n            newResult &&\n            snapshot.networkStatus === newResult.networkStatus &&\n            snapshot.stale === newResult.stale &&\n            isEqual(snapshot.data, newResult.data));\n    };\n    ObservableQuery.prototype.getLastResult = function () {\n        return this.lastResult;\n    };\n    ObservableQuery.prototype.getLastError = function () {\n        return this.lastError;\n    };\n    ObservableQuery.prototype.resetLastResults = function () {\n        delete this.lastResult;\n        delete this.lastResultSnapshot;\n        delete this.lastError;\n        this.isTornDown = false;\n    };\n    ObservableQuery.prototype.refetch = function (variables) {\n        var fetchPolicy = this.options.fetchPolicy;\n        if (fetchPolicy === 'cache-only') {\n            return Promise.reject(process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError('cache-only fetchPolicy option should not be used together with query refetch.'));\n        }\n        if (fetchPolicy !== 'no-cache' &&\n            fetchPolicy !== 'cache-and-network') {\n            fetchPolicy = 'network-only';\n        }\n        if (!isEqual(this.variables, variables)) {\n            this.variables = __assign({}, this.variables, variables);\n        }\n        if (!isEqual(this.options.variables, this.variables)) {\n            this.options.variables = __assign({}, this.options.variables, this.variables);\n        }\n        return this.queryManager.fetchQuery(this.queryId, __assign({}, this.options, { fetchPolicy: fetchPolicy }), FetchType.refetch);\n    };\n    ObservableQuery.prototype.fetchMore = function (fetchMoreOptions) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(fetchMoreOptions.updateQuery, 4) : invariant(fetchMoreOptions.updateQuery, 'updateQuery option is required. This function defines how to update the query data with the new results.');\n        var combinedOptions = __assign({}, (fetchMoreOptions.query ? fetchMoreOptions : __assign({}, this.options, fetchMoreOptions, { variables: __assign({}, this.variables, fetchMoreOptions.variables) })), { fetchPolicy: 'network-only' });\n        var qid = this.queryManager.generateQueryId();\n        return this.queryManager\n            .fetchQuery(qid, combinedOptions, FetchType.normal, this.queryId)\n            .then(function (fetchMoreResult) {\n            _this.updateQuery(function (previousResult) {\n                return fetchMoreOptions.updateQuery(previousResult, {\n                    fetchMoreResult: fetchMoreResult.data,\n                    variables: combinedOptions.variables,\n                });\n            });\n            _this.queryManager.stopQuery(qid);\n            return fetchMoreResult;\n        }, function (error) {\n            _this.queryManager.stopQuery(qid);\n            throw error;\n        });\n    };\n    ObservableQuery.prototype.subscribeToMore = function (options) {\n        var _this = this;\n        var subscription = this.queryManager\n            .startGraphQLSubscription({\n            query: options.document,\n            variables: options.variables,\n        })\n            .subscribe({\n            next: function (subscriptionData) {\n                var updateQuery = options.updateQuery;\n                if (updateQuery) {\n                    _this.updateQuery(function (previous, _a) {\n                        var variables = _a.variables;\n                        return updateQuery(previous, {\n                            subscriptionData: subscriptionData,\n                            variables: variables,\n                        });\n                    });\n                }\n            },\n            error: function (err) {\n                if (options.onError) {\n                    options.onError(err);\n                    return;\n                }\n                process.env.NODE_ENV === \"production\" || invariant.error('Unhandled GraphQL subscription error', err);\n            },\n        });\n        this.subscriptions.add(subscription);\n        return function () {\n            if (_this.subscriptions.delete(subscription)) {\n                subscription.unsubscribe();\n            }\n        };\n    };\n    ObservableQuery.prototype.setOptions = function (opts) {\n        var oldFetchPolicy = this.options.fetchPolicy;\n        this.options = __assign({}, this.options, opts);\n        if (opts.pollInterval) {\n            this.startPolling(opts.pollInterval);\n        }\n        else if (opts.pollInterval === 0) {\n            this.stopPolling();\n        }\n        var fetchPolicy = opts.fetchPolicy;\n        return this.setVariables(this.options.variables, oldFetchPolicy !== fetchPolicy && (oldFetchPolicy === 'cache-only' ||\n            oldFetchPolicy === 'standby' ||\n            fetchPolicy === 'network-only'), opts.fetchResults);\n    };\n    ObservableQuery.prototype.setVariables = function (variables, tryFetch, fetchResults) {\n        if (tryFetch === void 0) { tryFetch = false; }\n        if (fetchResults === void 0) { fetchResults = true; }\n        this.isTornDown = false;\n        variables = variables || this.variables;\n        if (!tryFetch && isEqual(variables, this.variables)) {\n            return this.observers.size && fetchResults\n                ? this.result()\n                : Promise.resolve();\n        }\n        this.variables = this.options.variables = variables;\n        if (!this.observers.size) {\n            return Promise.resolve();\n        }\n        return this.queryManager.fetchQuery(this.queryId, this.options);\n    };\n    ObservableQuery.prototype.updateQuery = function (mapFn) {\n        var queryManager = this.queryManager;\n        var _a = queryManager.getQueryWithPreviousResult(this.queryId), previousResult = _a.previousResult, variables = _a.variables, document = _a.document;\n        var newResult = tryFunctionOrLogError(function () {\n            return mapFn(previousResult, { variables: variables });\n        });\n        if (newResult) {\n            queryManager.dataStore.markUpdateQueryResult(document, variables, newResult);\n            queryManager.broadcastQueries();\n        }\n    };\n    ObservableQuery.prototype.stopPolling = function () {\n        this.queryManager.stopPollingQuery(this.queryId);\n        this.options.pollInterval = undefined;\n    };\n    ObservableQuery.prototype.startPolling = function (pollInterval) {\n        assertNotCacheFirstOrOnly(this);\n        this.options.pollInterval = pollInterval;\n        this.queryManager.startPollingQuery(this.options, this.queryId);\n    };\n    ObservableQuery.prototype.updateLastResult = function (newResult) {\n        var previousResult = this.lastResult;\n        this.lastResult = newResult;\n        this.lastResultSnapshot = this.queryManager.assumeImmutableResults\n            ? newResult\n            : cloneDeep(newResult);\n        return previousResult;\n    };\n    ObservableQuery.prototype.onSubscribe = function (observer) {\n        var _this = this;\n        try {\n            var subObserver = observer._subscription._observer;\n            if (subObserver && !subObserver.error) {\n                subObserver.error = defaultSubscriptionObserverErrorCallback;\n            }\n        }\n        catch (_a) { }\n        var first = !this.observers.size;\n        this.observers.add(observer);\n        if (observer.next && this.lastResult)\n            observer.next(this.lastResult);\n        if (observer.error && this.lastError)\n            observer.error(this.lastError);\n        if (first) {\n            this.setUpQuery();\n        }\n        return function () {\n            if (_this.observers.delete(observer) && !_this.observers.size) {\n                _this.tearDownQuery();\n            }\n        };\n    };\n    ObservableQuery.prototype.setUpQuery = function () {\n        var _this = this;\n        var _a = this, queryManager = _a.queryManager, queryId = _a.queryId;\n        if (this.shouldSubscribe) {\n            queryManager.addObservableQuery(queryId, this);\n        }\n        if (this.options.pollInterval) {\n            assertNotCacheFirstOrOnly(this);\n            queryManager.startPollingQuery(this.options, queryId);\n        }\n        var onError = function (error) {\n            iterateObserversSafely(_this.observers, 'error', _this.lastError = error);\n        };\n        queryManager.observeQuery(queryId, this.options, {\n            next: function (result) {\n                if (_this.lastError || _this.isDifferentFromLastResult(result)) {\n                    var previousResult_1 = _this.updateLastResult(result);\n                    var _a = _this.options, query_1 = _a.query, variables = _a.variables, fetchPolicy_1 = _a.fetchPolicy;\n                    if (queryManager.transform(query_1).hasClientExports) {\n                        queryManager.getLocalState().addExportedVariables(query_1, variables).then(function (variables) {\n                            var previousVariables = _this.variables;\n                            _this.variables = _this.options.variables = variables;\n                            if (!result.loading &&\n                                previousResult_1 &&\n                                fetchPolicy_1 !== 'cache-only' &&\n                                queryManager.transform(query_1).serverQuery &&\n                                !isEqual(previousVariables, variables)) {\n                                _this.refetch();\n                            }\n                            else {\n                                iterateObserversSafely(_this.observers, 'next', result);\n                            }\n                        });\n                    }\n                    else {\n                        iterateObserversSafely(_this.observers, 'next', result);\n                    }\n                }\n            },\n            error: onError,\n        }).catch(onError);\n    };\n    ObservableQuery.prototype.tearDownQuery = function () {\n        var queryManager = this.queryManager;\n        this.isTornDown = true;\n        queryManager.stopPollingQuery(this.queryId);\n        this.subscriptions.forEach(function (sub) { return sub.unsubscribe(); });\n        this.subscriptions.clear();\n        queryManager.removeObservableQuery(this.queryId);\n        queryManager.stopQuery(this.queryId);\n        this.observers.clear();\n    };\n    return ObservableQuery;\n}(Observable));\nfunction defaultSubscriptionObserverErrorCallback(error) {\n    process.env.NODE_ENV === \"production\" || invariant.error('Unhandled error', error.message, error.stack);\n}\nfunction iterateObserversSafely(observers, method, argument) {\n    var observersWithMethod = [];\n    observers.forEach(function (obs) { return obs[method] && observersWithMethod.push(obs); });\n    observersWithMethod.forEach(function (obs) { return obs[method](argument); });\n}\nfunction assertNotCacheFirstOrOnly(obsQuery) {\n    var fetchPolicy = obsQuery.options.fetchPolicy;\n    process.env.NODE_ENV === \"production\" ? invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 5) : invariant(fetchPolicy !== 'cache-first' && fetchPolicy !== 'cache-only', 'Queries that specify the cache-first and cache-only fetchPolicies cannot also be polling queries.');\n}\n\nvar MutationStore = (function () {\n    function MutationStore() {\n        this.store = {};\n    }\n    MutationStore.prototype.getStore = function () {\n        return this.store;\n    };\n    MutationStore.prototype.get = function (mutationId) {\n        return this.store[mutationId];\n    };\n    MutationStore.prototype.initMutation = function (mutationId, mutation, variables) {\n        this.store[mutationId] = {\n            mutation: mutation,\n            variables: variables || {},\n            loading: true,\n            error: null,\n        };\n    };\n    MutationStore.prototype.markMutationError = function (mutationId, error) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = error;\n        }\n    };\n    MutationStore.prototype.markMutationResult = function (mutationId) {\n        var mutation = this.store[mutationId];\n        if (mutation) {\n            mutation.loading = false;\n            mutation.error = null;\n        }\n    };\n    MutationStore.prototype.reset = function () {\n        this.store = {};\n    };\n    return MutationStore;\n}());\n\nvar QueryStore = (function () {\n    function QueryStore() {\n        this.store = {};\n    }\n    QueryStore.prototype.getStore = function () {\n        return this.store;\n    };\n    QueryStore.prototype.get = function (queryId) {\n        return this.store[queryId];\n    };\n    QueryStore.prototype.initQuery = function (query) {\n        var previousQuery = this.store[query.queryId];\n        process.env.NODE_ENV === \"production\" ? invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 19) : invariant(!previousQuery ||\n            previousQuery.document === query.document ||\n            isEqual(previousQuery.document, query.document), 'Internal Error: may not update existing query string in store');\n        var isSetVariables = false;\n        var previousVariables = null;\n        if (query.storePreviousVariables &&\n            previousQuery &&\n            previousQuery.networkStatus !== NetworkStatus.loading) {\n            if (!isEqual(previousQuery.variables, query.variables)) {\n                isSetVariables = true;\n                previousVariables = previousQuery.variables;\n            }\n        }\n        var networkStatus;\n        if (isSetVariables) {\n            networkStatus = NetworkStatus.setVariables;\n        }\n        else if (query.isPoll) {\n            networkStatus = NetworkStatus.poll;\n        }\n        else if (query.isRefetch) {\n            networkStatus = NetworkStatus.refetch;\n        }\n        else {\n            networkStatus = NetworkStatus.loading;\n        }\n        var graphQLErrors = [];\n        if (previousQuery && previousQuery.graphQLErrors) {\n            graphQLErrors = previousQuery.graphQLErrors;\n        }\n        this.store[query.queryId] = {\n            document: query.document,\n            variables: query.variables,\n            previousVariables: previousVariables,\n            networkError: null,\n            graphQLErrors: graphQLErrors,\n            networkStatus: networkStatus,\n            metadata: query.metadata,\n        };\n        if (typeof query.fetchMoreForQueryId === 'string' &&\n            this.store[query.fetchMoreForQueryId]) {\n            this.store[query.fetchMoreForQueryId].networkStatus =\n                NetworkStatus.fetchMore;\n        }\n    };\n    QueryStore.prototype.markQueryResult = function (queryId, result, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = null;\n        this.store[queryId].graphQLErrors = isNonEmptyArray(result.errors) ? result.errors : [];\n        this.store[queryId].previousVariables = null;\n        this.store[queryId].networkStatus = NetworkStatus.ready;\n        if (typeof fetchMoreForQueryId === 'string' &&\n            this.store[fetchMoreForQueryId]) {\n            this.store[fetchMoreForQueryId].networkStatus = NetworkStatus.ready;\n        }\n    };\n    QueryStore.prototype.markQueryError = function (queryId, error, fetchMoreForQueryId) {\n        if (!this.store || !this.store[queryId])\n            return;\n        this.store[queryId].networkError = error;\n        this.store[queryId].networkStatus = NetworkStatus.error;\n        if (typeof fetchMoreForQueryId === 'string') {\n            this.markQueryResultClient(fetchMoreForQueryId, true);\n        }\n    };\n    QueryStore.prototype.markQueryResultClient = function (queryId, complete) {\n        var storeValue = this.store && this.store[queryId];\n        if (storeValue) {\n            storeValue.networkError = null;\n            storeValue.previousVariables = null;\n            if (complete) {\n                storeValue.networkStatus = NetworkStatus.ready;\n            }\n        }\n    };\n    QueryStore.prototype.stopQuery = function (queryId) {\n        delete this.store[queryId];\n    };\n    QueryStore.prototype.reset = function (observableQueryIds) {\n        var _this = this;\n        Object.keys(this.store).forEach(function (queryId) {\n            if (observableQueryIds.indexOf(queryId) < 0) {\n                _this.stopQuery(queryId);\n            }\n            else {\n                _this.store[queryId].networkStatus = NetworkStatus.loading;\n            }\n        });\n    };\n    return QueryStore;\n}());\n\nfunction capitalizeFirstLetter(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nvar LocalState = (function () {\n    function LocalState(_a) {\n        var cache = _a.cache, client = _a.client, resolvers = _a.resolvers, fragmentMatcher = _a.fragmentMatcher;\n        this.cache = cache;\n        if (client) {\n            this.client = client;\n        }\n        if (resolvers) {\n            this.addResolvers(resolvers);\n        }\n        if (fragmentMatcher) {\n            this.setFragmentMatcher(fragmentMatcher);\n        }\n    }\n    LocalState.prototype.addResolvers = function (resolvers) {\n        var _this = this;\n        this.resolvers = this.resolvers || {};\n        if (Array.isArray(resolvers)) {\n            resolvers.forEach(function (resolverGroup) {\n                _this.resolvers = mergeDeep(_this.resolvers, resolverGroup);\n            });\n        }\n        else {\n            this.resolvers = mergeDeep(this.resolvers, resolvers);\n        }\n    };\n    LocalState.prototype.setResolvers = function (resolvers) {\n        this.resolvers = {};\n        this.addResolvers(resolvers);\n    };\n    LocalState.prototype.getResolvers = function () {\n        return this.resolvers || {};\n    };\n    LocalState.prototype.runResolvers = function (_a) {\n        var document = _a.document, remoteResult = _a.remoteResult, context = _a.context, variables = _a.variables, _b = _a.onlyRunForcedResolvers, onlyRunForcedResolvers = _b === void 0 ? false : _b;\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_c) {\n                if (document) {\n                    return [2, this.resolveDocument(document, remoteResult.data, context, variables, this.fragmentMatcher, onlyRunForcedResolvers).then(function (localResult) { return (__assign({}, remoteResult, { data: localResult.result })); })];\n                }\n                return [2, remoteResult];\n            });\n        });\n    };\n    LocalState.prototype.setFragmentMatcher = function (fragmentMatcher) {\n        this.fragmentMatcher = fragmentMatcher;\n    };\n    LocalState.prototype.getFragmentMatcher = function () {\n        return this.fragmentMatcher;\n    };\n    LocalState.prototype.clientQuery = function (document) {\n        if (hasDirectives(['client'], document)) {\n            if (this.resolvers) {\n                return document;\n            }\n            process.env.NODE_ENV === \"production\" || invariant.warn('Found @client directives in a query but no ApolloClient resolvers ' +\n                'were specified. This means ApolloClient local resolver handling ' +\n                'has been disabled, and @client directives will be passed through ' +\n                'to your link chain.');\n        }\n        return null;\n    };\n    LocalState.prototype.serverQuery = function (document) {\n        return this.resolvers ? removeClientSetsFromDocument(document) : document;\n    };\n    LocalState.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var cache = this.cache;\n        var newContext = __assign({}, context, { cache: cache, getCacheKey: function (obj) {\n                if (cache.config) {\n                    return cache.config.dataIdFromObject(obj);\n                }\n                else {\n                    process.env.NODE_ENV === \"production\" ? invariant(false, 17) : invariant(false, 'To use context.getCacheKey, you need to use a cache that has ' +\n                        'a configurable dataIdFromObject, like apollo-cache-inmemory.');\n                }\n            } });\n        return newContext;\n    };\n    LocalState.prototype.addExportedVariables = function (document, variables, context) {\n        if (variables === void 0) { variables = {}; }\n        if (context === void 0) { context = {}; }\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                if (document) {\n                    return [2, this.resolveDocument(document, this.buildRootValueFromCache(document, variables) || {}, this.prepareContext(context), variables).then(function (data) { return (__assign({}, variables, data.exportedVariables)); })];\n                }\n                return [2, __assign({}, variables)];\n            });\n        });\n    };\n    LocalState.prototype.shouldForceResolvers = function (document) {\n        var forceResolvers = false;\n        visit(document, {\n            Directive: {\n                enter: function (node) {\n                    if (node.name.value === 'client' && node.arguments) {\n                        forceResolvers = node.arguments.some(function (arg) {\n                            return arg.name.value === 'always' &&\n                                arg.value.kind === 'BooleanValue' &&\n                                arg.value.value === true;\n                        });\n                        if (forceResolvers) {\n                            return BREAK;\n                        }\n                    }\n                },\n            },\n        });\n        return forceResolvers;\n    };\n    LocalState.prototype.buildRootValueFromCache = function (document, variables) {\n        return this.cache.diff({\n            query: buildQueryFromSelectionSet(document),\n            variables: variables,\n            returnPartialData: true,\n            optimistic: false,\n        }).result;\n    };\n    LocalState.prototype.resolveDocument = function (document, rootValue, context, variables, fragmentMatcher, onlyRunForcedResolvers) {\n        if (context === void 0) { context = {}; }\n        if (variables === void 0) { variables = {}; }\n        if (fragmentMatcher === void 0) { fragmentMatcher = function () { return true; }; }\n        if (onlyRunForcedResolvers === void 0) { onlyRunForcedResolvers = false; }\n        return __awaiter(this, void 0, void 0, function () {\n            var mainDefinition, fragments, fragmentMap, definitionOperation, defaultOperationType, _a, cache, client, execContext;\n            return __generator(this, function (_b) {\n                mainDefinition = getMainDefinition(document);\n                fragments = getFragmentDefinitions(document);\n                fragmentMap = createFragmentMap(fragments);\n                definitionOperation = mainDefinition\n                    .operation;\n                defaultOperationType = definitionOperation\n                    ? capitalizeFirstLetter(definitionOperation)\n                    : 'Query';\n                _a = this, cache = _a.cache, client = _a.client;\n                execContext = {\n                    fragmentMap: fragmentMap,\n                    context: __assign({}, context, { cache: cache,\n                        client: client }),\n                    variables: variables,\n                    fragmentMatcher: fragmentMatcher,\n                    defaultOperationType: defaultOperationType,\n                    exportedVariables: {},\n                    onlyRunForcedResolvers: onlyRunForcedResolvers,\n                };\n                return [2, this.resolveSelectionSet(mainDefinition.selectionSet, rootValue, execContext).then(function (result) { return ({\n                        result: result,\n                        exportedVariables: execContext.exportedVariables,\n                    }); })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSelectionSet = function (selectionSet, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var fragmentMap, context, variables, resultsToMerge, execute;\n            var _this = this;\n            return __generator(this, function (_a) {\n                fragmentMap = execContext.fragmentMap, context = execContext.context, variables = execContext.variables;\n                resultsToMerge = [rootValue];\n                execute = function (selection) { return __awaiter(_this, void 0, void 0, function () {\n                    var fragment, typeCondition;\n                    return __generator(this, function (_a) {\n                        if (!shouldInclude(selection, variables)) {\n                            return [2];\n                        }\n                        if (isField(selection)) {\n                            return [2, this.resolveField(selection, rootValue, execContext).then(function (fieldResult) {\n                                    var _a;\n                                    if (typeof fieldResult !== 'undefined') {\n                                        resultsToMerge.push((_a = {},\n                                            _a[resultKeyNameFromField(selection)] = fieldResult,\n                                            _a));\n                                    }\n                                })];\n                        }\n                        if (isInlineFragment(selection)) {\n                            fragment = selection;\n                        }\n                        else {\n                            fragment = fragmentMap[selection.name.value];\n                            process.env.NODE_ENV === \"production\" ? invariant(fragment, 18) : invariant(fragment, \"No fragment named \" + selection.name.value);\n                        }\n                        if (fragment && fragment.typeCondition) {\n                            typeCondition = fragment.typeCondition.name.value;\n                            if (execContext.fragmentMatcher(rootValue, typeCondition, context)) {\n                                return [2, this.resolveSelectionSet(fragment.selectionSet, rootValue, execContext).then(function (fragmentResult) {\n                                        resultsToMerge.push(fragmentResult);\n                                    })];\n                            }\n                        }\n                        return [2];\n                    });\n                }); };\n                return [2, Promise.all(selectionSet.selections.map(execute)).then(function () {\n                        return mergeDeepArray(resultsToMerge);\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveField = function (field, rootValue, execContext) {\n        return __awaiter(this, void 0, void 0, function () {\n            var variables, fieldName, aliasedFieldName, aliasUsed, defaultResult, resultPromise, resolverType, resolverMap, resolve;\n            var _this = this;\n            return __generator(this, function (_a) {\n                variables = execContext.variables;\n                fieldName = field.name.value;\n                aliasedFieldName = resultKeyNameFromField(field);\n                aliasUsed = fieldName !== aliasedFieldName;\n                defaultResult = rootValue[aliasedFieldName] || rootValue[fieldName];\n                resultPromise = Promise.resolve(defaultResult);\n                if (!execContext.onlyRunForcedResolvers ||\n                    this.shouldForceResolvers(field)) {\n                    resolverType = rootValue.__typename || execContext.defaultOperationType;\n                    resolverMap = this.resolvers && this.resolvers[resolverType];\n                    if (resolverMap) {\n                        resolve = resolverMap[aliasUsed ? fieldName : aliasedFieldName];\n                        if (resolve) {\n                            resultPromise = Promise.resolve(resolve(rootValue, argumentsObjectFromField(field, variables), execContext.context, { field: field }));\n                        }\n                    }\n                }\n                return [2, resultPromise.then(function (result) {\n                        if (result === void 0) { result = defaultResult; }\n                        if (field.directives) {\n                            field.directives.forEach(function (directive) {\n                                if (directive.name.value === 'export' && directive.arguments) {\n                                    directive.arguments.forEach(function (arg) {\n                                        if (arg.name.value === 'as' && arg.value.kind === 'StringValue') {\n                                            execContext.exportedVariables[arg.value.value] = result;\n                                        }\n                                    });\n                                }\n                            });\n                        }\n                        if (!field.selectionSet) {\n                            return result;\n                        }\n                        if (result == null) {\n                            return result;\n                        }\n                        if (Array.isArray(result)) {\n                            return _this.resolveSubSelectedArray(field, result, execContext);\n                        }\n                        if (field.selectionSet) {\n                            return _this.resolveSelectionSet(field.selectionSet, result, execContext);\n                        }\n                    })];\n            });\n        });\n    };\n    LocalState.prototype.resolveSubSelectedArray = function (field, result, execContext) {\n        var _this = this;\n        return Promise.all(result.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return _this.resolveSubSelectedArray(field, item, execContext);\n            }\n            if (field.selectionSet) {\n                return _this.resolveSelectionSet(field.selectionSet, item, execContext);\n            }\n        }));\n    };\n    return LocalState;\n}());\n\nfunction multiplex(inner) {\n    var observers = new Set();\n    var sub = null;\n    return new Observable(function (observer) {\n        observers.add(observer);\n        sub = sub || inner.subscribe({\n            next: function (value) {\n                observers.forEach(function (obs) { return obs.next && obs.next(value); });\n            },\n            error: function (error) {\n                observers.forEach(function (obs) { return obs.error && obs.error(error); });\n            },\n            complete: function () {\n                observers.forEach(function (obs) { return obs.complete && obs.complete(); });\n            },\n        });\n        return function () {\n            if (observers.delete(observer) && !observers.size && sub) {\n                sub.unsubscribe();\n                sub = null;\n            }\n        };\n    });\n}\nfunction asyncMap(observable, mapFn) {\n    return new Observable(function (observer) {\n        var next = observer.next, error = observer.error, complete = observer.complete;\n        var activeNextCount = 0;\n        var completed = false;\n        var handler = {\n            next: function (value) {\n                ++activeNextCount;\n                new Promise(function (resolve) {\n                    resolve(mapFn(value));\n                }).then(function (result) {\n                    --activeNextCount;\n                    next && next.call(observer, result);\n                    completed && handler.complete();\n                }, function (e) {\n                    --activeNextCount;\n                    error && error.call(observer, e);\n                });\n            },\n            error: function (e) {\n                error && error.call(observer, e);\n            },\n            complete: function () {\n                completed = true;\n                if (!activeNextCount) {\n                    complete && complete.call(observer);\n                }\n            },\n        };\n        var sub = observable.subscribe(handler);\n        return function () { return sub.unsubscribe(); };\n    });\n}\n\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar QueryManager = (function () {\n    function QueryManager(_a) {\n        var link = _a.link, _b = _a.queryDeduplication, queryDeduplication = _b === void 0 ? false : _b, store = _a.store, _c = _a.onBroadcast, onBroadcast = _c === void 0 ? function () { return undefined; } : _c, _d = _a.ssrMode, ssrMode = _d === void 0 ? false : _d, _e = _a.clientAwareness, clientAwareness = _e === void 0 ? {} : _e, localState = _a.localState, assumeImmutableResults = _a.assumeImmutableResults;\n        this.mutationStore = new MutationStore();\n        this.queryStore = new QueryStore();\n        this.clientAwareness = {};\n        this.idCounter = 1;\n        this.queries = new Map();\n        this.fetchQueryRejectFns = new Map();\n        this.transformCache = new (canUseWeakMap ? WeakMap : Map)();\n        this.inFlightLinkObservables = new Map();\n        this.pollingInfoByQueryId = new Map();\n        this.link = link;\n        this.queryDeduplication = queryDeduplication;\n        this.dataStore = store;\n        this.onBroadcast = onBroadcast;\n        this.clientAwareness = clientAwareness;\n        this.localState = localState || new LocalState({ cache: store.getCache() });\n        this.ssrMode = ssrMode;\n        this.assumeImmutableResults = !!assumeImmutableResults;\n    }\n    QueryManager.prototype.stop = function () {\n        var _this = this;\n        this.queries.forEach(function (_info, queryId) {\n            _this.stopQueryNoBroadcast(queryId);\n        });\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(6) : new InvariantError('QueryManager stopped while query was in flight'));\n        });\n    };\n    QueryManager.prototype.mutate = function (_a) {\n        var mutation = _a.mutation, variables = _a.variables, optimisticResponse = _a.optimisticResponse, updateQueriesByName = _a.updateQueries, _b = _a.refetchQueries, refetchQueries = _b === void 0 ? [] : _b, _c = _a.awaitRefetchQueries, awaitRefetchQueries = _c === void 0 ? false : _c, updateWithProxyFn = _a.update, _d = _a.errorPolicy, errorPolicy = _d === void 0 ? 'none' : _d, fetchPolicy = _a.fetchPolicy, _e = _a.context, context = _e === void 0 ? {} : _e;\n        return __awaiter(this, void 0, void 0, function () {\n            var mutationId, generateUpdateQueriesInfo, self;\n            var _this = this;\n            return __generator(this, function (_f) {\n                switch (_f.label) {\n                    case 0:\n                        process.env.NODE_ENV === \"production\" ? invariant(mutation, 7) : invariant(mutation, 'mutation option is required. You must specify your GraphQL document in the mutation option.');\n                        process.env.NODE_ENV === \"production\" ? invariant(!fetchPolicy || fetchPolicy === 'no-cache', 8) : invariant(!fetchPolicy || fetchPolicy === 'no-cache', \"fetchPolicy for mutations currently only supports the 'no-cache' policy\");\n                        mutationId = this.generateQueryId();\n                        mutation = this.transform(mutation).document;\n                        this.setQuery(mutationId, function () { return ({ document: mutation }); });\n                        variables = this.getVariables(mutation, variables);\n                        if (!this.transform(mutation).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(mutation, variables, context)];\n                    case 1:\n                        variables = _f.sent();\n                        _f.label = 2;\n                    case 2:\n                        generateUpdateQueriesInfo = function () {\n                            var ret = {};\n                            if (updateQueriesByName) {\n                                _this.queries.forEach(function (_a, queryId) {\n                                    var observableQuery = _a.observableQuery;\n                                    if (observableQuery) {\n                                        var queryName = observableQuery.queryName;\n                                        if (queryName &&\n                                            hasOwnProperty.call(updateQueriesByName, queryName)) {\n                                            ret[queryId] = {\n                                                updater: updateQueriesByName[queryName],\n                                                query: _this.queryStore.get(queryId),\n                                            };\n                                        }\n                                    }\n                                });\n                            }\n                            return ret;\n                        };\n                        this.mutationStore.initMutation(mutationId, mutation, variables);\n                        this.dataStore.markMutationInit({\n                            mutationId: mutationId,\n                            document: mutation,\n                            variables: variables,\n                            updateQueries: generateUpdateQueriesInfo(),\n                            update: updateWithProxyFn,\n                            optimisticResponse: optimisticResponse,\n                        });\n                        this.broadcastQueries();\n                        self = this;\n                        return [2, new Promise(function (resolve, reject) {\n                                var storeResult;\n                                var error;\n                                self.getObservableFromLink(mutation, __assign({}, context, { optimisticResponse: optimisticResponse }), variables, false).subscribe({\n                                    next: function (result) {\n                                        if (graphQLResultHasError(result) && errorPolicy === 'none') {\n                                            error = new ApolloError({\n                                                graphQLErrors: result.errors,\n                                            });\n                                            return;\n                                        }\n                                        self.mutationStore.markMutationResult(mutationId);\n                                        if (fetchPolicy !== 'no-cache') {\n                                            self.dataStore.markMutationResult({\n                                                mutationId: mutationId,\n                                                result: result,\n                                                document: mutation,\n                                                variables: variables,\n                                                updateQueries: generateUpdateQueriesInfo(),\n                                                update: updateWithProxyFn,\n                                            });\n                                        }\n                                        storeResult = result;\n                                    },\n                                    error: function (err) {\n                                        self.mutationStore.markMutationError(mutationId, err);\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        self.setQuery(mutationId, function () { return ({ document: null }); });\n                                        reject(new ApolloError({\n                                            networkError: err,\n                                        }));\n                                    },\n                                    complete: function () {\n                                        if (error) {\n                                            self.mutationStore.markMutationError(mutationId, error);\n                                        }\n                                        self.dataStore.markMutationComplete({\n                                            mutationId: mutationId,\n                                            optimisticResponse: optimisticResponse,\n                                        });\n                                        self.broadcastQueries();\n                                        if (error) {\n                                            reject(error);\n                                            return;\n                                        }\n                                        if (typeof refetchQueries === 'function') {\n                                            refetchQueries = refetchQueries(storeResult);\n                                        }\n                                        var refetchQueryPromises = [];\n                                        if (isNonEmptyArray(refetchQueries)) {\n                                            refetchQueries.forEach(function (refetchQuery) {\n                                                if (typeof refetchQuery === 'string') {\n                                                    self.queries.forEach(function (_a) {\n                                                        var observableQuery = _a.observableQuery;\n                                                        if (observableQuery &&\n                                                            observableQuery.queryName === refetchQuery) {\n                                                            refetchQueryPromises.push(observableQuery.refetch());\n                                                        }\n                                                    });\n                                                }\n                                                else {\n                                                    var queryOptions = {\n                                                        query: refetchQuery.query,\n                                                        variables: refetchQuery.variables,\n                                                        fetchPolicy: 'network-only',\n                                                    };\n                                                    if (refetchQuery.context) {\n                                                        queryOptions.context = refetchQuery.context;\n                                                    }\n                                                    refetchQueryPromises.push(self.query(queryOptions));\n                                                }\n                                            });\n                                        }\n                                        Promise.all(awaitRefetchQueries ? refetchQueryPromises : []).then(function () {\n                                            self.setQuery(mutationId, function () { return ({ document: null }); });\n                                            if (errorPolicy === 'ignore' &&\n                                                storeResult &&\n                                                graphQLResultHasError(storeResult)) {\n                                                delete storeResult.errors;\n                                            }\n                                            resolve(storeResult);\n                                        });\n                                    },\n                                });\n                            })];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.fetchQuery = function (queryId, options, fetchType, fetchMoreForQueryId) {\n        return __awaiter(this, void 0, void 0, function () {\n            var _a, metadata, _b, fetchPolicy, _c, context, query, variables, storeResult, isNetworkOnly, needToFetch, _d, complete, result, shouldFetch, requestId, cancel, networkResult;\n            var _this = this;\n            return __generator(this, function (_e) {\n                switch (_e.label) {\n                    case 0:\n                        _a = options.metadata, metadata = _a === void 0 ? null : _a, _b = options.fetchPolicy, fetchPolicy = _b === void 0 ? 'cache-first' : _b, _c = options.context, context = _c === void 0 ? {} : _c;\n                        query = this.transform(options.query).document;\n                        variables = this.getVariables(query, options.variables);\n                        if (!this.transform(query).hasClientExports) return [3, 2];\n                        return [4, this.localState.addExportedVariables(query, variables, context)];\n                    case 1:\n                        variables = _e.sent();\n                        _e.label = 2;\n                    case 2:\n                        options = __assign({}, options, { variables: variables });\n                        isNetworkOnly = fetchPolicy === 'network-only' || fetchPolicy === 'no-cache';\n                        needToFetch = isNetworkOnly;\n                        if (!isNetworkOnly) {\n                            _d = this.dataStore.getCache().diff({\n                                query: query,\n                                variables: variables,\n                                returnPartialData: true,\n                                optimistic: false,\n                            }), complete = _d.complete, result = _d.result;\n                            needToFetch = !complete || fetchPolicy === 'cache-and-network';\n                            storeResult = result;\n                        }\n                        shouldFetch = needToFetch && fetchPolicy !== 'cache-only' && fetchPolicy !== 'standby';\n                        if (hasDirectives(['live'], query))\n                            shouldFetch = true;\n                        requestId = this.idCounter++;\n                        cancel = fetchPolicy !== 'no-cache'\n                            ? this.updateQueryWatch(queryId, query, options)\n                            : undefined;\n                        this.setQuery(queryId, function () { return ({\n                            document: query,\n                            lastRequestId: requestId,\n                            invalidated: true,\n                            cancel: cancel,\n                        }); });\n                        this.invalidate(fetchMoreForQueryId);\n                        this.queryStore.initQuery({\n                            queryId: queryId,\n                            document: query,\n                            storePreviousVariables: shouldFetch,\n                            variables: variables,\n                            isPoll: fetchType === FetchType.poll,\n                            isRefetch: fetchType === FetchType.refetch,\n                            metadata: metadata,\n                            fetchMoreForQueryId: fetchMoreForQueryId,\n                        });\n                        this.broadcastQueries();\n                        if (shouldFetch) {\n                            networkResult = this.fetchRequest({\n                                requestId: requestId,\n                                queryId: queryId,\n                                document: query,\n                                options: options,\n                                fetchMoreForQueryId: fetchMoreForQueryId,\n                            }).catch(function (error) {\n                                if (isApolloError(error)) {\n                                    throw error;\n                                }\n                                else {\n                                    if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                                        _this.queryStore.markQueryError(queryId, error, fetchMoreForQueryId);\n                                        _this.invalidate(queryId);\n                                        _this.invalidate(fetchMoreForQueryId);\n                                        _this.broadcastQueries();\n                                    }\n                                    throw new ApolloError({ networkError: error });\n                                }\n                            });\n                            if (fetchPolicy !== 'cache-and-network') {\n                                return [2, networkResult];\n                            }\n                            networkResult.catch(function () { });\n                        }\n                        this.queryStore.markQueryResultClient(queryId, !shouldFetch);\n                        this.invalidate(queryId);\n                        this.invalidate(fetchMoreForQueryId);\n                        if (this.transform(query).hasForcedResolvers) {\n                            return [2, this.localState.runResolvers({\n                                    document: query,\n                                    remoteResult: { data: storeResult },\n                                    context: context,\n                                    variables: variables,\n                                    onlyRunForcedResolvers: true,\n                                }).then(function (result) {\n                                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                                    _this.broadcastQueries();\n                                    return result;\n                                })];\n                        }\n                        this.broadcastQueries();\n                        return [2, { data: storeResult }];\n                }\n            });\n        });\n    };\n    QueryManager.prototype.markQueryResult = function (queryId, result, _a, fetchMoreForQueryId) {\n        var fetchPolicy = _a.fetchPolicy, variables = _a.variables, errorPolicy = _a.errorPolicy;\n        if (fetchPolicy === 'no-cache') {\n            this.setQuery(queryId, function () { return ({\n                newData: { result: result.data, complete: true },\n            }); });\n        }\n        else {\n            this.dataStore.markQueryResult(result, this.getQuery(queryId).document, variables, fetchMoreForQueryId, errorPolicy === 'ignore' || errorPolicy === 'all');\n        }\n    };\n    QueryManager.prototype.queryListenerForObserver = function (queryId, options, observer) {\n        var _this = this;\n        function invoke(method, argument) {\n            if (observer[method]) {\n                try {\n                    observer[method](argument);\n                }\n                catch (e) {\n                    process.env.NODE_ENV === \"production\" || invariant.error(e);\n                }\n            }\n            else if (method === 'error') {\n                process.env.NODE_ENV === \"production\" || invariant.error(argument);\n            }\n        }\n        return function (queryStoreValue, newData) {\n            _this.invalidate(queryId, false);\n            if (!queryStoreValue)\n                return;\n            var _a = _this.getQuery(queryId), observableQuery = _a.observableQuery, document = _a.document;\n            var fetchPolicy = observableQuery\n                ? observableQuery.options.fetchPolicy\n                : options.fetchPolicy;\n            if (fetchPolicy === 'standby')\n                return;\n            var loading = isNetworkRequestInFlight(queryStoreValue.networkStatus);\n            var lastResult = observableQuery && observableQuery.getLastResult();\n            var networkStatusChanged = !!(lastResult &&\n                lastResult.networkStatus !== queryStoreValue.networkStatus);\n            var shouldNotifyIfLoading = options.returnPartialData ||\n                (!newData && queryStoreValue.previousVariables) ||\n                (networkStatusChanged && options.notifyOnNetworkStatusChange) ||\n                fetchPolicy === 'cache-only' ||\n                fetchPolicy === 'cache-and-network';\n            if (loading && !shouldNotifyIfLoading) {\n                return;\n            }\n            var hasGraphQLErrors = isNonEmptyArray(queryStoreValue.graphQLErrors);\n            var errorPolicy = observableQuery\n                && observableQuery.options.errorPolicy\n                || options.errorPolicy\n                || 'none';\n            if (errorPolicy === 'none' && hasGraphQLErrors || queryStoreValue.networkError) {\n                return invoke('error', new ApolloError({\n                    graphQLErrors: queryStoreValue.graphQLErrors,\n                    networkError: queryStoreValue.networkError,\n                }));\n            }\n            try {\n                var data = void 0;\n                var isMissing = void 0;\n                if (newData) {\n                    if (fetchPolicy !== 'no-cache' && fetchPolicy !== 'network-only') {\n                        _this.setQuery(queryId, function () { return ({ newData: null }); });\n                    }\n                    data = newData.result;\n                    isMissing = !newData.complete;\n                }\n                else {\n                    var lastError = observableQuery && observableQuery.getLastError();\n                    var errorStatusChanged = errorPolicy !== 'none' &&\n                        (lastError && lastError.graphQLErrors) !==\n                            queryStoreValue.graphQLErrors;\n                    if (lastResult && lastResult.data && !errorStatusChanged) {\n                        data = lastResult.data;\n                        isMissing = false;\n                    }\n                    else {\n                        var diffResult = _this.dataStore.getCache().diff({\n                            query: document,\n                            variables: queryStoreValue.previousVariables ||\n                                queryStoreValue.variables,\n                            returnPartialData: true,\n                            optimistic: true,\n                        });\n                        data = diffResult.result;\n                        isMissing = !diffResult.complete;\n                    }\n                }\n                var stale = isMissing && !(options.returnPartialData ||\n                    fetchPolicy === 'cache-only');\n                var resultFromStore = {\n                    data: stale ? lastResult && lastResult.data : data,\n                    loading: loading,\n                    networkStatus: queryStoreValue.networkStatus,\n                    stale: stale,\n                };\n                if (errorPolicy === 'all' && hasGraphQLErrors) {\n                    resultFromStore.errors = queryStoreValue.graphQLErrors;\n                }\n                invoke('next', resultFromStore);\n            }\n            catch (networkError) {\n                invoke('error', new ApolloError({ networkError: networkError }));\n            }\n        };\n    };\n    QueryManager.prototype.transform = function (document) {\n        var transformCache = this.transformCache;\n        if (!transformCache.has(document)) {\n            var cache = this.dataStore.getCache();\n            var transformed = cache.transformDocument(document);\n            var forLink = removeConnectionDirectiveFromDocument(cache.transformForLink(transformed));\n            var clientQuery = this.localState.clientQuery(transformed);\n            var serverQuery = this.localState.serverQuery(forLink);\n            var cacheEntry_1 = {\n                document: transformed,\n                hasClientExports: hasClientExports(transformed),\n                hasForcedResolvers: this.localState.shouldForceResolvers(transformed),\n                clientQuery: clientQuery,\n                serverQuery: serverQuery,\n                defaultVars: getDefaultValues(getOperationDefinition(transformed)),\n            };\n            var add = function (doc) {\n                if (doc && !transformCache.has(doc)) {\n                    transformCache.set(doc, cacheEntry_1);\n                }\n            };\n            add(document);\n            add(transformed);\n            add(clientQuery);\n            add(serverQuery);\n        }\n        return transformCache.get(document);\n    };\n    QueryManager.prototype.getVariables = function (document, variables) {\n        return __assign({}, this.transform(document).defaultVars, variables);\n    };\n    QueryManager.prototype.watchQuery = function (options, shouldSubscribe) {\n        if (shouldSubscribe === void 0) { shouldSubscribe = true; }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'standby', 9) : invariant(options.fetchPolicy !== 'standby', 'client.watchQuery cannot be called with fetchPolicy set to \"standby\"');\n        options.variables = this.getVariables(options.query, options.variables);\n        if (typeof options.notifyOnNetworkStatusChange === 'undefined') {\n            options.notifyOnNetworkStatusChange = false;\n        }\n        var transformedOptions = __assign({}, options);\n        return new ObservableQuery({\n            queryManager: this,\n            options: transformedOptions,\n            shouldSubscribe: shouldSubscribe,\n        });\n    };\n    QueryManager.prototype.query = function (options) {\n        var _this = this;\n        process.env.NODE_ENV === \"production\" ? invariant(options.query, 10) : invariant(options.query, 'query option is required. You must specify your GraphQL document ' +\n            'in the query option.');\n        process.env.NODE_ENV === \"production\" ? invariant(options.query.kind === 'Document', 11) : invariant(options.query.kind === 'Document', 'You must wrap the query string in a \"gql\" tag.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.returnPartialData, 12) : invariant(!options.returnPartialData, 'returnPartialData option only supported on watchQuery.');\n        process.env.NODE_ENV === \"production\" ? invariant(!options.pollInterval, 13) : invariant(!options.pollInterval, 'pollInterval option only supported on watchQuery.');\n        return new Promise(function (resolve, reject) {\n            var watchedQuery = _this.watchQuery(options, false);\n            _this.fetchQueryRejectFns.set(\"query:\" + watchedQuery.queryId, reject);\n            watchedQuery\n                .result()\n                .then(resolve, reject)\n                .then(function () {\n                return _this.fetchQueryRejectFns.delete(\"query:\" + watchedQuery.queryId);\n            });\n        });\n    };\n    QueryManager.prototype.generateQueryId = function () {\n        return String(this.idCounter++);\n    };\n    QueryManager.prototype.stopQueryInStore = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryInStoreNoBroadcast = function (queryId) {\n        this.stopPollingQuery(queryId);\n        this.queryStore.stopQuery(queryId);\n        this.invalidate(queryId);\n    };\n    QueryManager.prototype.addQueryListener = function (queryId, listener) {\n        this.setQuery(queryId, function (_a) {\n            var listeners = _a.listeners;\n            listeners.add(listener);\n            return { invalidated: false };\n        });\n    };\n    QueryManager.prototype.updateQueryWatch = function (queryId, document, options) {\n        var _this = this;\n        var cancel = this.getQuery(queryId).cancel;\n        if (cancel)\n            cancel();\n        var previousResult = function () {\n            var previousResult = null;\n            var observableQuery = _this.getQuery(queryId).observableQuery;\n            if (observableQuery) {\n                var lastResult = observableQuery.getLastResult();\n                if (lastResult) {\n                    previousResult = lastResult.data;\n                }\n            }\n            return previousResult;\n        };\n        return this.dataStore.getCache().watch({\n            query: document,\n            variables: options.variables,\n            optimistic: true,\n            previousResult: previousResult,\n            callback: function (newData) {\n                _this.setQuery(queryId, function () { return ({ invalidated: true, newData: newData }); });\n            },\n        });\n    };\n    QueryManager.prototype.addObservableQuery = function (queryId, observableQuery) {\n        this.setQuery(queryId, function () { return ({ observableQuery: observableQuery }); });\n    };\n    QueryManager.prototype.removeObservableQuery = function (queryId) {\n        var cancel = this.getQuery(queryId).cancel;\n        this.setQuery(queryId, function () { return ({ observableQuery: null }); });\n        if (cancel)\n            cancel();\n    };\n    QueryManager.prototype.clearStore = function () {\n        this.fetchQueryRejectFns.forEach(function (reject) {\n            reject(process.env.NODE_ENV === \"production\" ? new InvariantError(14) : new InvariantError('Store reset while query was in flight (not completed in link chain)'));\n        });\n        var resetIds = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery)\n                resetIds.push(queryId);\n        });\n        this.queryStore.reset(resetIds);\n        this.mutationStore.reset();\n        return this.dataStore.reset();\n    };\n    QueryManager.prototype.resetStore = function () {\n        var _this = this;\n        return this.clearStore().then(function () {\n            return _this.reFetchObservableQueries();\n        });\n    };\n    QueryManager.prototype.reFetchObservableQueries = function (includeStandby) {\n        var _this = this;\n        if (includeStandby === void 0) { includeStandby = false; }\n        var observableQueryPromises = [];\n        this.queries.forEach(function (_a, queryId) {\n            var observableQuery = _a.observableQuery;\n            if (observableQuery) {\n                var fetchPolicy = observableQuery.options.fetchPolicy;\n                observableQuery.resetLastResults();\n                if (fetchPolicy !== 'cache-only' &&\n                    (includeStandby || fetchPolicy !== 'standby')) {\n                    observableQueryPromises.push(observableQuery.refetch());\n                }\n                _this.setQuery(queryId, function () { return ({ newData: null }); });\n                _this.invalidate(queryId);\n            }\n        });\n        this.broadcastQueries();\n        return Promise.all(observableQueryPromises);\n    };\n    QueryManager.prototype.observeQuery = function (queryId, options, observer) {\n        this.addQueryListener(queryId, this.queryListenerForObserver(queryId, options, observer));\n        return this.fetchQuery(queryId, options);\n    };\n    QueryManager.prototype.startQuery = function (queryId, options, listener) {\n        process.env.NODE_ENV === \"production\" || invariant.warn(\"The QueryManager.startQuery method has been deprecated\");\n        this.addQueryListener(queryId, listener);\n        this.fetchQuery(queryId, options)\n            .catch(function () { return undefined; });\n        return queryId;\n    };\n    QueryManager.prototype.startGraphQLSubscription = function (_a) {\n        var _this = this;\n        var query = _a.query, fetchPolicy = _a.fetchPolicy, variables = _a.variables;\n        query = this.transform(query).document;\n        variables = this.getVariables(query, variables);\n        var makeObservable = function (variables) {\n            return _this.getObservableFromLink(query, {}, variables, false).map(function (result) {\n                if (!fetchPolicy || fetchPolicy !== 'no-cache') {\n                    _this.dataStore.markSubscriptionResult(result, query, variables);\n                    _this.broadcastQueries();\n                }\n                if (graphQLResultHasError(result)) {\n                    throw new ApolloError({\n                        graphQLErrors: result.errors,\n                    });\n                }\n                return result;\n            });\n        };\n        if (this.transform(query).hasClientExports) {\n            var observablePromise_1 = this.localState.addExportedVariables(query, variables).then(makeObservable);\n            return new Observable(function (observer) {\n                var sub = null;\n                observablePromise_1.then(function (observable) { return sub = observable.subscribe(observer); }, observer.error);\n                return function () { return sub && sub.unsubscribe(); };\n            });\n        }\n        return makeObservable(variables);\n    };\n    QueryManager.prototype.stopQuery = function (queryId) {\n        this.stopQueryNoBroadcast(queryId);\n        this.broadcastQueries();\n    };\n    QueryManager.prototype.stopQueryNoBroadcast = function (queryId) {\n        this.stopQueryInStoreNoBroadcast(queryId);\n        this.removeQuery(queryId);\n    };\n    QueryManager.prototype.removeQuery = function (queryId) {\n        this.fetchQueryRejectFns.delete(\"query:\" + queryId);\n        this.fetchQueryRejectFns.delete(\"fetchRequest:\" + queryId);\n        this.getQuery(queryId).subscriptions.forEach(function (x) { return x.unsubscribe(); });\n        this.queries.delete(queryId);\n    };\n    QueryManager.prototype.getCurrentQueryResult = function (observableQuery, optimistic) {\n        if (optimistic === void 0) { optimistic = true; }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query, fetchPolicy = _a.fetchPolicy, returnPartialData = _a.returnPartialData;\n        var lastResult = observableQuery.getLastResult();\n        var newData = this.getQuery(observableQuery.queryId).newData;\n        if (newData && newData.complete) {\n            return { data: newData.result, partial: false };\n        }\n        if (fetchPolicy === 'no-cache' || fetchPolicy === 'network-only') {\n            return { data: undefined, partial: false };\n        }\n        var _b = this.dataStore.getCache().diff({\n            query: query,\n            variables: variables,\n            previousResult: lastResult ? lastResult.data : undefined,\n            returnPartialData: true,\n            optimistic: optimistic,\n        }), result = _b.result, complete = _b.complete;\n        return {\n            data: (complete || returnPartialData) ? result : void 0,\n            partial: !complete,\n        };\n    };\n    QueryManager.prototype.getQueryWithPreviousResult = function (queryIdOrObservable) {\n        var observableQuery;\n        if (typeof queryIdOrObservable === 'string') {\n            var foundObserveableQuery = this.getQuery(queryIdOrObservable).observableQuery;\n            process.env.NODE_ENV === \"production\" ? invariant(foundObserveableQuery, 15) : invariant(foundObserveableQuery, \"ObservableQuery with this id doesn't exist: \" + queryIdOrObservable);\n            observableQuery = foundObserveableQuery;\n        }\n        else {\n            observableQuery = queryIdOrObservable;\n        }\n        var _a = observableQuery.options, variables = _a.variables, query = _a.query;\n        return {\n            previousResult: this.getCurrentQueryResult(observableQuery, false).data,\n            variables: variables,\n            document: query,\n        };\n    };\n    QueryManager.prototype.broadcastQueries = function () {\n        var _this = this;\n        this.onBroadcast();\n        this.queries.forEach(function (info, id) {\n            if (info.invalidated) {\n                info.listeners.forEach(function (listener) {\n                    if (listener) {\n                        listener(_this.queryStore.get(id), info.newData);\n                    }\n                });\n            }\n        });\n    };\n    QueryManager.prototype.getLocalState = function () {\n        return this.localState;\n    };\n    QueryManager.prototype.getObservableFromLink = function (query, context, variables, deduplication) {\n        var _this = this;\n        if (deduplication === void 0) { deduplication = this.queryDeduplication; }\n        var observable;\n        var serverQuery = this.transform(query).serverQuery;\n        if (serverQuery) {\n            var _a = this, inFlightLinkObservables_1 = _a.inFlightLinkObservables, link = _a.link;\n            var operation = {\n                query: serverQuery,\n                variables: variables,\n                operationName: getOperationName(serverQuery) || void 0,\n                context: this.prepareContext(__assign({}, context, { forceFetch: !deduplication })),\n            };\n            context = operation.context;\n            if (deduplication) {\n                var byVariables_1 = inFlightLinkObservables_1.get(serverQuery) || new Map();\n                inFlightLinkObservables_1.set(serverQuery, byVariables_1);\n                var varJson_1 = JSON.stringify(variables);\n                observable = byVariables_1.get(varJson_1);\n                if (!observable) {\n                    byVariables_1.set(varJson_1, observable = multiplex(execute(link, operation)));\n                    var cleanup = function () {\n                        byVariables_1.delete(varJson_1);\n                        if (!byVariables_1.size)\n                            inFlightLinkObservables_1.delete(serverQuery);\n                        cleanupSub_1.unsubscribe();\n                    };\n                    var cleanupSub_1 = observable.subscribe({\n                        next: cleanup,\n                        error: cleanup,\n                        complete: cleanup,\n                    });\n                }\n            }\n            else {\n                observable = multiplex(execute(link, operation));\n            }\n        }\n        else {\n            observable = Observable.of({ data: {} });\n            context = this.prepareContext(context);\n        }\n        var clientQuery = this.transform(query).clientQuery;\n        if (clientQuery) {\n            observable = asyncMap(observable, function (result) {\n                return _this.localState.runResolvers({\n                    document: clientQuery,\n                    remoteResult: result,\n                    context: context,\n                    variables: variables,\n                });\n            });\n        }\n        return observable;\n    };\n    QueryManager.prototype.fetchRequest = function (_a) {\n        var _this = this;\n        var requestId = _a.requestId, queryId = _a.queryId, document = _a.document, options = _a.options, fetchMoreForQueryId = _a.fetchMoreForQueryId;\n        var variables = options.variables, _b = options.errorPolicy, errorPolicy = _b === void 0 ? 'none' : _b, fetchPolicy = options.fetchPolicy;\n        var resultFromStore;\n        var errorsFromStore;\n        return new Promise(function (resolve, reject) {\n            var observable = _this.getObservableFromLink(document, options.context, variables);\n            var fqrfId = \"fetchRequest:\" + queryId;\n            _this.fetchQueryRejectFns.set(fqrfId, reject);\n            var cleanup = function () {\n                _this.fetchQueryRejectFns.delete(fqrfId);\n                _this.setQuery(queryId, function (_a) {\n                    var subscriptions = _a.subscriptions;\n                    subscriptions.delete(subscription);\n                });\n            };\n            var subscription = observable.map(function (result) {\n                if (requestId >= _this.getQuery(queryId).lastRequestId) {\n                    _this.markQueryResult(queryId, result, options, fetchMoreForQueryId);\n                    _this.queryStore.markQueryResult(queryId, result, fetchMoreForQueryId);\n                    _this.invalidate(queryId);\n                    _this.invalidate(fetchMoreForQueryId);\n                    _this.broadcastQueries();\n                }\n                if (errorPolicy === 'none' && isNonEmptyArray(result.errors)) {\n                    return reject(new ApolloError({\n                        graphQLErrors: result.errors,\n                    }));\n                }\n                if (errorPolicy === 'all') {\n                    errorsFromStore = result.errors;\n                }\n                if (fetchMoreForQueryId || fetchPolicy === 'no-cache') {\n                    resultFromStore = result.data;\n                }\n                else {\n                    var _a = _this.dataStore.getCache().diff({\n                        variables: variables,\n                        query: document,\n                        optimistic: false,\n                        returnPartialData: true,\n                    }), result_1 = _a.result, complete = _a.complete;\n                    if (complete || options.returnPartialData) {\n                        resultFromStore = result_1;\n                    }\n                }\n            }).subscribe({\n                error: function (error) {\n                    cleanup();\n                    reject(error);\n                },\n                complete: function () {\n                    cleanup();\n                    resolve({\n                        data: resultFromStore,\n                        errors: errorsFromStore,\n                        loading: false,\n                        networkStatus: NetworkStatus.ready,\n                        stale: false,\n                    });\n                },\n            });\n            _this.setQuery(queryId, function (_a) {\n                var subscriptions = _a.subscriptions;\n                subscriptions.add(subscription);\n            });\n        });\n    };\n    QueryManager.prototype.getQuery = function (queryId) {\n        return (this.queries.get(queryId) || {\n            listeners: new Set(),\n            invalidated: false,\n            document: null,\n            newData: null,\n            lastRequestId: 1,\n            observableQuery: null,\n            subscriptions: new Set(),\n        });\n    };\n    QueryManager.prototype.setQuery = function (queryId, updater) {\n        var prev = this.getQuery(queryId);\n        var newInfo = __assign({}, prev, updater(prev));\n        this.queries.set(queryId, newInfo);\n    };\n    QueryManager.prototype.invalidate = function (queryId, invalidated) {\n        if (invalidated === void 0) { invalidated = true; }\n        if (queryId) {\n            this.setQuery(queryId, function () { return ({ invalidated: invalidated }); });\n        }\n    };\n    QueryManager.prototype.prepareContext = function (context) {\n        if (context === void 0) { context = {}; }\n        var newContext = this.localState.prepareContext(context);\n        return __assign({}, newContext, { clientAwareness: this.clientAwareness });\n    };\n    QueryManager.prototype.checkInFlight = function (queryId) {\n        var query = this.queryStore.get(queryId);\n        return (query &&\n            query.networkStatus !== NetworkStatus.ready &&\n            query.networkStatus !== NetworkStatus.error);\n    };\n    QueryManager.prototype.startPollingQuery = function (options, queryId, listener) {\n        var _this = this;\n        var pollInterval = options.pollInterval;\n        process.env.NODE_ENV === \"production\" ? invariant(pollInterval, 16) : invariant(pollInterval, 'Attempted to start a polling query without a polling interval.');\n        if (!this.ssrMode) {\n            var info = this.pollingInfoByQueryId.get(queryId);\n            if (!info) {\n                this.pollingInfoByQueryId.set(queryId, (info = {}));\n            }\n            info.interval = pollInterval;\n            info.options = __assign({}, options, { fetchPolicy: 'network-only' });\n            var maybeFetch_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    if (_this.checkInFlight(queryId)) {\n                        poll_1();\n                    }\n                    else {\n                        _this.fetchQuery(queryId, info.options, FetchType.poll).then(poll_1, poll_1);\n                    }\n                }\n            };\n            var poll_1 = function () {\n                var info = _this.pollingInfoByQueryId.get(queryId);\n                if (info) {\n                    clearTimeout(info.timeout);\n                    info.timeout = setTimeout(maybeFetch_1, info.interval);\n                }\n            };\n            if (listener) {\n                this.addQueryListener(queryId, listener);\n            }\n            poll_1();\n        }\n        return queryId;\n    };\n    QueryManager.prototype.stopPollingQuery = function (queryId) {\n        this.pollingInfoByQueryId.delete(queryId);\n    };\n    return QueryManager;\n}());\n\nvar DataStore = (function () {\n    function DataStore(initialCache) {\n        this.cache = initialCache;\n    }\n    DataStore.prototype.getCache = function () {\n        return this.cache;\n    };\n    DataStore.prototype.markQueryResult = function (result, document, variables, fetchMoreForQueryId, ignoreErrors) {\n        if (ignoreErrors === void 0) { ignoreErrors = false; }\n        var writeWithErrors = !graphQLResultHasError(result);\n        if (ignoreErrors && graphQLResultHasError(result) && result.data) {\n            writeWithErrors = true;\n        }\n        if (!fetchMoreForQueryId && writeWithErrors) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_QUERY',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markSubscriptionResult = function (result, document, variables) {\n        if (!graphQLResultHasError(result)) {\n            this.cache.write({\n                result: result.data,\n                dataId: 'ROOT_SUBSCRIPTION',\n                query: document,\n                variables: variables,\n            });\n        }\n    };\n    DataStore.prototype.markMutationInit = function (mutation) {\n        var _this = this;\n        if (mutation.optimisticResponse) {\n            var optimistic_1;\n            if (typeof mutation.optimisticResponse === 'function') {\n                optimistic_1 = mutation.optimisticResponse(mutation.variables);\n            }\n            else {\n                optimistic_1 = mutation.optimisticResponse;\n            }\n            this.cache.recordOptimisticTransaction(function (c) {\n                var orig = _this.cache;\n                _this.cache = c;\n                try {\n                    _this.markMutationResult({\n                        mutationId: mutation.mutationId,\n                        result: { data: optimistic_1 },\n                        document: mutation.document,\n                        variables: mutation.variables,\n                        updateQueries: mutation.updateQueries,\n                        update: mutation.update,\n                    });\n                }\n                finally {\n                    _this.cache = orig;\n                }\n            }, mutation.mutationId);\n        }\n    };\n    DataStore.prototype.markMutationResult = function (mutation) {\n        var _this = this;\n        if (!graphQLResultHasError(mutation.result)) {\n            var cacheWrites_1 = [{\n                    result: mutation.result.data,\n                    dataId: 'ROOT_MUTATION',\n                    query: mutation.document,\n                    variables: mutation.variables,\n                }];\n            var updateQueries_1 = mutation.updateQueries;\n            if (updateQueries_1) {\n                Object.keys(updateQueries_1).forEach(function (id) {\n                    var _a = updateQueries_1[id], query = _a.query, updater = _a.updater;\n                    var _b = _this.cache.diff({\n                        query: query.document,\n                        variables: query.variables,\n                        returnPartialData: true,\n                        optimistic: false,\n                    }), currentQueryResult = _b.result, complete = _b.complete;\n                    if (complete) {\n                        var nextQueryResult = tryFunctionOrLogError(function () {\n                            return updater(currentQueryResult, {\n                                mutationResult: mutation.result,\n                                queryName: getOperationName(query.document) || undefined,\n                                queryVariables: query.variables,\n                            });\n                        });\n                        if (nextQueryResult) {\n                            cacheWrites_1.push({\n                                result: nextQueryResult,\n                                dataId: 'ROOT_QUERY',\n                                query: query.document,\n                                variables: query.variables,\n                            });\n                        }\n                    }\n                });\n            }\n            this.cache.performTransaction(function (c) {\n                cacheWrites_1.forEach(function (write) { return c.write(write); });\n                var update = mutation.update;\n                if (update) {\n                    tryFunctionOrLogError(function () { return update(c, mutation.result); });\n                }\n            });\n        }\n    };\n    DataStore.prototype.markMutationComplete = function (_a) {\n        var mutationId = _a.mutationId, optimisticResponse = _a.optimisticResponse;\n        if (optimisticResponse) {\n            this.cache.removeOptimistic(mutationId);\n        }\n    };\n    DataStore.prototype.markUpdateQueryResult = function (document, variables, newResult) {\n        this.cache.write({\n            result: newResult,\n            dataId: 'ROOT_QUERY',\n            variables: variables,\n            query: document,\n        });\n    };\n    DataStore.prototype.reset = function () {\n        return this.cache.reset();\n    };\n    return DataStore;\n}());\n\nvar version = \"2.6.0\";\n\nvar hasSuggestedDevtools = false;\nvar ApolloClient = (function () {\n    function ApolloClient(options) {\n        var _this = this;\n        this.defaultOptions = {};\n        this.resetStoreCallbacks = [];\n        this.clearStoreCallbacks = [];\n        var cache = options.cache, _a = options.ssrMode, ssrMode = _a === void 0 ? false : _a, _b = options.ssrForceFetchDelay, ssrForceFetchDelay = _b === void 0 ? 0 : _b, connectToDevTools = options.connectToDevTools, _c = options.queryDeduplication, queryDeduplication = _c === void 0 ? true : _c, defaultOptions = options.defaultOptions, _d = options.assumeImmutableResults, assumeImmutableResults = _d === void 0 ? false : _d, resolvers = options.resolvers, typeDefs = options.typeDefs, fragmentMatcher = options.fragmentMatcher, clientAwarenessName = options.name, clientAwarenessVersion = options.version;\n        var link = options.link;\n        if (!link && resolvers) {\n            link = ApolloLink.empty();\n        }\n        if (!link || !cache) {\n            throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"In order to initialize Apollo Client, you must specify 'link' and 'cache' properties in the options object.\\n\" +\n                \"These options are part of the upgrade requirements when migrating from Apollo Client 1.x to Apollo Client 2.x.\\n\" +\n                \"For more information, please visit: https://www.apollographql.com/docs/tutorial/client.html#apollo-client-setup\");\n        }\n        this.link = link;\n        this.cache = cache;\n        this.store = new DataStore(cache);\n        this.disableNetworkFetches = ssrMode || ssrForceFetchDelay > 0;\n        this.queryDeduplication = queryDeduplication;\n        this.defaultOptions = defaultOptions || {};\n        this.typeDefs = typeDefs;\n        if (ssrForceFetchDelay) {\n            setTimeout(function () { return (_this.disableNetworkFetches = false); }, ssrForceFetchDelay);\n        }\n        this.watchQuery = this.watchQuery.bind(this);\n        this.query = this.query.bind(this);\n        this.mutate = this.mutate.bind(this);\n        this.resetStore = this.resetStore.bind(this);\n        this.reFetchObservableQueries = this.reFetchObservableQueries.bind(this);\n        var defaultConnectToDevTools = process.env.NODE_ENV !== 'production' &&\n            typeof window !== 'undefined' &&\n            !window.__APOLLO_CLIENT__;\n        if (typeof connectToDevTools === 'undefined'\n            ? defaultConnectToDevTools\n            : connectToDevTools && typeof window !== 'undefined') {\n            window.__APOLLO_CLIENT__ = this;\n        }\n        if (!hasSuggestedDevtools && process.env.NODE_ENV !== 'production') {\n            hasSuggestedDevtools = true;\n            if (typeof window !== 'undefined' &&\n                window.document &&\n                window.top === window.self) {\n                if (typeof window.__APOLLO_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {\n                    if (window.navigator &&\n                        window.navigator.userAgent &&\n                        window.navigator.userAgent.indexOf('Chrome') > -1) {\n                        console.debug('Download the Apollo DevTools ' +\n                            'for a better development experience: ' +\n                            'https://chrome.google.com/webstore/detail/apollo-client-developer-t/jdkknkkbebbapilgoeccciglkfbmbnfm');\n                    }\n                }\n            }\n        }\n        this.version = version;\n        this.localState = new LocalState({\n            cache: cache,\n            client: this,\n            resolvers: resolvers,\n            fragmentMatcher: fragmentMatcher,\n        });\n        this.queryManager = new QueryManager({\n            link: this.link,\n            store: this.store,\n            queryDeduplication: queryDeduplication,\n            ssrMode: ssrMode,\n            clientAwareness: {\n                name: clientAwarenessName,\n                version: clientAwarenessVersion,\n            },\n            localState: this.localState,\n            assumeImmutableResults: assumeImmutableResults,\n            onBroadcast: function () {\n                if (_this.devToolsHookCb) {\n                    _this.devToolsHookCb({\n                        action: {},\n                        state: {\n                            queries: _this.queryManager.queryStore.getStore(),\n                            mutations: _this.queryManager.mutationStore.getStore(),\n                        },\n                        dataWithOptimisticResults: _this.cache.extract(true),\n                    });\n                }\n            },\n        });\n    }\n    ApolloClient.prototype.stop = function () {\n        this.queryManager.stop();\n    };\n    ApolloClient.prototype.watchQuery = function (options) {\n        if (this.defaultOptions.watchQuery) {\n            options = __assign({}, this.defaultOptions.watchQuery, options);\n        }\n        if (this.disableNetworkFetches &&\n            (options.fetchPolicy === 'network-only' ||\n                options.fetchPolicy === 'cache-and-network')) {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.watchQuery(options);\n    };\n    ApolloClient.prototype.query = function (options) {\n        if (this.defaultOptions.query) {\n            options = __assign({}, this.defaultOptions.query, options);\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(options.fetchPolicy !== 'cache-and-network', 2) : invariant(options.fetchPolicy !== 'cache-and-network', 'The cache-and-network fetchPolicy does not work with client.query, because ' +\n            'client.query can only return a single result. Please use client.watchQuery ' +\n            'to receive multiple results from the cache and the network, or consider ' +\n            'using a different fetchPolicy, such as cache-first or network-only.');\n        if (this.disableNetworkFetches && options.fetchPolicy === 'network-only') {\n            options = __assign({}, options, { fetchPolicy: 'cache-first' });\n        }\n        return this.queryManager.query(options);\n    };\n    ApolloClient.prototype.mutate = function (options) {\n        if (this.defaultOptions.mutate) {\n            options = __assign({}, this.defaultOptions.mutate, options);\n        }\n        return this.queryManager.mutate(options);\n    };\n    ApolloClient.prototype.subscribe = function (options) {\n        return this.queryManager.startGraphQLSubscription(options);\n    };\n    ApolloClient.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readQuery(options, optimistic);\n    };\n    ApolloClient.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.cache.readFragment(options, optimistic);\n    };\n    ApolloClient.prototype.writeQuery = function (options) {\n        var result = this.cache.writeQuery(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeFragment = function (options) {\n        var result = this.cache.writeFragment(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.writeData = function (options) {\n        var result = this.cache.writeData(options);\n        this.queryManager.broadcastQueries();\n        return result;\n    };\n    ApolloClient.prototype.__actionHookForDevTools = function (cb) {\n        this.devToolsHookCb = cb;\n    };\n    ApolloClient.prototype.__requestRaw = function (payload) {\n        return execute(this.link, payload);\n    };\n    ApolloClient.prototype.initQueryManager = function () {\n        process.env.NODE_ENV === \"production\" || invariant.warn('Calling the initQueryManager method is no longer necessary, ' +\n            'and it will be removed from ApolloClient in version 3.0.');\n        return this.queryManager;\n    };\n    ApolloClient.prototype.resetStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.resetStoreCallbacks.map(function (fn) { return fn(); })); })\n            .then(function () { return _this.reFetchObservableQueries(); });\n    };\n    ApolloClient.prototype.clearStore = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () { return _this.queryManager.clearStore(); })\n            .then(function () { return Promise.all(_this.clearStoreCallbacks.map(function (fn) { return fn(); })); });\n    };\n    ApolloClient.prototype.onResetStore = function (cb) {\n        var _this = this;\n        this.resetStoreCallbacks.push(cb);\n        return function () {\n            _this.resetStoreCallbacks = _this.resetStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.onClearStore = function (cb) {\n        var _this = this;\n        this.clearStoreCallbacks.push(cb);\n        return function () {\n            _this.clearStoreCallbacks = _this.clearStoreCallbacks.filter(function (c) { return c !== cb; });\n        };\n    };\n    ApolloClient.prototype.reFetchObservableQueries = function (includeStandby) {\n        return this.queryManager.reFetchObservableQueries(includeStandby);\n    };\n    ApolloClient.prototype.extract = function (optimistic) {\n        return this.cache.extract(optimistic);\n    };\n    ApolloClient.prototype.restore = function (serializedState) {\n        return this.cache.restore(serializedState);\n    };\n    ApolloClient.prototype.addResolvers = function (resolvers) {\n        this.localState.addResolvers(resolvers);\n    };\n    ApolloClient.prototype.setResolvers = function (resolvers) {\n        this.localState.setResolvers(resolvers);\n    };\n    ApolloClient.prototype.getResolvers = function () {\n        return this.localState.getResolvers();\n    };\n    ApolloClient.prototype.setLocalStateFragmentMatcher = function (fragmentMatcher) {\n        this.localState.setFragmentMatcher(fragmentMatcher);\n    };\n    return ApolloClient;\n}());\n\nexport default ApolloClient;\nexport { ApolloClient, ApolloError, FetchType, NetworkStatus, ObservableQuery, isApolloError };\n//# sourceMappingURL=bundle.esm.js.map\n","export default function symbolObservablePonyfill(root) {\n\tvar result;\n\tvar Symbol = root.Symbol;\n\n\tif (typeof Symbol === 'function') {\n\t\tif (Symbol.observable) {\n\t\t\tresult = Symbol.observable;\n\t\t} else {\n\t\t\tresult = Symbol('observable');\n\t\t\tSymbol.observable = result;\n\t\t}\n\t} else {\n\t\tresult = '@@observable';\n\t}\n\n\treturn result;\n};\n","import { getFragmentQueryDocument } from 'apollo-utilities';\n\nfunction queryFromPojo(obj) {\n    var op = {\n        kind: 'OperationDefinition',\n        operation: 'query',\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [op],\n    };\n    return out;\n}\nfunction fragmentFromPojo(obj, typename) {\n    var frag = {\n        kind: 'FragmentDefinition',\n        typeCondition: {\n            kind: 'NamedType',\n            name: {\n                kind: 'Name',\n                value: typename || '__FakeType',\n            },\n        },\n        name: {\n            kind: 'Name',\n            value: 'GeneratedClientQuery',\n        },\n        selectionSet: selectionSetFromObj(obj),\n    };\n    var out = {\n        kind: 'Document',\n        definitions: [frag],\n    };\n    return out;\n}\nfunction selectionSetFromObj(obj) {\n    if (typeof obj === 'number' ||\n        typeof obj === 'boolean' ||\n        typeof obj === 'string' ||\n        typeof obj === 'undefined' ||\n        obj === null) {\n        return null;\n    }\n    if (Array.isArray(obj)) {\n        return selectionSetFromObj(obj[0]);\n    }\n    var selections = [];\n    Object.keys(obj).forEach(function (key) {\n        var nestedSelSet = selectionSetFromObj(obj[key]);\n        var field = {\n            kind: 'Field',\n            name: {\n                kind: 'Name',\n                value: key,\n            },\n            selectionSet: nestedSelSet || undefined,\n        };\n        selections.push(field);\n    });\n    var selectionSet = {\n        kind: 'SelectionSet',\n        selections: selections,\n    };\n    return selectionSet;\n}\nvar justTypenameQuery = {\n    kind: 'Document',\n    definitions: [\n        {\n            kind: 'OperationDefinition',\n            operation: 'query',\n            name: null,\n            variableDefinitions: null,\n            directives: [],\n            selectionSet: {\n                kind: 'SelectionSet',\n                selections: [\n                    {\n                        kind: 'Field',\n                        alias: null,\n                        name: {\n                            kind: 'Name',\n                            value: '__typename',\n                        },\n                        arguments: [],\n                        directives: [],\n                        selectionSet: null,\n                    },\n                ],\n            },\n        },\n    ],\n};\n\nvar ApolloCache = (function () {\n    function ApolloCache() {\n    }\n    ApolloCache.prototype.transformDocument = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.transformForLink = function (document) {\n        return document;\n    };\n    ApolloCache.prototype.readQuery = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: options.query,\n            variables: options.variables,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.readFragment = function (options, optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return this.read({\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n            variables: options.variables,\n            rootId: options.id,\n            optimistic: optimistic,\n        });\n    };\n    ApolloCache.prototype.writeQuery = function (options) {\n        this.write({\n            dataId: 'ROOT_QUERY',\n            result: options.data,\n            query: options.query,\n            variables: options.variables,\n        });\n    };\n    ApolloCache.prototype.writeFragment = function (options) {\n        this.write({\n            dataId: options.id,\n            result: options.data,\n            variables: options.variables,\n            query: getFragmentQueryDocument(options.fragment, options.fragmentName),\n        });\n    };\n    ApolloCache.prototype.writeData = function (_a) {\n        var id = _a.id, data = _a.data;\n        if (typeof id !== 'undefined') {\n            var typenameResult = null;\n            try {\n                typenameResult = this.read({\n                    rootId: id,\n                    optimistic: false,\n                    query: justTypenameQuery,\n                });\n            }\n            catch (e) {\n            }\n            var __typename = (typenameResult && typenameResult.__typename) || '__ClientData';\n            var dataToWrite = Object.assign({ __typename: __typename }, data);\n            this.writeFragment({\n                id: id,\n                fragment: fragmentFromPojo(dataToWrite, __typename),\n                data: dataToWrite,\n            });\n        }\n        else {\n            this.writeQuery({ query: queryFromPojo(data), data: data });\n        }\n    };\n    return ApolloCache;\n}());\n\nvar Cache;\n(function (Cache) {\n})(Cache || (Cache = {}));\n\nexport { ApolloCache, Cache };\n//# sourceMappingURL=bundle.esm.js.map\n","// This currentContext variable will only be used if the makeSlotClass\r\n// function is called, which happens only if this is the first copy of the\r\n// @wry/context package to be imported.\r\nvar currentContext = null;\r\n// This unique internal object is used to denote the absence of a value\r\n// for a given Slot, and is never exposed to outside code.\r\nvar MISSING_VALUE = {};\r\nvar idCounter = 1;\r\n// Although we can't do anything about the cost of duplicated code from\r\n// accidentally bundling multiple copies of the @wry/context package, we can\r\n// avoid creating the Slot class more than once using makeSlotClass.\r\nvar makeSlotClass = function () { return /** @class */ (function () {\r\n    function Slot() {\r\n        // If you have a Slot object, you can find out its slot.id, but you cannot\r\n        // guess the slot.id of a Slot you don't have access to, thanks to the\r\n        // randomized suffix.\r\n        this.id = [\r\n            \"slot\",\r\n            idCounter++,\r\n            Date.now(),\r\n            Math.random().toString(36).slice(2),\r\n        ].join(\":\");\r\n    }\r\n    Slot.prototype.hasValue = function () {\r\n        for (var context_1 = currentContext; context_1; context_1 = context_1.parent) {\r\n            // We use the Slot object iself as a key to its value, which means the\r\n            // value cannot be obtained without a reference to the Slot object.\r\n            if (this.id in context_1.slots) {\r\n                var value = context_1.slots[this.id];\r\n                if (value === MISSING_VALUE)\r\n                    break;\r\n                if (context_1 !== currentContext) {\r\n                    // Cache the value in currentContext.slots so the next lookup will\r\n                    // be faster. This caching is safe because the tree of contexts and\r\n                    // the values of the slots are logically immutable.\r\n                    currentContext.slots[this.id] = value;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        if (currentContext) {\r\n            // If a value was not found for this Slot, it's never going to be found\r\n            // no matter how many times we look it up, so we might as well cache\r\n            // the absence of the value, too.\r\n            currentContext.slots[this.id] = MISSING_VALUE;\r\n        }\r\n        return false;\r\n    };\r\n    Slot.prototype.getValue = function () {\r\n        if (this.hasValue()) {\r\n            return currentContext.slots[this.id];\r\n        }\r\n    };\r\n    Slot.prototype.withValue = function (value, callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        var _a;\r\n        var slots = (_a = {\r\n                __proto__: null\r\n            },\r\n            _a[this.id] = value,\r\n            _a);\r\n        var parent = currentContext;\r\n        currentContext = { parent: parent, slots: slots };\r\n        try {\r\n            // Function.prototype.apply allows the arguments array argument to be\r\n            // omitted or undefined, so args! is fine here.\r\n            return callback.apply(thisArg, args);\r\n        }\r\n        finally {\r\n            currentContext = parent;\r\n        }\r\n    };\r\n    // Capture the current context and wrap a callback function so that it\r\n    // reestablishes the captured context when called.\r\n    Slot.bind = function (callback) {\r\n        var context = currentContext;\r\n        return function () {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = context;\r\n                return callback.apply(this, arguments);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        };\r\n    };\r\n    // Immediately run a callback function without any captured context.\r\n    Slot.noContext = function (callback, \r\n    // Given the prevalence of arrow functions, specifying arguments is likely\r\n    // to be much more common than specifying `this`, hence this ordering:\r\n    args, thisArg) {\r\n        if (currentContext) {\r\n            var saved = currentContext;\r\n            try {\r\n                currentContext = null;\r\n                // Function.prototype.apply allows the arguments array argument to be\r\n                // omitted or undefined, so args! is fine here.\r\n                return callback.apply(thisArg, args);\r\n            }\r\n            finally {\r\n                currentContext = saved;\r\n            }\r\n        }\r\n        else {\r\n            return callback.apply(thisArg, args);\r\n        }\r\n    };\r\n    return Slot;\r\n}()); };\r\n// We store a single global implementation of the Slot class as a permanent\r\n// non-enumerable symbol property of the Array constructor. This obfuscation\r\n// does nothing to prevent access to the Slot class, but at least it ensures\r\n// the implementation (i.e. currentContext) cannot be tampered with, and all\r\n// copies of the @wry/context package (hopefully just one) will share the\r\n// same Slot implementation. Since the first copy of the @wry/context package\r\n// to be imported wins, this technique imposes a very high cost for any\r\n// future breaking changes to the Slot class.\r\nvar globalKey = \"@wry/context:Slot\";\r\nvar host = Array;\r\nvar Slot = host[globalKey] || function () {\r\n    var Slot = makeSlotClass();\r\n    try {\r\n        Object.defineProperty(host, globalKey, {\r\n            value: host[globalKey] = Slot,\r\n            enumerable: false,\r\n            writable: false,\r\n            configurable: false,\r\n        });\r\n    }\r\n    finally {\r\n        return Slot;\r\n    }\r\n}();\n\nvar bind = Slot.bind, noContext = Slot.noContext;\r\nfunction setTimeoutWithContext(callback, delay) {\r\n    return setTimeout(bind(callback), delay);\r\n}\r\n// Turn any generator function into an async function (using yield instead\r\n// of await), with context automatically preserved across yields.\r\nfunction asyncFromGen(genFn) {\r\n    return function () {\r\n        var gen = genFn.apply(this, arguments);\r\n        var boundNext = bind(gen.next);\r\n        var boundThrow = bind(gen[\"throw\"]);\r\n        return new Promise(function (resolve, reject) {\r\n            function invoke(method, argument) {\r\n                try {\r\n                    var result = method.call(gen, argument);\r\n                }\r\n                catch (error) {\r\n                    return reject(error);\r\n                }\r\n                var next = result.done ? resolve : invokeNext;\r\n                if (isPromiseLike(result.value)) {\r\n                    result.value.then(next, result.done ? reject : invokeThrow);\r\n                }\r\n                else {\r\n                    next(result.value);\r\n                }\r\n            }\r\n            var invokeNext = function (value) { return invoke(boundNext, value); };\r\n            var invokeThrow = function (error) { return invoke(boundThrow, error); };\r\n            invokeNext();\r\n        });\r\n    };\r\n}\r\nfunction isPromiseLike(value) {\r\n    return value && typeof value.then === \"function\";\r\n}\r\n// If you use the fibers npm package to implement coroutines in Node.js,\r\n// you should call this function at least once to ensure context management\r\n// remains coherent across any yields.\r\nvar wrappedFibers = [];\r\nfunction wrapYieldingFiberMethods(Fiber) {\r\n    // There can be only one implementation of Fiber per process, so this array\r\n    // should never grow longer than one element.\r\n    if (wrappedFibers.indexOf(Fiber) < 0) {\r\n        var wrap = function (obj, method) {\r\n            var fn = obj[method];\r\n            obj[method] = function () {\r\n                return noContext(fn, arguments, this);\r\n            };\r\n        };\r\n        // These methods can yield, according to\r\n        // https://github.com/laverdet/node-fibers/blob/ddebed9b8ae3883e57f822e2108e6943e5c8d2a8/fibers.js#L97-L100\r\n        wrap(Fiber, \"yield\");\r\n        wrap(Fiber.prototype, \"run\");\r\n        wrap(Fiber.prototype, \"throwInto\");\r\n        wrappedFibers.push(Fiber);\r\n    }\r\n    return Fiber;\r\n}\n\nexport { Slot, asyncFromGen, bind, noContext, setTimeoutWithContext as setTimeout, wrapYieldingFiberMethods };\n","import { Slot } from '@wry/context';\nexport { bind as bindContext, noContext, setTimeout, asyncFromGen } from '@wry/context';\n\nfunction defaultDispose() { }\r\nvar Cache = /** @class */ (function () {\r\n    function Cache(max, dispose) {\r\n        if (max === void 0) { max = Infinity; }\r\n        if (dispose === void 0) { dispose = defaultDispose; }\r\n        this.max = max;\r\n        this.dispose = dispose;\r\n        this.map = new Map();\r\n        this.newest = null;\r\n        this.oldest = null;\r\n    }\r\n    Cache.prototype.has = function (key) {\r\n        return this.map.has(key);\r\n    };\r\n    Cache.prototype.get = function (key) {\r\n        var entry = this.getEntry(key);\r\n        return entry && entry.value;\r\n    };\r\n    Cache.prototype.getEntry = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry && entry !== this.newest) {\r\n            var older = entry.older, newer = entry.newer;\r\n            if (newer) {\r\n                newer.older = older;\r\n            }\r\n            if (older) {\r\n                older.newer = newer;\r\n            }\r\n            entry.older = this.newest;\r\n            entry.older.newer = entry;\r\n            entry.newer = null;\r\n            this.newest = entry;\r\n            if (entry === this.oldest) {\r\n                this.oldest = newer;\r\n            }\r\n        }\r\n        return entry;\r\n    };\r\n    Cache.prototype.set = function (key, value) {\r\n        var entry = this.getEntry(key);\r\n        if (entry) {\r\n            return entry.value = value;\r\n        }\r\n        entry = {\r\n            key: key,\r\n            value: value,\r\n            newer: null,\r\n            older: this.newest\r\n        };\r\n        if (this.newest) {\r\n            this.newest.newer = entry;\r\n        }\r\n        this.newest = entry;\r\n        this.oldest = this.oldest || entry;\r\n        this.map.set(key, entry);\r\n        return entry.value;\r\n    };\r\n    Cache.prototype.clean = function () {\r\n        while (this.oldest && this.map.size > this.max) {\r\n            this[\"delete\"](this.oldest.key);\r\n        }\r\n    };\r\n    Cache.prototype[\"delete\"] = function (key) {\r\n        var entry = this.map.get(key);\r\n        if (entry) {\r\n            if (entry === this.newest) {\r\n                this.newest = entry.older;\r\n            }\r\n            if (entry === this.oldest) {\r\n                this.oldest = entry.newer;\r\n            }\r\n            if (entry.newer) {\r\n                entry.newer.older = entry.older;\r\n            }\r\n            if (entry.older) {\r\n                entry.older.newer = entry.newer;\r\n            }\r\n            this.map[\"delete\"](key);\r\n            this.dispose(entry.value, key);\r\n            return true;\r\n        }\r\n        return false;\r\n    };\r\n    return Cache;\r\n}());\n\nvar parentEntrySlot = new Slot();\n\nvar UNKNOWN_VALUE = Object.create(null);\r\nvar reusableEmptyArray = [];\r\nvar emptySetPool = [];\r\nvar POOL_TARGET_SIZE = 100;\r\n// Since this package might be used browsers, we should avoid using the\r\n// Node built-in assert module.\r\nfunction assert(condition, optionalMessage) {\r\n    if (!condition) {\r\n        throw new Error(optionalMessage || \"assertion failure\");\r\n    }\r\n}\r\nvar Entry = /** @class */ (function () {\r\n    function Entry(fn, args) {\r\n        this.fn = fn;\r\n        this.args = args;\r\n        this.parents = new Set();\r\n        this.childValues = new Map();\r\n        // When this Entry has children that are dirty, this property becomes\r\n        // a Set containing other Entry objects, borrowed from emptySetPool.\r\n        // When the set becomes empty, it gets recycled back to emptySetPool.\r\n        this.dirtyChildren = null;\r\n        this.dirty = true;\r\n        this.recomputing = false;\r\n        this.value = UNKNOWN_VALUE;\r\n        ++Entry.count;\r\n    }\r\n    Entry.prototype.recompute = function () {\r\n        if (!rememberParent(this) && maybeReportOrphan(this)) {\r\n            // The recipient of the entry.reportOrphan callback decided to dispose\r\n            // of this orphan entry by calling entry.dispose(), so we don't need to\r\n            // (and should not) proceed with the recomputation.\r\n            return void 0;\r\n        }\r\n        return recomputeIfDirty(this);\r\n    };\r\n    Entry.prototype.setDirty = function () {\r\n        if (this.dirty)\r\n            return;\r\n        this.dirty = true;\r\n        this.value = UNKNOWN_VALUE;\r\n        reportDirty(this);\r\n        // We can go ahead and unsubscribe here, since any further dirty\r\n        // notifications we receive will be redundant, and unsubscribing may\r\n        // free up some resources, e.g. file watchers.\r\n        maybeUnsubscribe(this);\r\n    };\r\n    Entry.prototype.dispose = function () {\r\n        var _this = this;\r\n        forgetChildren(this).forEach(maybeReportOrphan);\r\n        maybeUnsubscribe(this);\r\n        // Because this entry has been kicked out of the cache (in index.js),\r\n        // we've lost the ability to find out if/when this entry becomes dirty,\r\n        // whether that happens through a subscription, because of a direct call\r\n        // to entry.setDirty(), or because one of its children becomes dirty.\r\n        // Because of this loss of future information, we have to assume the\r\n        // worst (that this entry might have become dirty very soon), so we must\r\n        // immediately mark this entry's parents as dirty. Normally we could\r\n        // just call entry.setDirty() rather than calling parent.setDirty() for\r\n        // each parent, but that would leave this entry in parent.childValues\r\n        // and parent.dirtyChildren, which would prevent the child from being\r\n        // truly forgotten.\r\n        this.parents.forEach(function (parent) {\r\n            parent.setDirty();\r\n            forgetChild(parent, _this);\r\n        });\r\n    };\r\n    Entry.count = 0;\r\n    return Entry;\r\n}());\r\nfunction rememberParent(child) {\r\n    var parent = parentEntrySlot.getValue();\r\n    if (parent) {\r\n        child.parents.add(parent);\r\n        if (!parent.childValues.has(child)) {\r\n            parent.childValues.set(child, UNKNOWN_VALUE);\r\n        }\r\n        if (mightBeDirty(child)) {\r\n            reportDirtyChild(parent, child);\r\n        }\r\n        else {\r\n            reportCleanChild(parent, child);\r\n        }\r\n        return parent;\r\n    }\r\n}\r\n// This is the most important method of the Entry API, because it\r\n// determines whether the cached entry.value can be returned immediately,\r\n// or must be recomputed. The overall performance of the caching system\r\n// depends on the truth of the following observations: (1) this.dirty is\r\n// usually false, (2) this.dirtyChildren is usually null/empty, and thus\r\n// (3) this.value is usally returned very quickly, without recomputation.\r\nfunction recomputeIfDirty(entry) {\r\n    if (entry.dirty) {\r\n        // If this Entry is explicitly dirty because someone called\r\n        // entry.setDirty(), recompute.\r\n        return reallyRecompute(entry);\r\n    }\r\n    if (mightBeDirty(entry)) {\r\n        // Get fresh values for any dirty children, and if those values\r\n        // disagree with this.childValues, mark this Entry explicitly dirty.\r\n        entry.dirtyChildren.forEach(function (child) {\r\n            assert(entry.childValues.has(child));\r\n            try {\r\n                recomputeIfDirty(child);\r\n            }\r\n            catch (e) {\r\n                entry.setDirty();\r\n            }\r\n        });\r\n        if (entry.dirty) {\r\n            // If this Entry has become explicitly dirty after comparing the fresh\r\n            // values of its dirty children against this.childValues, recompute.\r\n            return reallyRecompute(entry);\r\n        }\r\n    }\r\n    assert(entry.value !== UNKNOWN_VALUE);\r\n    return entry.value;\r\n}\r\nfunction reallyRecompute(entry) {\r\n    assert(!entry.recomputing, \"already recomputing\");\r\n    entry.recomputing = true;\r\n    // Since this recomputation is likely to re-remember some of this\r\n    // entry's children, we forget our children here but do not call\r\n    // maybeReportOrphan until after the recomputation finishes.\r\n    var originalChildren = forgetChildren(entry);\r\n    var threw = true;\r\n    try {\r\n        parentEntrySlot.withValue(entry, function () {\r\n            entry.value = entry.fn.apply(null, entry.args);\r\n        });\r\n        threw = false;\r\n    }\r\n    finally {\r\n        entry.recomputing = false;\r\n        if (threw || !maybeSubscribe(entry)) {\r\n            // Mark this Entry dirty if entry.fn threw or we failed to\r\n            // resubscribe. This is important because, if we have a subscribe\r\n            // function and it failed, then we're going to miss important\r\n            // notifications about the potential dirtiness of entry.value.\r\n            entry.setDirty();\r\n        }\r\n        else {\r\n            // If we successfully recomputed entry.value and did not fail to\r\n            // (re)subscribe, then this Entry is no longer explicitly dirty.\r\n            setClean(entry);\r\n        }\r\n    }\r\n    // Now that we've had a chance to re-remember any children that were\r\n    // involved in the recomputation, we can safely report any orphan\r\n    // children that remain.\r\n    originalChildren.forEach(maybeReportOrphan);\r\n    return entry.value;\r\n}\r\nfunction mightBeDirty(entry) {\r\n    return entry.dirty || !!(entry.dirtyChildren && entry.dirtyChildren.size);\r\n}\r\nfunction setClean(entry) {\r\n    entry.dirty = false;\r\n    if (mightBeDirty(entry)) {\r\n        // This Entry may still have dirty children, in which case we can't\r\n        // let our parents know we're clean just yet.\r\n        return;\r\n    }\r\n    reportClean(entry);\r\n}\r\nfunction reportDirty(child) {\r\n    child.parents.forEach(function (parent) { return reportDirtyChild(parent, child); });\r\n}\r\nfunction reportClean(child) {\r\n    child.parents.forEach(function (parent) { return reportCleanChild(parent, child); });\r\n}\r\n// Let a parent Entry know that one of its children may be dirty.\r\nfunction reportDirtyChild(parent, child) {\r\n    // Must have called rememberParent(child) before calling\r\n    // reportDirtyChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(mightBeDirty(child));\r\n    if (!parent.dirtyChildren) {\r\n        parent.dirtyChildren = emptySetPool.pop() || new Set;\r\n    }\r\n    else if (parent.dirtyChildren.has(child)) {\r\n        // If we already know this child is dirty, then we must have already\r\n        // informed our own parents that we are dirty, so we can terminate\r\n        // the recursion early.\r\n        return;\r\n    }\r\n    parent.dirtyChildren.add(child);\r\n    reportDirty(parent);\r\n}\r\n// Let a parent Entry know that one of its children is no longer dirty.\r\nfunction reportCleanChild(parent, child) {\r\n    // Must have called rememberChild(child) before calling\r\n    // reportCleanChild(parent, child).\r\n    assert(parent.childValues.has(child));\r\n    assert(!mightBeDirty(child));\r\n    var childValue = parent.childValues.get(child);\r\n    if (childValue === UNKNOWN_VALUE) {\r\n        parent.childValues.set(child, child.value);\r\n    }\r\n    else if (childValue !== child.value) {\r\n        parent.setDirty();\r\n    }\r\n    removeDirtyChild(parent, child);\r\n    if (mightBeDirty(parent)) {\r\n        return;\r\n    }\r\n    reportClean(parent);\r\n}\r\nfunction removeDirtyChild(parent, child) {\r\n    var dc = parent.dirtyChildren;\r\n    if (dc) {\r\n        dc[\"delete\"](child);\r\n        if (dc.size === 0) {\r\n            if (emptySetPool.length < POOL_TARGET_SIZE) {\r\n                emptySetPool.push(dc);\r\n            }\r\n            parent.dirtyChildren = null;\r\n        }\r\n    }\r\n}\r\n// If the given entry has a reportOrphan method, and no remaining parents,\r\n// call entry.reportOrphan and return true iff it returns true. The\r\n// reportOrphan function should return true to indicate entry.dispose()\r\n// has been called, and the entry has been removed from any other caches\r\n// (see index.js for the only current example).\r\nfunction maybeReportOrphan(entry) {\r\n    return entry.parents.size === 0 &&\r\n        typeof entry.reportOrphan === \"function\" &&\r\n        entry.reportOrphan() === true;\r\n}\r\n// Removes all children from this entry and returns an array of the\r\n// removed children.\r\nfunction forgetChildren(parent) {\r\n    var children = reusableEmptyArray;\r\n    if (parent.childValues.size > 0) {\r\n        children = [];\r\n        parent.childValues.forEach(function (value, child) {\r\n            forgetChild(parent, child);\r\n            children.push(child);\r\n        });\r\n    }\r\n    // After we forget all our children, this.dirtyChildren must be empty\r\n    // and therefore must have been reset to null.\r\n    assert(parent.dirtyChildren === null);\r\n    return children;\r\n}\r\nfunction forgetChild(parent, child) {\r\n    child.parents[\"delete\"](parent);\r\n    parent.childValues[\"delete\"](child);\r\n    removeDirtyChild(parent, child);\r\n}\r\nfunction maybeSubscribe(entry) {\r\n    if (typeof entry.subscribe === \"function\") {\r\n        try {\r\n            maybeUnsubscribe(entry); // Prevent double subscriptions.\r\n            entry.unsubscribe = entry.subscribe.apply(null, entry.args);\r\n        }\r\n        catch (e) {\r\n            // If this Entry has a subscribe function and it threw an exception\r\n            // (or an unsubscribe function it previously returned now throws),\r\n            // return false to indicate that we were not able to subscribe (or\r\n            // unsubscribe), and this Entry should remain dirty.\r\n            entry.setDirty();\r\n            return false;\r\n        }\r\n    }\r\n    // Returning true indicates either that there was no entry.subscribe\r\n    // function or that it succeeded.\r\n    return true;\r\n}\r\nfunction maybeUnsubscribe(entry) {\r\n    var unsubscribe = entry.unsubscribe;\r\n    if (typeof unsubscribe === \"function\") {\r\n        entry.unsubscribe = void 0;\r\n        unsubscribe();\r\n    }\r\n}\n\n// A trie data structure that holds object keys weakly, yet can also hold\r\n// non-object keys, unlike the native `WeakMap`.\r\nvar KeyTrie = /** @class */ (function () {\r\n    function KeyTrie(weakness) {\r\n        this.weakness = weakness;\r\n    }\r\n    KeyTrie.prototype.lookup = function () {\r\n        var array = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            array[_i] = arguments[_i];\r\n        }\r\n        return this.lookupArray(array);\r\n    };\r\n    KeyTrie.prototype.lookupArray = function (array) {\r\n        var node = this;\r\n        array.forEach(function (key) { return node = node.getChildTrie(key); });\r\n        return node.data || (node.data = Object.create(null));\r\n    };\r\n    KeyTrie.prototype.getChildTrie = function (key) {\r\n        var map = this.weakness && isObjRef(key)\r\n            ? this.weak || (this.weak = new WeakMap())\r\n            : this.strong || (this.strong = new Map());\r\n        var child = map.get(key);\r\n        if (!child)\r\n            map.set(key, child = new KeyTrie(this.weakness));\r\n        return child;\r\n    };\r\n    return KeyTrie;\r\n}());\r\nfunction isObjRef(value) {\r\n    switch (typeof value) {\r\n        case \"object\":\r\n            if (value === null)\r\n                break;\r\n        // Fall through to return true...\r\n        case \"function\":\r\n            return true;\r\n    }\r\n    return false;\r\n}\n\n// The defaultMakeCacheKey function is remarkably powerful, because it gives\r\n// a unique object for any shallow-identical list of arguments. If you need\r\n// to implement a custom makeCacheKey function, you may find it helpful to\r\n// delegate the final work to defaultMakeCacheKey, which is why we export it\r\n// here. However, you may want to avoid defaultMakeCacheKey if your runtime\r\n// does not support WeakMap, or you have the ability to return a string key.\r\n// In those cases, just write your own custom makeCacheKey functions.\r\nvar keyTrie = new KeyTrie(typeof WeakMap === \"function\");\r\nfunction defaultMakeCacheKey() {\r\n    var args = [];\r\n    for (var _i = 0; _i < arguments.length; _i++) {\r\n        args[_i] = arguments[_i];\r\n    }\r\n    return keyTrie.lookupArray(args);\r\n}\r\nfunction wrap(originalFunction, options) {\r\n    if (options === void 0) { options = Object.create(null); }\r\n    var cache = new Cache(options.max || Math.pow(2, 16), function (entry) { return entry.dispose(); });\r\n    var disposable = !!options.disposable;\r\n    var makeCacheKey = options.makeCacheKey || defaultMakeCacheKey;\r\n    function optimistic() {\r\n        if (disposable && !parentEntrySlot.hasValue()) {\r\n            // If there's no current parent computation, and this wrapped\r\n            // function is disposable (meaning we don't care about entry.value,\r\n            // just dependency tracking), then we can short-cut everything else\r\n            // in this function, because entry.recompute() is going to recycle\r\n            // the entry object without recomputing anything, anyway.\r\n            return void 0;\r\n        }\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        if (!key) {\r\n            return originalFunction.apply(null, arguments);\r\n        }\r\n        var args = Array.prototype.slice.call(arguments);\r\n        var entry = cache.get(key);\r\n        if (entry) {\r\n            entry.args = args;\r\n        }\r\n        else {\r\n            entry = new Entry(originalFunction, args);\r\n            cache.set(key, entry);\r\n            entry.subscribe = options.subscribe;\r\n            if (disposable) {\r\n                entry.reportOrphan = function () { return cache[\"delete\"](key); };\r\n            }\r\n        }\r\n        var value = entry.recompute();\r\n        // Move this entry to the front of the least-recently used queue,\r\n        // since we just finished computing its value.\r\n        cache.set(key, entry);\r\n        // Clean up any excess entries in the cache, but only if there is no\r\n        // active parent entry, meaning we're not in the middle of a larger\r\n        // computation that might be flummoxed by the cleaning.\r\n        if (!parentEntrySlot.hasValue()) {\r\n            cache.clean();\r\n        }\r\n        // If options.disposable is truthy, the caller of wrap is telling us\r\n        // they don't care about the result of entry.recompute(), so we should\r\n        // avoid returning the value, so it won't be accidentally used.\r\n        return disposable ? void 0 : value;\r\n    }\r\n    optimistic.dirty = function () {\r\n        var key = makeCacheKey.apply(null, arguments);\r\n        var child = key && cache.get(key);\r\n        if (child) {\r\n            child.setDirty();\r\n        }\r\n    };\r\n    return optimistic;\r\n}\n\nexport { defaultMakeCacheKey, KeyTrie, wrap };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __assign, __extends } from 'tslib';\nimport { ApolloCache } from 'apollo-cache';\nimport { isTest, getQueryDefinition, assign, getDefaultValues, isEqual, getMainDefinition, getFragmentDefinitions, createFragmentMap, shouldInclude, isField, resultKeyNameFromField, isInlineFragment, mergeDeepArray, argumentsObjectFromField, getDirectiveInfoFromField, maybeDeepFreeze, isIdValue, getStoreKeyName, toIdValue, isJsonValue, canUseWeakMap, getOperationDefinition, isProduction, storeKeyNameFromField, addTypenameToDocument } from 'apollo-utilities';\nimport { wrap as wrap$1, KeyTrie } from 'optimism';\nimport { invariant, InvariantError } from 'ts-invariant';\n\nvar testMap = new Map();\nif (testMap.set(1, 2) !== testMap) {\n    var set_1 = testMap.set;\n    Map.prototype.set = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        set_1.apply(this, args);\n        return this;\n    };\n}\nvar testSet = new Set();\nif (testSet.add(3) !== testSet) {\n    var add_1 = testSet.add;\n    Set.prototype.add = function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        add_1.apply(this, args);\n        return this;\n    };\n}\nvar frozen = {};\nif (typeof Object.freeze === 'function') {\n    Object.freeze(frozen);\n}\ntry {\n    testMap.set(frozen, frozen).delete(frozen);\n}\ncatch (_a) {\n    var wrap = function (method) {\n        return method && (function (obj) {\n            try {\n                testMap.set(obj, obj).delete(obj);\n            }\n            finally {\n                return method.call(Object, obj);\n            }\n        });\n    };\n    Object.freeze = wrap(Object.freeze);\n    Object.seal = wrap(Object.seal);\n    Object.preventExtensions = wrap(Object.preventExtensions);\n}\n\nvar haveWarned = false;\nfunction shouldWarn() {\n    var answer = !haveWarned;\n    if (!isTest()) {\n        haveWarned = true;\n    }\n    return answer;\n}\nvar HeuristicFragmentMatcher = (function () {\n    function HeuristicFragmentMatcher() {\n    }\n    HeuristicFragmentMatcher.prototype.ensureReady = function () {\n        return Promise.resolve();\n    };\n    HeuristicFragmentMatcher.prototype.canBypassInit = function () {\n        return true;\n    };\n    HeuristicFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        var obj = context.store.get(idValue.id);\n        if (!obj) {\n            return idValue.id === 'ROOT_QUERY';\n        }\n        if (!obj.__typename) {\n            if (shouldWarn()) {\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"You're using fragments in your queries, but either don't have the addTypename:\\n  true option set in Apollo Client, or you are trying to write a fragment to the store without the __typename.\\n   Please turn on the addTypename option and include __typename when writing fragments so that Apollo Client\\n   can accurately match fragments.\");\n                process.env.NODE_ENV === \"production\" || invariant.warn('Could not find __typename on Fragment ', typeCondition, obj);\n                process.env.NODE_ENV === \"production\" || invariant.warn(\"DEPRECATION WARNING: using fragments without __typename is unsupported behavior \" +\n                    \"and will be removed in future versions of Apollo client. You should fix this and set addTypename to true now.\");\n            }\n            return 'heuristic';\n        }\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        if (shouldWarn()) {\n            process.env.NODE_ENV === \"production\" || invariant.error('You are using the simple (heuristic) fragment matcher, but your ' +\n                'queries contain union or interface types. Apollo Client will not be ' +\n                'able to accurately map fragments. To make this error go away, use ' +\n                'the `IntrospectionFragmentMatcher` as described in the docs: ' +\n                'https://www.apollographql.com/docs/react/advanced/fragments.html#fragment-matcher');\n        }\n        return 'heuristic';\n    };\n    return HeuristicFragmentMatcher;\n}());\nvar IntrospectionFragmentMatcher = (function () {\n    function IntrospectionFragmentMatcher(options) {\n        if (options && options.introspectionQueryResultData) {\n            this.possibleTypesMap = this.parseIntrospectionResult(options.introspectionQueryResultData);\n            this.isReady = true;\n        }\n        else {\n            this.isReady = false;\n        }\n        this.match = this.match.bind(this);\n    }\n    IntrospectionFragmentMatcher.prototype.match = function (idValue, typeCondition, context) {\n        process.env.NODE_ENV === \"production\" ? invariant(this.isReady, 10) : invariant(this.isReady, 'FragmentMatcher.match() was called before FragmentMatcher.init()');\n        var obj = context.store.get(idValue.id);\n        if (!obj) {\n            return idValue.id === 'ROOT_QUERY';\n        }\n        process.env.NODE_ENV === \"production\" ? invariant(obj.__typename, 11) : invariant(obj.__typename, \"Cannot match fragment because __typename property is missing: \" + JSON.stringify(obj));\n        if (obj.__typename === typeCondition) {\n            return true;\n        }\n        var implementingTypes = this.possibleTypesMap[typeCondition];\n        if (implementingTypes && implementingTypes.indexOf(obj.__typename) > -1) {\n            return true;\n        }\n        return false;\n    };\n    IntrospectionFragmentMatcher.prototype.parseIntrospectionResult = function (introspectionResultData) {\n        var typeMap = {};\n        introspectionResultData.__schema.types.forEach(function (type) {\n            if (type.kind === 'UNION' || type.kind === 'INTERFACE') {\n                typeMap[type.name] = type.possibleTypes.map(function (implementingType) { return implementingType.name; });\n            }\n        });\n        return typeMap;\n    };\n    return IntrospectionFragmentMatcher;\n}());\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar DepTrackingCache = (function () {\n    function DepTrackingCache(data) {\n        if (data === void 0) { data = Object.create(null); }\n        var _this = this;\n        this.data = data;\n        this.depend = wrap$1(function (dataId) { return _this.data[dataId]; }, {\n            disposable: true,\n            makeCacheKey: function (dataId) {\n                return dataId;\n            }\n        });\n    }\n    DepTrackingCache.prototype.toObject = function () {\n        return this.data;\n    };\n    DepTrackingCache.prototype.get = function (dataId) {\n        this.depend(dataId);\n        return this.data[dataId];\n    };\n    DepTrackingCache.prototype.set = function (dataId, value) {\n        var oldValue = this.data[dataId];\n        if (value !== oldValue) {\n            this.data[dataId] = value;\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.delete = function (dataId) {\n        if (hasOwn.call(this.data, dataId)) {\n            delete this.data[dataId];\n            this.depend.dirty(dataId);\n        }\n    };\n    DepTrackingCache.prototype.clear = function () {\n        this.replace(null);\n    };\n    DepTrackingCache.prototype.replace = function (newData) {\n        var _this = this;\n        if (newData) {\n            Object.keys(newData).forEach(function (dataId) {\n                _this.set(dataId, newData[dataId]);\n            });\n            Object.keys(this.data).forEach(function (dataId) {\n                if (!hasOwn.call(newData, dataId)) {\n                    _this.delete(dataId);\n                }\n            });\n        }\n        else {\n            Object.keys(this.data).forEach(function (dataId) {\n                _this.delete(dataId);\n            });\n        }\n    };\n    return DepTrackingCache;\n}());\nfunction defaultNormalizedCacheFactory(seed) {\n    return new DepTrackingCache(seed);\n}\n\nvar StoreReader = (function () {\n    function StoreReader(_a) {\n        var _b = _a === void 0 ? {} : _a, _c = _b.cacheKeyRoot, cacheKeyRoot = _c === void 0 ? new KeyTrie(canUseWeakMap) : _c, _d = _b.freezeResults, freezeResults = _d === void 0 ? false : _d;\n        var _this = this;\n        var _e = this, executeStoreQuery = _e.executeStoreQuery, executeSelectionSet = _e.executeSelectionSet, executeSubSelectedArray = _e.executeSubSelectedArray;\n        this.freezeResults = freezeResults;\n        this.executeStoreQuery = wrap$1(function (options) {\n            return executeStoreQuery.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, fragmentMatcher = _a.fragmentMatcher;\n                if (contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(contextValue.store, query, fragmentMatcher, JSON.stringify(variableValues), rootValue.id);\n                }\n            }\n        });\n        this.executeSelectionSet = wrap$1(function (options) {\n            return executeSelectionSet.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(execContext.contextValue.store, selectionSet, execContext.fragmentMatcher, JSON.stringify(execContext.variableValues), rootValue.id);\n                }\n            }\n        });\n        this.executeSubSelectedArray = wrap$1(function (options) {\n            return executeSubSelectedArray.call(_this, options);\n        }, {\n            makeCacheKey: function (_a) {\n                var field = _a.field, array = _a.array, execContext = _a.execContext;\n                if (execContext.contextValue.store instanceof DepTrackingCache) {\n                    return cacheKeyRoot.lookup(execContext.contextValue.store, field, array, JSON.stringify(execContext.variableValues));\n                }\n            }\n        });\n    }\n    StoreReader.prototype.readQueryFromStore = function (options) {\n        var optsPatch = { returnPartialData: false };\n        return this.diffQueryAgainstStore(__assign({}, options, optsPatch)).result;\n    };\n    StoreReader.prototype.diffQueryAgainstStore = function (_a) {\n        var store = _a.store, query = _a.query, variables = _a.variables, previousResult = _a.previousResult, _b = _a.returnPartialData, returnPartialData = _b === void 0 ? true : _b, _c = _a.rootId, rootId = _c === void 0 ? 'ROOT_QUERY' : _c, fragmentMatcherFunction = _a.fragmentMatcherFunction, config = _a.config;\n        var queryDefinition = getQueryDefinition(query);\n        variables = assign({}, getDefaultValues(queryDefinition), variables);\n        var context = {\n            store: store,\n            dataIdFromObject: (config && config.dataIdFromObject) || null,\n            cacheRedirects: (config && config.cacheRedirects) || {},\n        };\n        var execResult = this.executeStoreQuery({\n            query: query,\n            rootValue: {\n                type: 'id',\n                id: rootId,\n                generated: true,\n                typename: 'Query',\n            },\n            contextValue: context,\n            variableValues: variables,\n            fragmentMatcher: fragmentMatcherFunction,\n        });\n        var hasMissingFields = execResult.missing && execResult.missing.length > 0;\n        if (hasMissingFields && !returnPartialData) {\n            execResult.missing.forEach(function (info) {\n                if (info.tolerable)\n                    return;\n                throw process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Can't find field \" + info.fieldName + \" on object \" + JSON.stringify(info.object, null, 2) + \".\");\n            });\n        }\n        if (previousResult) {\n            if (isEqual(previousResult, execResult.result)) {\n                execResult.result = previousResult;\n            }\n        }\n        return {\n            result: execResult.result,\n            complete: !hasMissingFields,\n        };\n    };\n    StoreReader.prototype.executeStoreQuery = function (_a) {\n        var query = _a.query, rootValue = _a.rootValue, contextValue = _a.contextValue, variableValues = _a.variableValues, _b = _a.fragmentMatcher, fragmentMatcher = _b === void 0 ? defaultFragmentMatcher : _b;\n        var mainDefinition = getMainDefinition(query);\n        var fragments = getFragmentDefinitions(query);\n        var fragmentMap = createFragmentMap(fragments);\n        var execContext = {\n            query: query,\n            fragmentMap: fragmentMap,\n            contextValue: contextValue,\n            variableValues: variableValues,\n            fragmentMatcher: fragmentMatcher,\n        };\n        return this.executeSelectionSet({\n            selectionSet: mainDefinition.selectionSet,\n            rootValue: rootValue,\n            execContext: execContext,\n        });\n    };\n    StoreReader.prototype.executeSelectionSet = function (_a) {\n        var _this = this;\n        var selectionSet = _a.selectionSet, rootValue = _a.rootValue, execContext = _a.execContext;\n        var fragmentMap = execContext.fragmentMap, contextValue = execContext.contextValue, variables = execContext.variableValues;\n        var finalResult = { result: null };\n        var objectsToMerge = [];\n        var object = contextValue.store.get(rootValue.id);\n        var typename = (object && object.__typename) ||\n            (rootValue.id === 'ROOT_QUERY' && 'Query') ||\n            void 0;\n        function handleMissing(result) {\n            var _a;\n            if (result.missing) {\n                finalResult.missing = finalResult.missing || [];\n                (_a = finalResult.missing).push.apply(_a, result.missing);\n            }\n            return result.result;\n        }\n        selectionSet.selections.forEach(function (selection) {\n            var _a;\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var fieldResult = handleMissing(_this.executeField(object, typename, selection, execContext));\n                if (typeof fieldResult !== 'undefined') {\n                    objectsToMerge.push((_a = {},\n                        _a[resultKeyNameFromField(selection)] = fieldResult,\n                        _a));\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = fragmentMap[selection.name.value];\n                    if (!fragment) {\n                        throw process.env.NODE_ENV === \"production\" ? new InvariantError(3) : new InvariantError(\"No fragment named \" + selection.name.value);\n                    }\n                }\n                var typeCondition = fragment.typeCondition.name.value;\n                var match = execContext.fragmentMatcher(rootValue, typeCondition, contextValue);\n                if (match) {\n                    var fragmentExecResult = _this.executeSelectionSet({\n                        selectionSet: fragment.selectionSet,\n                        rootValue: rootValue,\n                        execContext: execContext,\n                    });\n                    if (match === 'heuristic' && fragmentExecResult.missing) {\n                        fragmentExecResult = __assign({}, fragmentExecResult, { missing: fragmentExecResult.missing.map(function (info) {\n                                return __assign({}, info, { tolerable: true });\n                            }) });\n                    }\n                    objectsToMerge.push(handleMissing(fragmentExecResult));\n                }\n            }\n        });\n        finalResult.result = mergeDeepArray(objectsToMerge);\n        if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n            Object.freeze(finalResult.result);\n        }\n        return finalResult;\n    };\n    StoreReader.prototype.executeField = function (object, typename, field, execContext) {\n        var variables = execContext.variableValues, contextValue = execContext.contextValue;\n        var fieldName = field.name.value;\n        var args = argumentsObjectFromField(field, variables);\n        var info = {\n            resultKey: resultKeyNameFromField(field),\n            directives: getDirectiveInfoFromField(field, variables),\n        };\n        var readStoreResult = readStoreResolver(object, typename, fieldName, args, contextValue, info);\n        if (Array.isArray(readStoreResult.result)) {\n            return this.combineExecResults(readStoreResult, this.executeSubSelectedArray({\n                field: field,\n                array: readStoreResult.result,\n                execContext: execContext,\n            }));\n        }\n        if (!field.selectionSet) {\n            assertSelectionSetForIdValue(field, readStoreResult.result);\n            if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n                maybeDeepFreeze(readStoreResult);\n            }\n            return readStoreResult;\n        }\n        if (readStoreResult.result == null) {\n            return readStoreResult;\n        }\n        return this.combineExecResults(readStoreResult, this.executeSelectionSet({\n            selectionSet: field.selectionSet,\n            rootValue: readStoreResult.result,\n            execContext: execContext,\n        }));\n    };\n    StoreReader.prototype.combineExecResults = function () {\n        var execResults = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            execResults[_i] = arguments[_i];\n        }\n        var missing = null;\n        execResults.forEach(function (execResult) {\n            if (execResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, execResult.missing);\n            }\n        });\n        return {\n            result: execResults.pop().result,\n            missing: missing,\n        };\n    };\n    StoreReader.prototype.executeSubSelectedArray = function (_a) {\n        var _this = this;\n        var field = _a.field, array = _a.array, execContext = _a.execContext;\n        var missing = null;\n        function handleMissing(childResult) {\n            if (childResult.missing) {\n                missing = missing || [];\n                missing.push.apply(missing, childResult.missing);\n            }\n            return childResult.result;\n        }\n        array = array.map(function (item) {\n            if (item === null) {\n                return null;\n            }\n            if (Array.isArray(item)) {\n                return handleMissing(_this.executeSubSelectedArray({\n                    field: field,\n                    array: item,\n                    execContext: execContext,\n                }));\n            }\n            if (field.selectionSet) {\n                return handleMissing(_this.executeSelectionSet({\n                    selectionSet: field.selectionSet,\n                    rootValue: item,\n                    execContext: execContext,\n                }));\n            }\n            assertSelectionSetForIdValue(field, item);\n            return item;\n        });\n        if (this.freezeResults && process.env.NODE_ENV !== 'production') {\n            Object.freeze(array);\n        }\n        return { result: array, missing: missing };\n    };\n    return StoreReader;\n}());\nfunction assertSelectionSetForIdValue(field, value) {\n    if (!field.selectionSet && isIdValue(value)) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(4) : new InvariantError(\"Missing selection set for object of type \" + value.typename + \" returned for query field \" + field.name.value);\n    }\n}\nfunction defaultFragmentMatcher() {\n    return true;\n}\nfunction assertIdValue(idValue) {\n    process.env.NODE_ENV === \"production\" ? invariant(isIdValue(idValue), 5) : invariant(isIdValue(idValue), \"Encountered a sub-selection on the query, but the store doesn't have an object reference. This should never happen during normal use unless you have custom code that is directly manipulating the store; please file an issue.\");\n}\nfunction readStoreResolver(object, typename, fieldName, args, context, _a) {\n    var resultKey = _a.resultKey, directives = _a.directives;\n    var storeKeyName = fieldName;\n    if (args || directives) {\n        storeKeyName = getStoreKeyName(storeKeyName, args, directives);\n    }\n    var fieldValue = void 0;\n    if (object) {\n        fieldValue = object[storeKeyName];\n        if (typeof fieldValue === 'undefined' &&\n            context.cacheRedirects &&\n            typeof typename === 'string') {\n            var type = context.cacheRedirects[typename];\n            if (type) {\n                var resolver = type[fieldName];\n                if (resolver) {\n                    fieldValue = resolver(object, args, {\n                        getCacheKey: function (storeObj) {\n                            return toIdValue({\n                                id: context.dataIdFromObject(storeObj),\n                                typename: storeObj.__typename,\n                            });\n                        },\n                    });\n                }\n            }\n        }\n    }\n    if (typeof fieldValue === 'undefined') {\n        return {\n            result: fieldValue,\n            missing: [{\n                    object: object,\n                    fieldName: storeKeyName,\n                    tolerable: false,\n                }],\n        };\n    }\n    if (isJsonValue(fieldValue)) {\n        fieldValue = fieldValue.json;\n    }\n    return {\n        result: fieldValue,\n    };\n}\n\nvar ObjectCache = (function () {\n    function ObjectCache(data) {\n        if (data === void 0) { data = Object.create(null); }\n        this.data = data;\n    }\n    ObjectCache.prototype.toObject = function () {\n        return this.data;\n    };\n    ObjectCache.prototype.get = function (dataId) {\n        return this.data[dataId];\n    };\n    ObjectCache.prototype.set = function (dataId, value) {\n        this.data[dataId] = value;\n    };\n    ObjectCache.prototype.delete = function (dataId) {\n        this.data[dataId] = void 0;\n    };\n    ObjectCache.prototype.clear = function () {\n        this.data = Object.create(null);\n    };\n    ObjectCache.prototype.replace = function (newData) {\n        this.data = newData || Object.create(null);\n    };\n    return ObjectCache;\n}());\nfunction defaultNormalizedCacheFactory$1(seed) {\n    return new ObjectCache(seed);\n}\n\nvar WriteError = (function (_super) {\n    __extends(WriteError, _super);\n    function WriteError() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.type = 'WriteError';\n        return _this;\n    }\n    return WriteError;\n}(Error));\nfunction enhanceErrorWithDocument(error, document) {\n    var enhancedError = new WriteError(\"Error writing result to store for query:\\n \" + JSON.stringify(document));\n    enhancedError.message += '\\n' + error.message;\n    enhancedError.stack = error.stack;\n    return enhancedError;\n}\nvar StoreWriter = (function () {\n    function StoreWriter() {\n    }\n    StoreWriter.prototype.writeQueryToStore = function (_a) {\n        var query = _a.query, result = _a.result, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        return this.writeResultToStore({\n            dataId: 'ROOT_QUERY',\n            result: result,\n            document: query,\n            store: store,\n            variables: variables,\n            dataIdFromObject: dataIdFromObject,\n            fragmentMatcherFunction: fragmentMatcherFunction,\n        });\n    };\n    StoreWriter.prototype.writeResultToStore = function (_a) {\n        var dataId = _a.dataId, result = _a.result, document = _a.document, _b = _a.store, store = _b === void 0 ? defaultNormalizedCacheFactory() : _b, variables = _a.variables, dataIdFromObject = _a.dataIdFromObject, fragmentMatcherFunction = _a.fragmentMatcherFunction;\n        var operationDefinition = getOperationDefinition(document);\n        try {\n            return this.writeSelectionSetToStore({\n                result: result,\n                dataId: dataId,\n                selectionSet: operationDefinition.selectionSet,\n                context: {\n                    store: store,\n                    processedData: {},\n                    variables: assign({}, getDefaultValues(operationDefinition), variables),\n                    dataIdFromObject: dataIdFromObject,\n                    fragmentMap: createFragmentMap(getFragmentDefinitions(document)),\n                    fragmentMatcherFunction: fragmentMatcherFunction,\n                },\n            });\n        }\n        catch (e) {\n            throw enhanceErrorWithDocument(e, document);\n        }\n    };\n    StoreWriter.prototype.writeSelectionSetToStore = function (_a) {\n        var _this = this;\n        var result = _a.result, dataId = _a.dataId, selectionSet = _a.selectionSet, context = _a.context;\n        var variables = context.variables, store = context.store, fragmentMap = context.fragmentMap;\n        selectionSet.selections.forEach(function (selection) {\n            if (!shouldInclude(selection, variables)) {\n                return;\n            }\n            if (isField(selection)) {\n                var resultFieldKey = resultKeyNameFromField(selection);\n                var value = result[resultFieldKey];\n                if (typeof value !== 'undefined') {\n                    _this.writeFieldToStore({\n                        dataId: dataId,\n                        value: value,\n                        field: selection,\n                        context: context,\n                    });\n                }\n                else {\n                    var isDefered = false;\n                    var isClient = false;\n                    if (selection.directives && selection.directives.length) {\n                        isDefered = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'defer'; });\n                        isClient = selection.directives.some(function (directive) { return directive.name && directive.name.value === 'client'; });\n                    }\n                    if (!isDefered && !isClient && context.fragmentMatcherFunction) {\n                        process.env.NODE_ENV === \"production\" || invariant.warn(\"Missing field \" + resultFieldKey + \" in \" + JSON.stringify(result, null, 2).substring(0, 100));\n                    }\n                }\n            }\n            else {\n                var fragment = void 0;\n                if (isInlineFragment(selection)) {\n                    fragment = selection;\n                }\n                else {\n                    fragment = (fragmentMap || {})[selection.name.value];\n                    process.env.NODE_ENV === \"production\" ? invariant(fragment, 6) : invariant(fragment, \"No fragment named \" + selection.name.value + \".\");\n                }\n                var matches = true;\n                if (context.fragmentMatcherFunction && fragment.typeCondition) {\n                    var idValue = toIdValue({ id: 'self', typename: undefined });\n                    var fakeContext = {\n                        store: new ObjectCache({ self: result }),\n                        cacheRedirects: {},\n                    };\n                    var match = context.fragmentMatcherFunction(idValue, fragment.typeCondition.name.value, fakeContext);\n                    if (!isProduction() && match === 'heuristic') {\n                        process.env.NODE_ENV === \"production\" || invariant.error('WARNING: heuristic fragment matching going on!');\n                    }\n                    matches = !!match;\n                }\n                if (matches) {\n                    _this.writeSelectionSetToStore({\n                        result: result,\n                        selectionSet: fragment.selectionSet,\n                        dataId: dataId,\n                        context: context,\n                    });\n                }\n            }\n        });\n        return store;\n    };\n    StoreWriter.prototype.writeFieldToStore = function (_a) {\n        var field = _a.field, value = _a.value, dataId = _a.dataId, context = _a.context;\n        var _b;\n        var variables = context.variables, dataIdFromObject = context.dataIdFromObject, store = context.store;\n        var storeValue;\n        var storeObject;\n        var storeFieldName = storeKeyNameFromField(field, variables);\n        if (!field.selectionSet || value === null) {\n            storeValue =\n                value != null && typeof value === 'object'\n                    ?\n                        { type: 'json', json: value }\n                    :\n                        value;\n        }\n        else if (Array.isArray(value)) {\n            var generatedId = dataId + \".\" + storeFieldName;\n            storeValue = this.processArrayValue(value, generatedId, field.selectionSet, context);\n        }\n        else {\n            var valueDataId = dataId + \".\" + storeFieldName;\n            var generated = true;\n            if (!isGeneratedId(valueDataId)) {\n                valueDataId = '$' + valueDataId;\n            }\n            if (dataIdFromObject) {\n                var semanticId = dataIdFromObject(value);\n                process.env.NODE_ENV === \"production\" ? invariant(!semanticId || !isGeneratedId(semanticId), 7) : invariant(!semanticId || !isGeneratedId(semanticId), 'IDs returned by dataIdFromObject cannot begin with the \"$\" character.');\n                if (semanticId ||\n                    (typeof semanticId === 'number' && semanticId === 0)) {\n                    valueDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(valueDataId, field, context.processedData)) {\n                this.writeSelectionSetToStore({\n                    dataId: valueDataId,\n                    result: value,\n                    selectionSet: field.selectionSet,\n                    context: context,\n                });\n            }\n            var typename = value.__typename;\n            storeValue = toIdValue({ id: valueDataId, typename: typename }, generated);\n            storeObject = store.get(dataId);\n            var escapedId = storeObject && storeObject[storeFieldName];\n            if (escapedId !== storeValue && isIdValue(escapedId)) {\n                var hadTypename = escapedId.typename !== undefined;\n                var hasTypename = typename !== undefined;\n                var typenameChanged = hadTypename && hasTypename && escapedId.typename !== typename;\n                process.env.NODE_ENV === \"production\" ? invariant(!generated || escapedId.generated || typenameChanged, 8) : invariant(!generated || escapedId.generated || typenameChanged, \"Store error: the application attempted to write an object with no provided id but the store already contains an id of \" + escapedId.id + \" for this object. The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                process.env.NODE_ENV === \"production\" ? invariant(!hadTypename || hasTypename, 9) : invariant(!hadTypename || hasTypename, \"Store error: the application attempted to write an object with no provided typename but the store already contains an object with typename of \" + escapedId.typename + \" for the object of id \" + escapedId.id + \". The selectionSet that was trying to be written is:\\n\" + JSON.stringify(field));\n                if (escapedId.generated) {\n                    if (typenameChanged) {\n                        if (!generated) {\n                            store.delete(escapedId.id);\n                        }\n                    }\n                    else {\n                        mergeWithGenerated(escapedId.id, storeValue.id, store);\n                    }\n                }\n            }\n        }\n        storeObject = store.get(dataId);\n        if (!storeObject || !isEqual(storeValue, storeObject[storeFieldName])) {\n            store.set(dataId, __assign({}, storeObject, (_b = {}, _b[storeFieldName] = storeValue, _b)));\n        }\n    };\n    StoreWriter.prototype.processArrayValue = function (value, generatedId, selectionSet, context) {\n        var _this = this;\n        return value.map(function (item, index) {\n            if (item === null) {\n                return null;\n            }\n            var itemDataId = generatedId + \".\" + index;\n            if (Array.isArray(item)) {\n                return _this.processArrayValue(item, itemDataId, selectionSet, context);\n            }\n            var generated = true;\n            if (context.dataIdFromObject) {\n                var semanticId = context.dataIdFromObject(item);\n                if (semanticId) {\n                    itemDataId = semanticId;\n                    generated = false;\n                }\n            }\n            if (!isDataProcessed(itemDataId, selectionSet, context.processedData)) {\n                _this.writeSelectionSetToStore({\n                    dataId: itemDataId,\n                    result: item,\n                    selectionSet: selectionSet,\n                    context: context,\n                });\n            }\n            return toIdValue({ id: itemDataId, typename: item.__typename }, generated);\n        });\n    };\n    return StoreWriter;\n}());\nfunction isGeneratedId(id) {\n    return id[0] === '$';\n}\nfunction mergeWithGenerated(generatedKey, realKey, cache) {\n    if (generatedKey === realKey) {\n        return false;\n    }\n    var generated = cache.get(generatedKey);\n    var real = cache.get(realKey);\n    var madeChanges = false;\n    Object.keys(generated).forEach(function (key) {\n        var value = generated[key];\n        var realValue = real[key];\n        if (isIdValue(value) &&\n            isGeneratedId(value.id) &&\n            isIdValue(realValue) &&\n            !isEqual(value, realValue) &&\n            mergeWithGenerated(value.id, realValue.id, cache)) {\n            madeChanges = true;\n        }\n    });\n    cache.delete(generatedKey);\n    var newRealValue = __assign({}, generated, real);\n    if (isEqual(newRealValue, real)) {\n        return madeChanges;\n    }\n    cache.set(realKey, newRealValue);\n    return true;\n}\nfunction isDataProcessed(dataId, field, processedData) {\n    if (!processedData) {\n        return false;\n    }\n    if (processedData[dataId]) {\n        if (processedData[dataId].indexOf(field) >= 0) {\n            return true;\n        }\n        else {\n            processedData[dataId].push(field);\n        }\n    }\n    else {\n        processedData[dataId] = [field];\n    }\n    return false;\n}\n\nvar defaultConfig = {\n    fragmentMatcher: new HeuristicFragmentMatcher(),\n    dataIdFromObject: defaultDataIdFromObject,\n    addTypename: true,\n    resultCaching: true,\n    freezeResults: false,\n};\nfunction defaultDataIdFromObject(result) {\n    if (result.__typename) {\n        if (result.id !== undefined) {\n            return result.__typename + \":\" + result.id;\n        }\n        if (result._id !== undefined) {\n            return result.__typename + \":\" + result._id;\n        }\n    }\n    return null;\n}\nvar hasOwn$1 = Object.prototype.hasOwnProperty;\nvar OptimisticCacheLayer = (function (_super) {\n    __extends(OptimisticCacheLayer, _super);\n    function OptimisticCacheLayer(optimisticId, parent, transaction) {\n        var _this = _super.call(this, Object.create(null)) || this;\n        _this.optimisticId = optimisticId;\n        _this.parent = parent;\n        _this.transaction = transaction;\n        return _this;\n    }\n    OptimisticCacheLayer.prototype.toObject = function () {\n        return __assign({}, this.parent.toObject(), this.data);\n    };\n    OptimisticCacheLayer.prototype.get = function (dataId) {\n        return hasOwn$1.call(this.data, dataId)\n            ? this.data[dataId]\n            : this.parent.get(dataId);\n    };\n    return OptimisticCacheLayer;\n}(ObjectCache));\nvar InMemoryCache = (function (_super) {\n    __extends(InMemoryCache, _super);\n    function InMemoryCache(config) {\n        if (config === void 0) { config = {}; }\n        var _this = _super.call(this) || this;\n        _this.watches = new Set();\n        _this.typenameDocumentCache = new Map();\n        _this.cacheKeyRoot = new KeyTrie(canUseWeakMap);\n        _this.silenceBroadcast = false;\n        _this.config = __assign({}, defaultConfig, config);\n        if (_this.config.customResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('customResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating customResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.customResolvers;\n        }\n        if (_this.config.cacheResolvers) {\n            process.env.NODE_ENV === \"production\" || invariant.warn('cacheResolvers have been renamed to cacheRedirects. Please update your config as we will be deprecating cacheResolvers in the next major version.');\n            _this.config.cacheRedirects = _this.config.cacheResolvers;\n        }\n        _this.addTypename = _this.config.addTypename;\n        _this.data = _this.config.resultCaching\n            ? new DepTrackingCache()\n            : new ObjectCache();\n        _this.optimisticData = _this.data;\n        _this.storeWriter = new StoreWriter();\n        _this.storeReader = new StoreReader({\n            cacheKeyRoot: _this.cacheKeyRoot,\n            freezeResults: config.freezeResults,\n        });\n        var cache = _this;\n        var maybeBroadcastWatch = cache.maybeBroadcastWatch;\n        _this.maybeBroadcastWatch = wrap$1(function (c) {\n            return maybeBroadcastWatch.call(_this, c);\n        }, {\n            makeCacheKey: function (c) {\n                if (c.optimistic) {\n                    return;\n                }\n                if (c.previousResult) {\n                    return;\n                }\n                if (cache.data instanceof DepTrackingCache) {\n                    return cache.cacheKeyRoot.lookup(c.query, JSON.stringify(c.variables));\n                }\n            }\n        });\n        return _this;\n    }\n    InMemoryCache.prototype.restore = function (data) {\n        if (data)\n            this.data.replace(data);\n        return this;\n    };\n    InMemoryCache.prototype.extract = function (optimistic) {\n        if (optimistic === void 0) { optimistic = false; }\n        return (optimistic ? this.optimisticData : this.data).toObject();\n    };\n    InMemoryCache.prototype.read = function (options) {\n        if (typeof options.rootId === 'string' &&\n            typeof this.data.get(options.rootId) === 'undefined') {\n            return null;\n        }\n        return this.storeReader.readQueryFromStore({\n            store: options.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(options.query),\n            variables: options.variables,\n            rootId: options.rootId,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            previousResult: options.previousResult,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.write = function (write) {\n        this.storeWriter.writeResultToStore({\n            dataId: write.dataId,\n            result: write.result,\n            variables: write.variables,\n            document: this.transformDocument(write.query),\n            store: this.data,\n            dataIdFromObject: this.config.dataIdFromObject,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n        });\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.diff = function (query) {\n        return this.storeReader.diffQueryAgainstStore({\n            store: query.optimistic ? this.optimisticData : this.data,\n            query: this.transformDocument(query.query),\n            variables: query.variables,\n            returnPartialData: query.returnPartialData,\n            previousResult: query.previousResult,\n            fragmentMatcherFunction: this.config.fragmentMatcher.match,\n            config: this.config,\n        });\n    };\n    InMemoryCache.prototype.watch = function (watch) {\n        var _this = this;\n        this.watches.add(watch);\n        return function () {\n            _this.watches.delete(watch);\n        };\n    };\n    InMemoryCache.prototype.evict = function (query) {\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"eviction is not implemented on InMemory Cache\");\n    };\n    InMemoryCache.prototype.reset = function () {\n        this.data.clear();\n        this.broadcastWatches();\n        return Promise.resolve();\n    };\n    InMemoryCache.prototype.removeOptimistic = function (idToRemove) {\n        var toReapply = [];\n        var removedCount = 0;\n        var layer = this.optimisticData;\n        while (layer instanceof OptimisticCacheLayer) {\n            if (layer.optimisticId === idToRemove) {\n                ++removedCount;\n            }\n            else {\n                toReapply.push(layer);\n            }\n            layer = layer.parent;\n        }\n        if (removedCount > 0) {\n            this.optimisticData = layer;\n            while (toReapply.length > 0) {\n                var layer_1 = toReapply.pop();\n                this.performTransaction(layer_1.transaction, layer_1.optimisticId);\n            }\n            this.broadcastWatches();\n        }\n    };\n    InMemoryCache.prototype.performTransaction = function (transaction, optimisticId) {\n        var _a = this, data = _a.data, silenceBroadcast = _a.silenceBroadcast;\n        this.silenceBroadcast = true;\n        if (typeof optimisticId === 'string') {\n            this.data = this.optimisticData = new OptimisticCacheLayer(optimisticId, this.optimisticData, transaction);\n        }\n        try {\n            transaction(this);\n        }\n        finally {\n            this.silenceBroadcast = silenceBroadcast;\n            this.data = data;\n        }\n        this.broadcastWatches();\n    };\n    InMemoryCache.prototype.recordOptimisticTransaction = function (transaction, id) {\n        return this.performTransaction(transaction, id);\n    };\n    InMemoryCache.prototype.transformDocument = function (document) {\n        if (this.addTypename) {\n            var result = this.typenameDocumentCache.get(document);\n            if (!result) {\n                result = addTypenameToDocument(document);\n                this.typenameDocumentCache.set(document, result);\n                this.typenameDocumentCache.set(result, result);\n            }\n            return result;\n        }\n        return document;\n    };\n    InMemoryCache.prototype.broadcastWatches = function () {\n        var _this = this;\n        if (!this.silenceBroadcast) {\n            this.watches.forEach(function (c) { return _this.maybeBroadcastWatch(c); });\n        }\n    };\n    InMemoryCache.prototype.maybeBroadcastWatch = function (c) {\n        c.callback(this.diff({\n            query: c.query,\n            variables: c.variables,\n            previousResult: c.previousResult && c.previousResult(),\n            optimistic: c.optimistic,\n        }));\n    };\n    return InMemoryCache;\n}(ApolloCache));\n\nexport { HeuristicFragmentMatcher, InMemoryCache, IntrospectionFragmentMatcher, ObjectCache, StoreReader, StoreWriter, WriteError, assertIdValue, defaultDataIdFromObject, defaultNormalizedCacheFactory$1 as defaultNormalizedCacheFactory, enhanceErrorWithDocument };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __extends } from 'tslib';\n\nvar genericMessage = \"Invariant Violation\";\r\nvar _a = Object.setPrototypeOf, setPrototypeOf = _a === void 0 ? function (obj, proto) {\r\n    obj.__proto__ = proto;\r\n    return obj;\r\n} : _a;\r\nvar InvariantError = /** @class */ (function (_super) {\r\n    __extends(InvariantError, _super);\r\n    function InvariantError(message) {\r\n        if (message === void 0) { message = genericMessage; }\r\n        var _this = _super.call(this, typeof message === \"number\"\r\n            ? genericMessage + \": \" + message + \" (see https://github.com/apollographql/invariant-packages)\"\r\n            : message) || this;\r\n        _this.framesToPop = 1;\r\n        _this.name = genericMessage;\r\n        setPrototypeOf(_this, InvariantError.prototype);\r\n        return _this;\r\n    }\r\n    return InvariantError;\r\n}(Error));\r\nfunction invariant(condition, message) {\r\n    if (!condition) {\r\n        throw new InvariantError(message);\r\n    }\r\n}\r\n(function (invariant) {\r\n    function warn() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.warn.apply(console, args);\r\n    }\r\n    invariant.warn = warn;\r\n    function error() {\r\n        var args = [];\r\n        for (var _i = 0; _i < arguments.length; _i++) {\r\n            args[_i] = arguments[_i];\r\n        }\r\n        return console.error.apply(console, args);\r\n    }\r\n    invariant.error = error;\r\n})(invariant || (invariant = {}));\r\n// Code that uses ts-invariant with rollup-plugin-invariant may want to\r\n// import this process stub to avoid errors evaluating process.env.NODE_ENV.\r\nvar processStub = typeof process === \"object\" ? process : { env: {} };\r\nvar invariant$1 = invariant;\n\nexport default invariant$1;\nexport { InvariantError, invariant, processStub as process };\n","import { __assign } from 'tslib';\nimport { print } from 'graphql/language/printer';\nimport { InvariantError } from 'ts-invariant';\n\nvar defaultHttpOptions = {\n    includeQuery: true,\n    includeExtensions: false,\n};\nvar defaultHeaders = {\n    accept: '*/*',\n    'content-type': 'application/json',\n};\nvar defaultOptions = {\n    method: 'POST',\n};\nvar fallbackHttpConfig = {\n    http: defaultHttpOptions,\n    headers: defaultHeaders,\n    options: defaultOptions,\n};\nvar throwServerError = function (response, result, message) {\n    var error = new Error(message);\n    error.name = 'ServerError';\n    error.response = response;\n    error.statusCode = response.status;\n    error.result = result;\n    throw error;\n};\nvar parseAndCheckHttpResponse = function (operations) { return function (response) {\n    return (response\n        .text()\n        .then(function (bodyText) {\n        try {\n            return JSON.parse(bodyText);\n        }\n        catch (err) {\n            var parseError = err;\n            parseError.name = 'ServerParseError';\n            parseError.response = response;\n            parseError.statusCode = response.status;\n            parseError.bodyText = bodyText;\n            return Promise.reject(parseError);\n        }\n    })\n        .then(function (result) {\n        if (response.status >= 300) {\n            throwServerError(response, result, \"Response not successful: Received status code \" + response.status);\n        }\n        if (!Array.isArray(result) &&\n            !result.hasOwnProperty('data') &&\n            !result.hasOwnProperty('errors')) {\n            throwServerError(response, result, \"Server response was missing for query '\" + (Array.isArray(operations)\n                ? operations.map(function (op) { return op.operationName; })\n                : operations.operationName) + \"'.\");\n        }\n        return result;\n    }));\n}; };\nvar checkFetcher = function (fetcher) {\n    if (!fetcher && typeof fetch === 'undefined') {\n        var library = 'unfetch';\n        if (typeof window === 'undefined')\n            library = 'node-fetch';\n        throw process.env.NODE_ENV === \"production\" ? new InvariantError(1) : new InvariantError(\"\\nfetch is not found globally and no fetcher passed, to fix pass a fetch for\\nyour environment like https://www.npmjs.com/package/\" + library + \".\\n\\nFor example:\\nimport fetch from '\" + library + \"';\\nimport { createHttpLink } from 'apollo-link-http';\\n\\nconst link = createHttpLink({ uri: '/graphql', fetch: fetch });\");\n    }\n};\nvar createSignalIfSupported = function () {\n    if (typeof AbortController === 'undefined')\n        return { controller: false, signal: false };\n    var controller = new AbortController();\n    var signal = controller.signal;\n    return { controller: controller, signal: signal };\n};\nvar selectHttpOptionsAndBody = function (operation, fallbackConfig) {\n    var configs = [];\n    for (var _i = 2; _i < arguments.length; _i++) {\n        configs[_i - 2] = arguments[_i];\n    }\n    var options = __assign({}, fallbackConfig.options, { headers: fallbackConfig.headers, credentials: fallbackConfig.credentials });\n    var http = fallbackConfig.http;\n    configs.forEach(function (config) {\n        options = __assign({}, options, config.options, { headers: __assign({}, options.headers, config.headers) });\n        if (config.credentials)\n            options.credentials = config.credentials;\n        http = __assign({}, http, config.http);\n    });\n    var operationName = operation.operationName, extensions = operation.extensions, variables = operation.variables, query = operation.query;\n    var body = { operationName: operationName, variables: variables };\n    if (http.includeExtensions)\n        body.extensions = extensions;\n    if (http.includeQuery)\n        body.query = print(query);\n    return {\n        options: options,\n        body: body,\n    };\n};\nvar serializeFetchParameter = function (p, label) {\n    var serialized;\n    try {\n        serialized = JSON.stringify(p);\n    }\n    catch (e) {\n        var parseError = process.env.NODE_ENV === \"production\" ? new InvariantError(2) : new InvariantError(\"Network request failed. \" + label + \" is not serializable: \" + e.message);\n        parseError.parseError = e;\n        throw parseError;\n    }\n    return serialized;\n};\nvar selectURI = function (operation, fallbackURI) {\n    var context = operation.getContext();\n    var contextURI = context.uri;\n    if (contextURI) {\n        return contextURI;\n    }\n    else if (typeof fallbackURI === 'function') {\n        return fallbackURI(operation);\n    }\n    else {\n        return fallbackURI || '/graphql';\n    }\n};\n\nexport { fallbackHttpConfig, throwServerError, parseAndCheckHttpResponse, checkFetcher, createSignalIfSupported, selectHttpOptionsAndBody, serializeFetchParameter, selectURI };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __rest, __assign, __extends } from 'tslib';\nimport { ApolloLink, fromError, Observable } from 'apollo-link';\nimport { checkFetcher, selectURI, selectHttpOptionsAndBody, fallbackHttpConfig, createSignalIfSupported, serializeFetchParameter, parseAndCheckHttpResponse } from 'apollo-link-http-common';\n\nvar createHttpLink = function (linkOptions) {\n    if (linkOptions === void 0) { linkOptions = {}; }\n    var _a = linkOptions.uri, uri = _a === void 0 ? '/graphql' : _a, fetcher = linkOptions.fetch, includeExtensions = linkOptions.includeExtensions, useGETForQueries = linkOptions.useGETForQueries, requestOptions = __rest(linkOptions, [\"uri\", \"fetch\", \"includeExtensions\", \"useGETForQueries\"]);\n    checkFetcher(fetcher);\n    if (!fetcher) {\n        fetcher = fetch;\n    }\n    var linkConfig = {\n        http: { includeExtensions: includeExtensions },\n        options: requestOptions.fetchOptions,\n        credentials: requestOptions.credentials,\n        headers: requestOptions.headers,\n    };\n    return new ApolloLink(function (operation) {\n        var chosenURI = selectURI(operation, uri);\n        var context = operation.getContext();\n        var clientAwarenessHeaders = {};\n        if (context.clientAwareness) {\n            var _a = context.clientAwareness, name_1 = _a.name, version = _a.version;\n            if (name_1) {\n                clientAwarenessHeaders['apollographql-client-name'] = name_1;\n            }\n            if (version) {\n                clientAwarenessHeaders['apollographql-client-version'] = version;\n            }\n        }\n        var contextHeaders = __assign({}, clientAwarenessHeaders, context.headers);\n        var contextConfig = {\n            http: context.http,\n            options: context.fetchOptions,\n            credentials: context.credentials,\n            headers: contextHeaders,\n        };\n        var _b = selectHttpOptionsAndBody(operation, fallbackHttpConfig, linkConfig, contextConfig), options = _b.options, body = _b.body;\n        var controller;\n        if (!options.signal) {\n            var _c = createSignalIfSupported(), _controller = _c.controller, signal = _c.signal;\n            controller = _controller;\n            if (controller)\n                options.signal = signal;\n        }\n        var definitionIsMutation = function (d) {\n            return d.kind === 'OperationDefinition' && d.operation === 'mutation';\n        };\n        if (useGETForQueries &&\n            !operation.query.definitions.some(definitionIsMutation)) {\n            options.method = 'GET';\n        }\n        if (options.method === 'GET') {\n            var _d = rewriteURIForGET(chosenURI, body), newURI = _d.newURI, parseError = _d.parseError;\n            if (parseError) {\n                return fromError(parseError);\n            }\n            chosenURI = newURI;\n        }\n        else {\n            try {\n                options.body = serializeFetchParameter(body, 'Payload');\n            }\n            catch (parseError) {\n                return fromError(parseError);\n            }\n        }\n        return new Observable(function (observer) {\n            fetcher(chosenURI, options)\n                .then(function (response) {\n                operation.setContext({ response: response });\n                return response;\n            })\n                .then(parseAndCheckHttpResponse(operation))\n                .then(function (result) {\n                observer.next(result);\n                observer.complete();\n                return result;\n            })\n                .catch(function (err) {\n                if (err.name === 'AbortError')\n                    return;\n                if (err.result && err.result.errors && err.result.data) {\n                    observer.next(err.result);\n                }\n                observer.error(err);\n            });\n            return function () {\n                if (controller)\n                    controller.abort();\n            };\n        });\n    });\n};\nfunction rewriteURIForGET(chosenURI, body) {\n    var queryParams = [];\n    var addQueryParam = function (key, value) {\n        queryParams.push(key + \"=\" + encodeURIComponent(value));\n    };\n    if ('query' in body) {\n        addQueryParam('query', body.query);\n    }\n    if (body.operationName) {\n        addQueryParam('operationName', body.operationName);\n    }\n    if (body.variables) {\n        var serializedVariables = void 0;\n        try {\n            serializedVariables = serializeFetchParameter(body.variables, 'Variables map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('variables', serializedVariables);\n    }\n    if (body.extensions) {\n        var serializedExtensions = void 0;\n        try {\n            serializedExtensions = serializeFetchParameter(body.extensions, 'Extensions map');\n        }\n        catch (parseError) {\n            return { parseError: parseError };\n        }\n        addQueryParam('extensions', serializedExtensions);\n    }\n    var fragment = '', preFragment = chosenURI;\n    var fragmentStart = chosenURI.indexOf('#');\n    if (fragmentStart !== -1) {\n        fragment = chosenURI.substr(fragmentStart);\n        preFragment = chosenURI.substr(0, fragmentStart);\n    }\n    var queryParamsPrefix = preFragment.indexOf('?') === -1 ? '?' : '&';\n    var newURI = preFragment + queryParamsPrefix + queryParams.join('&') + fragment;\n    return { newURI: newURI };\n}\nvar HttpLink = (function (_super) {\n    __extends(HttpLink, _super);\n    function HttpLink(opts) {\n        return _super.call(this, createHttpLink(opts).request) || this;\n    }\n    return HttpLink;\n}(ApolloLink));\n\nexport { createHttpLink, HttpLink };\n//# sourceMappingURL=bundle.esm.js.map\n","import { __extends } from 'tslib';\nimport { ApolloLink, Observable } from 'apollo-link';\n\nfunction onError(errorHandler) {\n    return new ApolloLink(function (operation, forward) {\n        return new Observable(function (observer) {\n            var sub;\n            var retriedSub;\n            var retriedResult;\n            try {\n                sub = forward(operation).subscribe({\n                    next: function (result) {\n                        if (result.errors) {\n                            retriedResult = errorHandler({\n                                graphQLErrors: result.errors,\n                                response: result,\n                                operation: operation,\n                                forward: forward,\n                            });\n                            if (retriedResult) {\n                                retriedSub = retriedResult.subscribe({\n                                    next: observer.next.bind(observer),\n                                    error: observer.error.bind(observer),\n                                    complete: observer.complete.bind(observer),\n                                });\n                                return;\n                            }\n                        }\n                        observer.next(result);\n                    },\n                    error: function (networkError) {\n                        retriedResult = errorHandler({\n                            operation: operation,\n                            networkError: networkError,\n                            graphQLErrors: networkError &&\n                                networkError.result &&\n                                networkError.result.errors,\n                            forward: forward,\n                        });\n                        if (retriedResult) {\n                            retriedSub = retriedResult.subscribe({\n                                next: observer.next.bind(observer),\n                                error: observer.error.bind(observer),\n                                complete: observer.complete.bind(observer),\n                            });\n                            return;\n                        }\n                        observer.error(networkError);\n                    },\n                    complete: function () {\n                        if (!retriedResult) {\n                            observer.complete.bind(observer)();\n                        }\n                    },\n                });\n            }\n            catch (e) {\n                errorHandler({ networkError: e, operation: operation, forward: forward });\n                observer.error(e);\n            }\n            return function () {\n                if (sub)\n                    sub.unsubscribe();\n                if (retriedSub)\n                    sub.unsubscribe();\n            };\n        });\n    });\n}\nvar ErrorLink = (function (_super) {\n    __extends(ErrorLink, _super);\n    function ErrorLink(errorHandler) {\n        var _this = _super.call(this) || this;\n        _this.link = onError(errorHandler);\n        return _this;\n    }\n    ErrorLink.prototype.request = function (operation, forward) {\n        return this.link.request(operation, forward);\n    };\n    return ErrorLink;\n}(ApolloLink));\n\nexport { onError, ErrorLink };\n//# sourceMappingURL=bundle.esm.js.map\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport nodejsCustomInspectSymbol from './nodejsCustomInspectSymbol';\n/**\n * The `defineToJSON()` function defines toJSON() and inspect() prototype\n * methods, if no function provided they become aliases for toString().\n */\n\nexport default function defineToJSON( // eslint-disable-next-line flowtype/no-weak-types\nclassObject) {\n  var fn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : classObject.prototype.toString;\n  classObject.prototype.toJSON = fn;\n  classObject.prototype.inspect = fn;\n\n  if (nodejsCustomInspectSymbol) {\n    classObject.prototype[nodejsCustomInspectSymbol] = fn;\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nexport default function invariant(condition, message) {\n  /* istanbul ignore else */\n  if (!condition) {\n    throw new Error(message);\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport invariant from '../jsutils/invariant';\nimport defineToStringTag from '../jsutils/defineToStringTag';\n\n/**\n * A representation of source input to GraphQL.\n * `name` and `locationOffset` are optional. They are useful for clients who\n * store GraphQL documents in source files; for example, if the GraphQL input\n * starts at line 40 in a file named Foo.graphql, it might be useful for name to\n * be \"Foo.graphql\" and location to be `{ line: 40, column: 0 }`.\n * line and column in locationOffset are 1-indexed\n */\nexport var Source = function Source(body, name, locationOffset) {\n  this.body = body;\n  this.name = name || 'GraphQL request';\n  this.locationOffset = locationOffset || {\n    line: 1,\n    column: 1\n  };\n  !(this.locationOffset.line > 0) ? invariant(0, 'line in locationOffset is 1-indexed and must be positive') : void 0;\n  !(this.locationOffset.column > 0) ? invariant(0, 'column in locationOffset is 1-indexed and must be positive') : void 0;\n}; // Conditionally apply `[Symbol.toStringTag]` if `Symbol`s are supported\n\ndefineToStringTag(Source);","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The `defineToStringTag()` function checks first to see if the runtime\n * supports the `Symbol` class and then if the `Symbol.toStringTag` constant\n * is defined as a `Symbol` instance. If both conditions are met, the\n * Symbol.toStringTag property is defined as a getter that returns the\n * supplied class constructor's name.\n *\n * @method defineToStringTag\n *\n * @param {Class<any>} classObject a class such as Object, String, Number but\n * typically one of your own creation through the class keyword; `class A {}`,\n * for example.\n */\nexport default function defineToStringTag(classObject) {\n  if (typeof Symbol === 'function' && Symbol.toStringTag) {\n    Object.defineProperty(classObject.prototype, Symbol.toStringTag, {\n      get: function get() {\n        return this.constructor.name;\n      }\n    });\n  }\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  var lineRegexp = /\\r\\n|[\\n\\r]/g;\n  var line = 1;\n  var column = position + 1;\n  var match;\n\n  while ((match = lineRegexp.exec(source.body)) && match.index < position) {\n    line += 1;\n    column = position + 1 - (match.index + match[0].length);\n  }\n\n  return {\n    line: line,\n    column: column\n  };\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { getLocation } from '../language/location';\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n */\nexport function printError(error) {\n  var printedLocations = [];\n\n  if (error.nodes) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = error.nodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var node = _step.value;\n\n        if (node.loc) {\n          printedLocations.push(highlightSourceAtLocation(node.loc.source, getLocation(node.loc.source, node.loc.start)));\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else if (error.source && error.locations) {\n    var source = error.source;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = error.locations[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var location = _step2.value;\n        printedLocations.push(highlightSourceAtLocation(source, location));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return printedLocations.length === 0 ? error.message : [error.message].concat(printedLocations).join('\\n\\n') + '\\n';\n}\n/**\n * Render a helpful description of the location of the error in the GraphQL\n * Source document.\n */\n\nfunction highlightSourceAtLocation(source, location) {\n  var firstLineColumnOffset = source.locationOffset.column - 1;\n  var body = whitespace(firstLineColumnOffset) + source.body;\n  var lineIndex = location.line - 1;\n  var lineOffset = source.locationOffset.line - 1;\n  var lineNum = location.line + lineOffset;\n  var columnOffset = location.line === 1 ? firstLineColumnOffset : 0;\n  var columnNum = location.column + columnOffset;\n  var lines = body.split(/\\r\\n|[\\n\\r]/g);\n  return \"\".concat(source.name, \" (\").concat(lineNum, \":\").concat(columnNum, \")\\n\") + printPrefixedLines([// Lines specified like this: [\"prefix\", \"string\"],\n  [\"\".concat(lineNum - 1, \": \"), lines[lineIndex - 1]], [\"\".concat(lineNum, \": \"), lines[lineIndex]], ['', whitespace(columnNum - 1) + '^'], [\"\".concat(lineNum + 1, \": \"), lines[lineIndex + 1]]]);\n}\n\nfunction printPrefixedLines(lines) {\n  var existingLines = lines.filter(function (_ref) {\n    var _ = _ref[0],\n        line = _ref[1];\n    return line !== undefined;\n  });\n  var padLen = 0;\n  var _iteratorNormalCompletion3 = true;\n  var _didIteratorError3 = false;\n  var _iteratorError3 = undefined;\n\n  try {\n    for (var _iterator3 = existingLines[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n      var _ref4 = _step3.value;\n      var prefix = _ref4[0];\n      padLen = Math.max(padLen, prefix.length);\n    }\n  } catch (err) {\n    _didIteratorError3 = true;\n    _iteratorError3 = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n        _iterator3.return();\n      }\n    } finally {\n      if (_didIteratorError3) {\n        throw _iteratorError3;\n      }\n    }\n  }\n\n  return existingLines.map(function (_ref3) {\n    var prefix = _ref3[0],\n        line = _ref3[1];\n    return lpad(padLen, prefix) + line;\n  }).join('\\n');\n}\n\nfunction whitespace(len) {\n  return Array(len + 1).join(' ');\n}\n\nfunction lpad(len, str) {\n  return whitespace(len - str.length) + str;\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { printError } from './printError';\nimport { getLocation } from '../language/location';\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\n\nexport function GraphQLError( // eslint-disable-line no-redeclare\nmessage, nodes, source, positions, path, originalError, extensions) {\n  // Compute list of blame nodes.\n  var _nodes = Array.isArray(nodes) ? nodes.length !== 0 ? nodes : undefined : nodes ? [nodes] : undefined; // Compute locations in the source for the given nodes/positions.\n\n\n  var _source = source;\n\n  if (!_source && _nodes) {\n    var node = _nodes[0];\n    _source = node && node.loc && node.loc.source;\n  }\n\n  var _positions = positions;\n\n  if (!_positions && _nodes) {\n    _positions = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(node.loc.start);\n      }\n\n      return list;\n    }, []);\n  }\n\n  if (_positions && _positions.length === 0) {\n    _positions = undefined;\n  }\n\n  var _locations;\n\n  if (positions && source) {\n    _locations = positions.map(function (pos) {\n      return getLocation(source, pos);\n    });\n  } else if (_nodes) {\n    _locations = _nodes.reduce(function (list, node) {\n      if (node.loc) {\n        list.push(getLocation(node.loc.source, node.loc.start));\n      }\n\n      return list;\n    }, []);\n  }\n\n  var _extensions = extensions || originalError && originalError.extensions;\n\n  Object.defineProperties(this, {\n    message: {\n      value: message,\n      // By being enumerable, JSON.stringify will include `message` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: true,\n      writable: true\n    },\n    locations: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _locations || undefined,\n      // By being enumerable, JSON.stringify will include `locations` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_locations)\n    },\n    path: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: path || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(path)\n    },\n    nodes: {\n      value: _nodes || undefined\n    },\n    source: {\n      value: _source || undefined\n    },\n    positions: {\n      value: _positions || undefined\n    },\n    originalError: {\n      value: originalError\n    },\n    extensions: {\n      // Coercing falsey values to undefined ensures they will not be included\n      // in JSON.stringify() when not provided.\n      value: _extensions || undefined,\n      // By being enumerable, JSON.stringify will include `path` in the\n      // resulting output. This ensures that the simplest possible GraphQL\n      // service adheres to the spec.\n      enumerable: Boolean(_extensions)\n    }\n  }); // Include (non-enumerable) stack trace.\n\n  if (originalError && originalError.stack) {\n    Object.defineProperty(this, 'stack', {\n      value: originalError.stack,\n      writable: true,\n      configurable: true\n    });\n  } else if (Error.captureStackTrace) {\n    Error.captureStackTrace(this, GraphQLError);\n  } else {\n    Object.defineProperty(this, 'stack', {\n      value: Error().stack,\n      writable: true,\n      configurable: true\n    });\n  }\n}\nGraphQLError.prototype = Object.create(Error.prototype, {\n  constructor: {\n    value: GraphQLError\n  },\n  name: {\n    value: 'GraphQLError'\n  },\n  toString: {\n    value: function toString() {\n      return printError(this);\n    }\n  }\n});","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport { GraphQLError } from './GraphQLError';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(\"Syntax Error: \".concat(description), undefined, source, [position]);\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { syntaxError } from '../error';\nimport { dedentBlockStringValue } from './blockString';\n/**\n * Given a Source object, this returns a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport function createLexer(source, options) {\n  var startOfFileToken = new Tok(TokenKind.SOF, 0, 0, 0, 0, null);\n  var lexer = {\n    source: source,\n    options: options,\n    lastToken: startOfFileToken,\n    token: startOfFileToken,\n    line: 1,\n    lineStart: 0,\n    advance: advanceLexer,\n    lookahead: lookahead\n  };\n  return lexer;\n}\n\nfunction advanceLexer() {\n  this.lastToken = this.token;\n  var token = this.token = this.lookahead();\n  return token;\n}\n\nfunction lookahead() {\n  var token = this.token;\n\n  if (token.kind !== TokenKind.EOF) {\n    do {\n      // Note: next is only mutable during parsing, so we cast to allow this.\n      token = token.next || (token.next = readToken(this, token));\n    } while (token.kind === TokenKind.COMMENT);\n  }\n\n  return token;\n}\n/**\n * The return type of createLexer.\n */\n\n\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport var TokenKind = Object.freeze({\n  SOF: '<SOF>',\n  EOF: '<EOF>',\n  BANG: '!',\n  DOLLAR: '$',\n  AMP: '&',\n  PAREN_L: '(',\n  PAREN_R: ')',\n  SPREAD: '...',\n  COLON: ':',\n  EQUALS: '=',\n  AT: '@',\n  BRACKET_L: '[',\n  BRACKET_R: ']',\n  BRACE_L: '{',\n  PIPE: '|',\n  BRACE_R: '}',\n  NAME: 'Name',\n  INT: 'Int',\n  FLOAT: 'Float',\n  STRING: 'String',\n  BLOCK_STRING: 'BlockString',\n  COMMENT: 'Comment'\n});\n/**\n * The enum type representing the token kinds values.\n */\n\n// @internal\nexport function isPunctuatorToken(token) {\n  var kind = token.kind;\n  return kind === TokenKind.BANG || kind === TokenKind.DOLLAR || kind === TokenKind.AMP || kind === TokenKind.PAREN_L || kind === TokenKind.PAREN_R || kind === TokenKind.SPREAD || kind === TokenKind.COLON || kind === TokenKind.EQUALS || kind === TokenKind.AT || kind === TokenKind.BRACKET_L || kind === TokenKind.BRACKET_R || kind === TokenKind.BRACE_L || kind === TokenKind.PIPE || kind === TokenKind.BRACE_R;\n}\n/**\n * A helper function to describe a token as a string for debugging\n */\n\nexport function getTokenDesc(token) {\n  var value = token.value;\n  return value ? \"\".concat(token.kind, \" \\\"\").concat(value, \"\\\"\") : token.kind;\n}\n/**\n * Helper function for constructing the Token object.\n */\n\nfunction Tok(kind, start, end, line, column, prev, value) {\n  this.kind = kind;\n  this.start = start;\n  this.end = end;\n  this.line = line;\n  this.column = column;\n  this.value = value;\n  this.prev = prev;\n  this.next = null;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Tok, function () {\n  return {\n    kind: this.kind,\n    value: this.value,\n    line: this.line,\n    column: this.column\n  };\n});\n\nfunction printCharCode(code) {\n  return (// NaN/undefined represents access beyond the end of the file.\n    isNaN(code) ? TokenKind.EOF : // Trust JSON for ASCII.\n    code < 0x007f ? JSON.stringify(String.fromCharCode(code)) : // Otherwise print the escaped form.\n    \"\\\"\\\\u\".concat(('00' + code.toString(16).toUpperCase()).slice(-4), \"\\\"\")\n  );\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\n\nfunction readToken(lexer, prev) {\n  var source = lexer.source;\n  var body = source.body;\n  var bodyLength = body.length;\n  var pos = positionAfterWhitespace(body, prev.end, lexer);\n  var line = lexer.line;\n  var col = 1 + pos - lexer.lineStart;\n\n  if (pos >= bodyLength) {\n    return new Tok(TokenKind.EOF, bodyLength, bodyLength, line, col, prev);\n  }\n\n  var code = body.charCodeAt(pos); // SourceCharacter\n\n  switch (code) {\n    // !\n    case 33:\n      return new Tok(TokenKind.BANG, pos, pos + 1, line, col, prev);\n    // #\n\n    case 35:\n      return readComment(source, pos, line, col, prev);\n    // $\n\n    case 36:\n      return new Tok(TokenKind.DOLLAR, pos, pos + 1, line, col, prev);\n    // &\n\n    case 38:\n      return new Tok(TokenKind.AMP, pos, pos + 1, line, col, prev);\n    // (\n\n    case 40:\n      return new Tok(TokenKind.PAREN_L, pos, pos + 1, line, col, prev);\n    // )\n\n    case 41:\n      return new Tok(TokenKind.PAREN_R, pos, pos + 1, line, col, prev);\n    // .\n\n    case 46:\n      if (body.charCodeAt(pos + 1) === 46 && body.charCodeAt(pos + 2) === 46) {\n        return new Tok(TokenKind.SPREAD, pos, pos + 3, line, col, prev);\n      }\n\n      break;\n    // :\n\n    case 58:\n      return new Tok(TokenKind.COLON, pos, pos + 1, line, col, prev);\n    // =\n\n    case 61:\n      return new Tok(TokenKind.EQUALS, pos, pos + 1, line, col, prev);\n    // @\n\n    case 64:\n      return new Tok(TokenKind.AT, pos, pos + 1, line, col, prev);\n    // [\n\n    case 91:\n      return new Tok(TokenKind.BRACKET_L, pos, pos + 1, line, col, prev);\n    // ]\n\n    case 93:\n      return new Tok(TokenKind.BRACKET_R, pos, pos + 1, line, col, prev);\n    // {\n\n    case 123:\n      return new Tok(TokenKind.BRACE_L, pos, pos + 1, line, col, prev);\n    // |\n\n    case 124:\n      return new Tok(TokenKind.PIPE, pos, pos + 1, line, col, prev);\n    // }\n\n    case 125:\n      return new Tok(TokenKind.BRACE_R, pos, pos + 1, line, col, prev);\n    // A-Z _ a-z\n\n    case 65:\n    case 66:\n    case 67:\n    case 68:\n    case 69:\n    case 70:\n    case 71:\n    case 72:\n    case 73:\n    case 74:\n    case 75:\n    case 76:\n    case 77:\n    case 78:\n    case 79:\n    case 80:\n    case 81:\n    case 82:\n    case 83:\n    case 84:\n    case 85:\n    case 86:\n    case 87:\n    case 88:\n    case 89:\n    case 90:\n    case 95:\n    case 97:\n    case 98:\n    case 99:\n    case 100:\n    case 101:\n    case 102:\n    case 103:\n    case 104:\n    case 105:\n    case 106:\n    case 107:\n    case 108:\n    case 109:\n    case 110:\n    case 111:\n    case 112:\n    case 113:\n    case 114:\n    case 115:\n    case 116:\n    case 117:\n    case 118:\n    case 119:\n    case 120:\n    case 121:\n    case 122:\n      return readName(source, pos, line, col, prev);\n    // - 0-9\n\n    case 45:\n    case 48:\n    case 49:\n    case 50:\n    case 51:\n    case 52:\n    case 53:\n    case 54:\n    case 55:\n    case 56:\n    case 57:\n      return readNumber(source, pos, code, line, col, prev);\n    // \"\n\n    case 34:\n      if (body.charCodeAt(pos + 1) === 34 && body.charCodeAt(pos + 2) === 34) {\n        return readBlockString(source, pos, line, col, prev, lexer);\n      }\n\n      return readString(source, pos, line, col, prev);\n  }\n\n  throw syntaxError(source, pos, unexpectedCharacterMessage(code));\n}\n/**\n * Report a message that an unexpected character was encountered.\n */\n\n\nfunction unexpectedCharacterMessage(code) {\n  if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n    return \"Cannot contain the invalid character \".concat(printCharCode(code), \".\");\n  }\n\n  if (code === 39) {\n    // '\n    return \"Unexpected single quote character ('), did you mean to use \" + 'a double quote (\")?';\n  }\n\n  return \"Cannot parse the unexpected character \".concat(printCharCode(code), \".\");\n}\n/**\n * Reads from body starting at startPosition until it finds a non-whitespace\n * character, then returns the position of that character for lexing.\n */\n\n\nfunction positionAfterWhitespace(body, startPosition, lexer) {\n  var bodyLength = body.length;\n  var position = startPosition;\n\n  while (position < bodyLength) {\n    var code = body.charCodeAt(position); // tab | space | comma | BOM\n\n    if (code === 9 || code === 32 || code === 44 || code === 0xfeff) {\n      ++position;\n    } else if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else {\n      break;\n    }\n  }\n\n  return position;\n}\n/**\n * Reads a comment token from the source file.\n *\n * #[\\u0009\\u0020-\\uFFFF]*\n */\n\n\nfunction readComment(source, start, line, col, prev) {\n  var body = source.body;\n  var code;\n  var position = start;\n\n  do {\n    code = body.charCodeAt(++position);\n  } while (!isNaN(code) && ( // SourceCharacter but not LineTerminator\n  code > 0x001f || code === 0x0009));\n\n  return new Tok(TokenKind.COMMENT, start, position, line, col, prev, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a float\n * or an int depending on whether a decimal point appears.\n *\n * Int:   -?(0|[1-9][0-9]*)\n * Float: -?(0|[1-9][0-9]*)(\\.[0-9]+)?((E|e)(+|-)?[0-9]+)?\n */\n\n\nfunction readNumber(source, start, firstCode, line, col, prev) {\n  var body = source.body;\n  var code = firstCode;\n  var position = start;\n  var isFloat = false;\n\n  if (code === 45) {\n    // -\n    code = body.charCodeAt(++position);\n  }\n\n  if (code === 48) {\n    // 0\n    code = body.charCodeAt(++position);\n\n    if (code >= 48 && code <= 57) {\n      throw syntaxError(source, position, \"Invalid number, unexpected digit after 0: \".concat(printCharCode(code), \".\"));\n    }\n  } else {\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 46) {\n    // .\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(source, position, code);\n    code = body.charCodeAt(position);\n  }\n\n  if (code === 69 || code === 101) {\n    // E e\n    isFloat = true;\n    code = body.charCodeAt(++position);\n\n    if (code === 43 || code === 45) {\n      // + -\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(source, position, code);\n  }\n\n  return new Tok(isFloat ? TokenKind.FLOAT : TokenKind.INT, start, position, line, col, prev, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading digits.\n */\n\n\nfunction readDigits(source, start, firstCode) {\n  var body = source.body;\n  var position = start;\n  var code = firstCode;\n\n  if (code >= 48 && code <= 57) {\n    // 0 - 9\n    do {\n      code = body.charCodeAt(++position);\n    } while (code >= 48 && code <= 57); // 0 - 9\n\n\n    return position;\n  }\n\n  throw syntaxError(source, position, \"Invalid number, expected digit but got: \".concat(printCharCode(code), \".\"));\n}\n/**\n * Reads a string token from the source file.\n *\n * \"([^\"\\\\\\u000A\\u000D]|(\\\\(u[0-9a-fA-F]{4}|[\"\\\\/bfnrt])))*\"\n */\n\n\nfunction readString(source, start, line, col, prev) {\n  var body = source.body;\n  var position = start + 1;\n  var chunkStart = position;\n  var code = 0;\n  var value = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position)) && // not LineTerminator\n  code !== 0x000a && code !== 0x000d) {\n    // Closing Quote (\")\n    if (code === 34) {\n      value += body.slice(chunkStart, position);\n      return new Tok(TokenKind.STRING, start, position + 1, line, col, prev, value);\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    ++position;\n\n    if (code === 92) {\n      // \\\n      value += body.slice(chunkStart, position - 1);\n      code = body.charCodeAt(position);\n\n      switch (code) {\n        case 34:\n          value += '\"';\n          break;\n\n        case 47:\n          value += '/';\n          break;\n\n        case 92:\n          value += '\\\\';\n          break;\n\n        case 98:\n          value += '\\b';\n          break;\n\n        case 102:\n          value += '\\f';\n          break;\n\n        case 110:\n          value += '\\n';\n          break;\n\n        case 114:\n          value += '\\r';\n          break;\n\n        case 116:\n          value += '\\t';\n          break;\n\n        case 117:\n          // u\n          var charCode = uniCharCode(body.charCodeAt(position + 1), body.charCodeAt(position + 2), body.charCodeAt(position + 3), body.charCodeAt(position + 4));\n\n          if (charCode < 0) {\n            throw syntaxError(source, position, 'Invalid character escape sequence: ' + \"\\\\u\".concat(body.slice(position + 1, position + 5), \".\"));\n          }\n\n          value += String.fromCharCode(charCode);\n          position += 4;\n          break;\n\n        default:\n          throw syntaxError(source, position, \"Invalid character escape sequence: \\\\\".concat(String.fromCharCode(code), \".\"));\n      }\n\n      ++position;\n      chunkStart = position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Reads a block string token from the source file.\n *\n * \"\"\"(\"?\"?(\\\\\"\"\"|\\\\(?!=\"\"\")|[^\"\\\\]))*\"\"\"\n */\n\n\nfunction readBlockString(source, start, line, col, prev, lexer) {\n  var body = source.body;\n  var position = start + 3;\n  var chunkStart = position;\n  var code = 0;\n  var rawValue = '';\n\n  while (position < body.length && !isNaN(code = body.charCodeAt(position))) {\n    // Closing Triple-Quote (\"\"\")\n    if (code === 34 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34) {\n      rawValue += body.slice(chunkStart, position);\n      return new Tok(TokenKind.BLOCK_STRING, start, position + 3, line, col, prev, dedentBlockStringValue(rawValue));\n    } // SourceCharacter\n\n\n    if (code < 0x0020 && code !== 0x0009 && code !== 0x000a && code !== 0x000d) {\n      throw syntaxError(source, position, \"Invalid character within String: \".concat(printCharCode(code), \".\"));\n    }\n\n    if (code === 10) {\n      // new line\n      ++position;\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if (code === 13) {\n      // carriage return\n      if (body.charCodeAt(position + 1) === 10) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      ++lexer.line;\n      lexer.lineStart = position;\n    } else if ( // Escape Triple-Quote (\\\"\"\")\n    code === 92 && body.charCodeAt(position + 1) === 34 && body.charCodeAt(position + 2) === 34 && body.charCodeAt(position + 3) === 34) {\n      rawValue += body.slice(chunkStart, position) + '\"\"\"';\n      position += 4;\n      chunkStart = position;\n    } else {\n      ++position;\n    }\n  }\n\n  throw syntaxError(source, position, 'Unterminated string.');\n}\n/**\n * Converts four hexadecimal chars to the integer that the\n * string represents. For example, uniCharCode('0','0','0','f')\n * will return 15, and uniCharCode('0','0','f','f') returns 255.\n *\n * Returns a negative number on error, if a char was invalid.\n *\n * This is implemented by noting that char2hex() returns -1 on error,\n * which means the result of ORing the char2hex() will also be negative.\n */\n\n\nfunction uniCharCode(a, b, c, d) {\n  return char2hex(a) << 12 | char2hex(b) << 8 | char2hex(c) << 4 | char2hex(d);\n}\n/**\n * Converts a hex character to its integer value.\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 on error.\n */\n\n\nfunction char2hex(a) {\n  return a >= 48 && a <= 57 ? a - 48 // 0-9\n  : a >= 65 && a <= 70 ? a - 55 // A-F\n  : a >= 97 && a <= 102 ? a - 87 // a-f\n  : -1;\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * [_A-Za-z][_0-9A-Za-z]*\n */\n\n\nfunction readName(source, start, line, col, prev) {\n  var body = source.body;\n  var bodyLength = body.length;\n  var position = start + 1;\n  var code = 0;\n\n  while (position !== bodyLength && !isNaN(code = body.charCodeAt(position)) && (code === 95 || // _\n  code >= 48 && code <= 57 || // 0-9\n  code >= 65 && code <= 90 || // A-Z\n  code >= 97 && code <= 122) // a-z\n  ) {\n    ++position;\n  }\n\n  return new Tok(TokenKind.NAME, start, position, line, col, prev, body.slice(start, position));\n}","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed kind values for AST nodes.\n */\nexport var Kind = Object.freeze({\n  // Name\n  NAME: 'Name',\n  // Document\n  DOCUMENT: 'Document',\n  OPERATION_DEFINITION: 'OperationDefinition',\n  VARIABLE_DEFINITION: 'VariableDefinition',\n  SELECTION_SET: 'SelectionSet',\n  FIELD: 'Field',\n  ARGUMENT: 'Argument',\n  // Fragments\n  FRAGMENT_SPREAD: 'FragmentSpread',\n  INLINE_FRAGMENT: 'InlineFragment',\n  FRAGMENT_DEFINITION: 'FragmentDefinition',\n  // Values\n  VARIABLE: 'Variable',\n  INT: 'IntValue',\n  FLOAT: 'FloatValue',\n  STRING: 'StringValue',\n  BOOLEAN: 'BooleanValue',\n  NULL: 'NullValue',\n  ENUM: 'EnumValue',\n  LIST: 'ListValue',\n  OBJECT: 'ObjectValue',\n  OBJECT_FIELD: 'ObjectField',\n  // Directives\n  DIRECTIVE: 'Directive',\n  // Types\n  NAMED_TYPE: 'NamedType',\n  LIST_TYPE: 'ListType',\n  NON_NULL_TYPE: 'NonNullType',\n  // Type System Definitions\n  SCHEMA_DEFINITION: 'SchemaDefinition',\n  OPERATION_TYPE_DEFINITION: 'OperationTypeDefinition',\n  // Type Definitions\n  SCALAR_TYPE_DEFINITION: 'ScalarTypeDefinition',\n  OBJECT_TYPE_DEFINITION: 'ObjectTypeDefinition',\n  FIELD_DEFINITION: 'FieldDefinition',\n  INPUT_VALUE_DEFINITION: 'InputValueDefinition',\n  INTERFACE_TYPE_DEFINITION: 'InterfaceTypeDefinition',\n  UNION_TYPE_DEFINITION: 'UnionTypeDefinition',\n  ENUM_TYPE_DEFINITION: 'EnumTypeDefinition',\n  ENUM_VALUE_DEFINITION: 'EnumValueDefinition',\n  INPUT_OBJECT_TYPE_DEFINITION: 'InputObjectTypeDefinition',\n  // Directive Definitions\n  DIRECTIVE_DEFINITION: 'DirectiveDefinition',\n  // Type System Extensions\n  SCHEMA_EXTENSION: 'SchemaExtension',\n  // Type Extensions\n  SCALAR_TYPE_EXTENSION: 'ScalarTypeExtension',\n  OBJECT_TYPE_EXTENSION: 'ObjectTypeExtension',\n  INTERFACE_TYPE_EXTENSION: 'InterfaceTypeExtension',\n  UNION_TYPE_EXTENSION: 'UnionTypeExtension',\n  ENUM_TYPE_EXTENSION: 'EnumTypeExtension',\n  INPUT_OBJECT_TYPE_EXTENSION: 'InputObjectTypeExtension'\n});\n/**\n * The enum type representing the possible kind values of AST nodes.\n */","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n/**\n * The set of allowed directive location values.\n */\nexport var DirectiveLocation = Object.freeze({\n  // Request Definitions\n  QUERY: 'QUERY',\n  MUTATION: 'MUTATION',\n  SUBSCRIPTION: 'SUBSCRIPTION',\n  FIELD: 'FIELD',\n  FRAGMENT_DEFINITION: 'FRAGMENT_DEFINITION',\n  FRAGMENT_SPREAD: 'FRAGMENT_SPREAD',\n  INLINE_FRAGMENT: 'INLINE_FRAGMENT',\n  VARIABLE_DEFINITION: 'VARIABLE_DEFINITION',\n  // Type System Definitions\n  SCHEMA: 'SCHEMA',\n  SCALAR: 'SCALAR',\n  OBJECT: 'OBJECT',\n  FIELD_DEFINITION: 'FIELD_DEFINITION',\n  ARGUMENT_DEFINITION: 'ARGUMENT_DEFINITION',\n  INTERFACE: 'INTERFACE',\n  UNION: 'UNION',\n  ENUM: 'ENUM',\n  ENUM_VALUE: 'ENUM_VALUE',\n  INPUT_OBJECT: 'INPUT_OBJECT',\n  INPUT_FIELD_DEFINITION: 'INPUT_FIELD_DEFINITION'\n});\n/**\n * The enum type representing the directive location values.\n */","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\nimport inspect from '../jsutils/inspect';\nimport defineToJSON from '../jsutils/defineToJSON';\nimport { Source } from './source';\nimport { syntaxError } from '../error';\nimport { TokenKind, getTokenDesc, createLexer } from './lexer';\nimport { Kind } from './kinds';\nimport { DirectiveLocation } from './directiveLocation';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n\n  if (!(sourceObj instanceof Source)) {\n    throw new TypeError(\"Must provide Source. Received: \".concat(inspect(sourceObj)));\n  }\n\n  var lexer = createLexer(sourceObj, options || {});\n  return parseDocument(lexer);\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expectToken(lexer, TokenKind.SOF);\n  var value = parseValueLiteral(lexer, false);\n  expectToken(lexer, TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  var sourceObj = typeof source === 'string' ? new Source(source) : source;\n  var lexer = createLexer(sourceObj, options || {});\n  expectToken(lexer, TokenKind.SOF);\n  var type = parseTypeReference(lexer);\n  expectToken(lexer, TokenKind.EOF);\n  return type;\n}\n/**\n * Converts a name lex token into a name parse node.\n */\n\nfunction parseName(lexer) {\n  var token = expectToken(lexer, TokenKind.NAME);\n  return {\n    kind: Kind.NAME,\n    value: token.value,\n    loc: loc(lexer, token)\n  };\n} // Implements the parsing rules in the Document section.\n\n/**\n * Document : Definition+\n */\n\n\nfunction parseDocument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.DOCUMENT,\n    definitions: many(lexer, TokenKind.SOF, parseDefinition, TokenKind.EOF),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Definition :\n *   - ExecutableDefinition\n *   - TypeSystemDefinition\n *   - TypeSystemExtension\n */\n\n\nfunction parseDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n      case 'fragment':\n        return parseExecutableDefinition(lexer);\n\n      case 'schema':\n      case 'scalar':\n      case 'type':\n      case 'interface':\n      case 'union':\n      case 'enum':\n      case 'input':\n      case 'directive':\n        return parseTypeSystemDefinition(lexer);\n\n      case 'extend':\n        return parseTypeSystemExtension(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseExecutableDefinition(lexer);\n  } else if (peekDescription(lexer)) {\n    return parseTypeSystemDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n}\n/**\n * ExecutableDefinition :\n *   - OperationDefinition\n *   - FragmentDefinition\n */\n\n\nfunction parseExecutableDefinition(lexer) {\n  if (peek(lexer, TokenKind.NAME)) {\n    switch (lexer.token.value) {\n      case 'query':\n      case 'mutation':\n      case 'subscription':\n        return parseOperationDefinition(lexer);\n\n      case 'fragment':\n        return parseFragmentDefinition(lexer);\n    }\n  } else if (peek(lexer, TokenKind.BRACE_L)) {\n    return parseOperationDefinition(lexer);\n  }\n\n  throw unexpected(lexer);\n} // Implements the parsing rules in the Operations section.\n\n/**\n * OperationDefinition :\n *  - SelectionSet\n *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n */\n\n\nfunction parseOperationDefinition(lexer) {\n  var start = lexer.token;\n\n  if (peek(lexer, TokenKind.BRACE_L)) {\n    return {\n      kind: Kind.OPERATION_DEFINITION,\n      operation: 'query',\n      name: undefined,\n      variableDefinitions: [],\n      directives: [],\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  var operation = parseOperationType(lexer);\n  var name;\n\n  if (peek(lexer, TokenKind.NAME)) {\n    name = parseName(lexer);\n  }\n\n  return {\n    kind: Kind.OPERATION_DEFINITION,\n    operation: operation,\n    name: name,\n    variableDefinitions: parseVariableDefinitions(lexer),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationType : one of query mutation subscription\n */\n\n\nfunction parseOperationType(lexer) {\n  var operationToken = expectToken(lexer, TokenKind.NAME);\n\n  switch (operationToken.value) {\n    case 'query':\n      return 'query';\n\n    case 'mutation':\n      return 'mutation';\n\n    case 'subscription':\n      return 'subscription';\n  }\n\n  throw unexpected(lexer, operationToken);\n}\n/**\n * VariableDefinitions : ( VariableDefinition+ )\n */\n\n\nfunction parseVariableDefinitions(lexer) {\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, parseVariableDefinition, TokenKind.PAREN_R) : [];\n}\n/**\n * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseVariableDefinition(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.VARIABLE_DEFINITION,\n    variable: parseVariable(lexer),\n    type: (expectToken(lexer, TokenKind.COLON), parseTypeReference(lexer)),\n    defaultValue: expectOptionalToken(lexer, TokenKind.EQUALS) ? parseValueLiteral(lexer, true) : undefined,\n    directives: parseDirectives(lexer, true),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Variable : $ Name\n */\n\n\nfunction parseVariable(lexer) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.DOLLAR);\n  return {\n    kind: Kind.VARIABLE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * SelectionSet : { Selection+ }\n */\n\n\nfunction parseSelectionSet(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.SELECTION_SET,\n    selections: many(lexer, TokenKind.BRACE_L, parseSelection, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Selection :\n *   - Field\n *   - FragmentSpread\n *   - InlineFragment\n */\n\n\nfunction parseSelection(lexer) {\n  return peek(lexer, TokenKind.SPREAD) ? parseFragment(lexer) : parseField(lexer);\n}\n/**\n * Field : Alias? Name Arguments? Directives? SelectionSet?\n *\n * Alias : Name :\n */\n\n\nfunction parseField(lexer) {\n  var start = lexer.token;\n  var nameOrAlias = parseName(lexer);\n  var alias;\n  var name;\n\n  if (expectOptionalToken(lexer, TokenKind.COLON)) {\n    alias = nameOrAlias;\n    name = parseName(lexer);\n  } else {\n    name = nameOrAlias;\n  }\n\n  return {\n    kind: Kind.FIELD,\n    alias: alias,\n    name: name,\n    arguments: parseArguments(lexer, false),\n    directives: parseDirectives(lexer, false),\n    selectionSet: peek(lexer, TokenKind.BRACE_L) ? parseSelectionSet(lexer) : undefined,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * Arguments[Const] : ( Argument[?Const]+ )\n */\n\n\nfunction parseArguments(lexer, isConst) {\n  var item = isConst ? parseConstArgument : parseArgument;\n  return peek(lexer, TokenKind.PAREN_L) ? many(lexer, TokenKind.PAREN_L, item, TokenKind.PAREN_R) : [];\n}\n/**\n * Argument[Const] : Name : Value[?Const]\n */\n\n\nfunction parseArgument(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  return {\n    kind: Kind.ARGUMENT,\n    name: name,\n    value: parseValueLiteral(lexer, false),\n    loc: loc(lexer, start)\n  };\n}\n\nfunction parseConstArgument(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.ARGUMENT,\n    name: parseName(lexer),\n    value: (expectToken(lexer, TokenKind.COLON), parseConstValue(lexer)),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Fragments section.\n\n/**\n * Corresponds to both FragmentSpread and InlineFragment in the spec.\n *\n * FragmentSpread : ... FragmentName Directives?\n *\n * InlineFragment : ... TypeCondition? Directives? SelectionSet\n */\n\n\nfunction parseFragment(lexer) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.SPREAD);\n  var hasTypeCondition = expectOptionalKeyword(lexer, 'on');\n\n  if (!hasTypeCondition && peek(lexer, TokenKind.NAME)) {\n    return {\n      kind: Kind.FRAGMENT_SPREAD,\n      name: parseFragmentName(lexer),\n      directives: parseDirectives(lexer, false),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.INLINE_FRAGMENT,\n    typeCondition: hasTypeCondition ? parseNamedType(lexer) : undefined,\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentDefinition :\n *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n *\n * TypeCondition : NamedType\n */\n\n\nfunction parseFragmentDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'fragment'); // Experimental support for defining variables within fragments changes\n  // the grammar of FragmentDefinition:\n  //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n  if (lexer.options.experimentalFragmentVariables) {\n    return {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: parseFragmentName(lexer),\n      variableDefinitions: parseVariableDefinitions(lexer),\n      typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n      directives: parseDirectives(lexer, false),\n      selectionSet: parseSelectionSet(lexer),\n      loc: loc(lexer, start)\n    };\n  }\n\n  return {\n    kind: Kind.FRAGMENT_DEFINITION,\n    name: parseFragmentName(lexer),\n    typeCondition: (expectKeyword(lexer, 'on'), parseNamedType(lexer)),\n    directives: parseDirectives(lexer, false),\n    selectionSet: parseSelectionSet(lexer),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * FragmentName : Name but not `on`\n */\n\n\nfunction parseFragmentName(lexer) {\n  if (lexer.token.value === 'on') {\n    throw unexpected(lexer);\n  }\n\n  return parseName(lexer);\n} // Implements the parsing rules in the Values section.\n\n/**\n * Value[Const] :\n *   - [~Const] Variable\n *   - IntValue\n *   - FloatValue\n *   - StringValue\n *   - BooleanValue\n *   - NullValue\n *   - EnumValue\n *   - ListValue[?Const]\n *   - ObjectValue[?Const]\n *\n * BooleanValue : one of `true` `false`\n *\n * NullValue : `null`\n *\n * EnumValue : Name but not `true`, `false` or `null`\n */\n\n\nfunction parseValueLiteral(lexer, isConst) {\n  var token = lexer.token;\n\n  switch (token.kind) {\n    case TokenKind.BRACKET_L:\n      return parseList(lexer, isConst);\n\n    case TokenKind.BRACE_L:\n      return parseObject(lexer, isConst);\n\n    case TokenKind.INT:\n      lexer.advance();\n      return {\n        kind: Kind.INT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.FLOAT:\n      lexer.advance();\n      return {\n        kind: Kind.FLOAT,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.STRING:\n    case TokenKind.BLOCK_STRING:\n      return parseStringLiteral(lexer);\n\n    case TokenKind.NAME:\n      if (token.value === 'true' || token.value === 'false') {\n        lexer.advance();\n        return {\n          kind: Kind.BOOLEAN,\n          value: token.value === 'true',\n          loc: loc(lexer, token)\n        };\n      } else if (token.value === 'null') {\n        lexer.advance();\n        return {\n          kind: Kind.NULL,\n          loc: loc(lexer, token)\n        };\n      }\n\n      lexer.advance();\n      return {\n        kind: Kind.ENUM,\n        value: token.value,\n        loc: loc(lexer, token)\n      };\n\n    case TokenKind.DOLLAR:\n      if (!isConst) {\n        return parseVariable(lexer);\n      }\n\n      break;\n  }\n\n  throw unexpected(lexer);\n}\n\nfunction parseStringLiteral(lexer) {\n  var token = lexer.token;\n  lexer.advance();\n  return {\n    kind: Kind.STRING,\n    value: token.value,\n    block: token.kind === TokenKind.BLOCK_STRING,\n    loc: loc(lexer, token)\n  };\n}\n\nexport function parseConstValue(lexer) {\n  return parseValueLiteral(lexer, true);\n}\n\nfunction parseValueValue(lexer) {\n  return parseValueLiteral(lexer, false);\n}\n/**\n * ListValue[Const] :\n *   - [ ]\n *   - [ Value[?Const]+ ]\n */\n\n\nfunction parseList(lexer, isConst) {\n  var start = lexer.token;\n  var item = isConst ? parseConstValue : parseValueValue;\n  return {\n    kind: Kind.LIST,\n    values: any(lexer, TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectValue[Const] :\n *   - { }\n *   - { ObjectField[?Const]+ }\n */\n\n\nfunction parseObject(lexer, isConst) {\n  var start = lexer.token;\n\n  var item = function item() {\n    return parseObjectField(lexer, isConst);\n  };\n\n  return {\n    kind: Kind.OBJECT,\n    fields: any(lexer, TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectField[Const] : Name : Value[?Const]\n */\n\n\nfunction parseObjectField(lexer, isConst) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  return {\n    kind: Kind.OBJECT_FIELD,\n    name: name,\n    value: parseValueLiteral(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Directives section.\n\n/**\n * Directives[Const] : Directive[?Const]+\n */\n\n\nfunction parseDirectives(lexer, isConst) {\n  var directives = [];\n\n  while (peek(lexer, TokenKind.AT)) {\n    directives.push(parseDirective(lexer, isConst));\n  }\n\n  return directives;\n}\n/**\n * Directive[Const] : @ Name Arguments[?Const]?\n */\n\n\nfunction parseDirective(lexer, isConst) {\n  var start = lexer.token;\n  expectToken(lexer, TokenKind.AT);\n  return {\n    kind: Kind.DIRECTIVE,\n    name: parseName(lexer),\n    arguments: parseArguments(lexer, isConst),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Types section.\n\n/**\n * Type :\n *   - NamedType\n *   - ListType\n *   - NonNullType\n */\n\n\nexport function parseTypeReference(lexer) {\n  var start = lexer.token;\n  var type;\n\n  if (expectOptionalToken(lexer, TokenKind.BRACKET_L)) {\n    type = parseTypeReference(lexer);\n    expectToken(lexer, TokenKind.BRACKET_R);\n    type = {\n      kind: Kind.LIST_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  } else {\n    type = parseNamedType(lexer);\n  }\n\n  if (expectOptionalToken(lexer, TokenKind.BANG)) {\n    return {\n      kind: Kind.NON_NULL_TYPE,\n      type: type,\n      loc: loc(lexer, start)\n    };\n  }\n\n  return type;\n}\n/**\n * NamedType : Name\n */\n\nexport function parseNamedType(lexer) {\n  var start = lexer.token;\n  return {\n    kind: Kind.NAMED_TYPE,\n    name: parseName(lexer),\n    loc: loc(lexer, start)\n  };\n} // Implements the parsing rules in the Type Definition section.\n\n/**\n * TypeSystemDefinition :\n *   - SchemaDefinition\n *   - TypeDefinition\n *   - DirectiveDefinition\n *\n * TypeDefinition :\n *   - ScalarTypeDefinition\n *   - ObjectTypeDefinition\n *   - InterfaceTypeDefinition\n *   - UnionTypeDefinition\n *   - EnumTypeDefinition\n *   - InputObjectTypeDefinition\n */\n\nfunction parseTypeSystemDefinition(lexer) {\n  // Many definitions begin with a description and require a lookahead.\n  var keywordToken = peekDescription(lexer) ? lexer.lookahead() : lexer.token;\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaDefinition(lexer);\n\n      case 'scalar':\n        return parseScalarTypeDefinition(lexer);\n\n      case 'type':\n        return parseObjectTypeDefinition(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeDefinition(lexer);\n\n      case 'union':\n        return parseUnionTypeDefinition(lexer);\n\n      case 'enum':\n        return parseEnumTypeDefinition(lexer);\n\n      case 'input':\n        return parseInputObjectTypeDefinition(lexer);\n\n      case 'directive':\n        return parseDirectiveDefinition(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n\nfunction peekDescription(lexer) {\n  return peek(lexer, TokenKind.STRING) || peek(lexer, TokenKind.BLOCK_STRING);\n}\n/**\n * Description : StringValue\n */\n\n\nfunction parseDescription(lexer) {\n  if (peekDescription(lexer)) {\n    return parseStringLiteral(lexer);\n  }\n}\n/**\n * SchemaDefinition : schema Directives[Const]? { OperationTypeDefinition+ }\n */\n\n\nfunction parseSchemaDefinition(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R);\n  return {\n    kind: Kind.SCHEMA_DEFINITION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * OperationTypeDefinition : OperationType : NamedType\n */\n\n\nfunction parseOperationTypeDefinition(lexer) {\n  var start = lexer.token;\n  var operation = parseOperationType(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseNamedType(lexer);\n  return {\n    kind: Kind.OPERATION_TYPE_DEFINITION,\n    operation: operation,\n    type: type,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n */\n\n\nfunction parseScalarTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.SCALAR_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeDefinition :\n *   Description?\n *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ImplementsInterfaces :\n *   - implements `&`? NamedType\n *   - ImplementsInterfaces & NamedType\n */\n\n\nfunction parseImplementsInterfaces(lexer) {\n  var types = [];\n\n  if (expectOptionalKeyword(lexer, 'implements')) {\n    // Optional leading ampersand\n    expectOptionalToken(lexer, TokenKind.AMP);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (expectOptionalToken(lexer, TokenKind.AMP) || // Legacy support for the SDL?\n    lexer.options.allowLegacySDLImplementsInterfaces && peek(lexer, TokenKind.NAME));\n  }\n\n  return types;\n}\n/**\n * FieldsDefinition : { FieldDefinition+ }\n */\n\n\nfunction parseFieldsDefinition(lexer) {\n  // Legacy support for the SDL?\n  if (lexer.options.allowLegacySDLEmptyFields && peek(lexer, TokenKind.BRACE_L) && lexer.lookahead().kind === TokenKind.BRACE_R) {\n    lexer.advance();\n    lexer.advance();\n    return [];\n  }\n\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseFieldDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * FieldDefinition :\n *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n */\n\n\nfunction parseFieldDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.FIELD_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    type: type,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ArgumentsDefinition : ( InputValueDefinition+ )\n */\n\n\nfunction parseArgumentDefs(lexer) {\n  if (!peek(lexer, TokenKind.PAREN_L)) {\n    return [];\n  }\n\n  return many(lexer, TokenKind.PAREN_L, parseInputValueDef, TokenKind.PAREN_R);\n}\n/**\n * InputValueDefinition :\n *   - Description? Name : Type DefaultValue? Directives[Const]?\n */\n\n\nfunction parseInputValueDef(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  expectToken(lexer, TokenKind.COLON);\n  var type = parseTypeReference(lexer);\n  var defaultValue;\n\n  if (expectOptionalToken(lexer, TokenKind.EQUALS)) {\n    defaultValue = parseConstValue(lexer);\n  }\n\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.INPUT_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    type: type,\n    defaultValue: defaultValue,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeDefinition :\n *   - Description? interface Name Directives[Const]? FieldsDefinition?\n */\n\n\nfunction parseInterfaceTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n  return {\n    kind: Kind.INTERFACE_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeDefinition :\n *   - Description? union Name Directives[Const]? UnionMemberTypes?\n */\n\n\nfunction parseUnionTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n  return {\n    kind: Kind.UNION_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionMemberTypes :\n *   - = `|`? NamedType\n *   - UnionMemberTypes | NamedType\n */\n\n\nfunction parseUnionMemberTypes(lexer) {\n  var types = [];\n\n  if (expectOptionalToken(lexer, TokenKind.EQUALS)) {\n    // Optional leading pipe\n    expectOptionalToken(lexer, TokenKind.PIPE);\n\n    do {\n      types.push(parseNamedType(lexer));\n    } while (expectOptionalToken(lexer, TokenKind.PIPE));\n  }\n\n  return types;\n}\n/**\n * EnumTypeDefinition :\n *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n */\n\n\nfunction parseEnumTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n  return {\n    kind: Kind.ENUM_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumValuesDefinition : { EnumValueDefinition+ }\n */\n\n\nfunction parseEnumValuesDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseEnumValueDefinition, TokenKind.BRACE_R) : [];\n}\n/**\n * EnumValueDefinition : Description? EnumValue Directives[Const]?\n *\n * EnumValue : Name\n */\n\n\nfunction parseEnumValueDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  return {\n    kind: Kind.ENUM_VALUE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeDefinition :\n *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n */\n\n\nfunction parseInputObjectTypeDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n    description: description,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputFieldsDefinition : { InputValueDefinition+ }\n */\n\n\nfunction parseInputFieldsDefinition(lexer) {\n  return peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseInputValueDef, TokenKind.BRACE_R) : [];\n}\n/**\n * TypeSystemExtension :\n *   - SchemaExtension\n *   - TypeExtension\n *\n * TypeExtension :\n *   - ScalarTypeExtension\n *   - ObjectTypeExtension\n *   - InterfaceTypeExtension\n *   - UnionTypeExtension\n *   - EnumTypeExtension\n *   - InputObjectTypeDefinition\n */\n\n\nfunction parseTypeSystemExtension(lexer) {\n  var keywordToken = lexer.lookahead();\n\n  if (keywordToken.kind === TokenKind.NAME) {\n    switch (keywordToken.value) {\n      case 'schema':\n        return parseSchemaExtension(lexer);\n\n      case 'scalar':\n        return parseScalarTypeExtension(lexer);\n\n      case 'type':\n        return parseObjectTypeExtension(lexer);\n\n      case 'interface':\n        return parseInterfaceTypeExtension(lexer);\n\n      case 'union':\n        return parseUnionTypeExtension(lexer);\n\n      case 'enum':\n        return parseEnumTypeExtension(lexer);\n\n      case 'input':\n        return parseInputObjectTypeExtension(lexer);\n    }\n  }\n\n  throw unexpected(lexer, keywordToken);\n}\n/**\n * SchemaExtension :\n *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n *  - extend schema Directives[Const]\n */\n\n\nfunction parseSchemaExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'schema');\n  var directives = parseDirectives(lexer, true);\n  var operationTypes = peek(lexer, TokenKind.BRACE_L) ? many(lexer, TokenKind.BRACE_L, parseOperationTypeDefinition, TokenKind.BRACE_R) : [];\n\n  if (directives.length === 0 && operationTypes.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCHEMA_EXTENSION,\n    directives: directives,\n    operationTypes: operationTypes,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ScalarTypeExtension :\n *   - extend scalar Name Directives[Const]\n */\n\n\nfunction parseScalarTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'scalar');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n\n  if (directives.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.SCALAR_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * ObjectTypeExtension :\n *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n *  - extend type Name ImplementsInterfaces? Directives[Const]\n *  - extend type Name ImplementsInterfaces\n */\n\n\nfunction parseObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'type');\n  var name = parseName(lexer);\n  var interfaces = parseImplementsInterfaces(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.OBJECT_TYPE_EXTENSION,\n    name: name,\n    interfaces: interfaces,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InterfaceTypeExtension :\n *   - extend interface Name Directives[Const]? FieldsDefinition\n *   - extend interface Name Directives[Const]\n */\n\n\nfunction parseInterfaceTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'interface');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INTERFACE_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * UnionTypeExtension :\n *   - extend union Name Directives[Const]? UnionMemberTypes\n *   - extend union Name Directives[Const]\n */\n\n\nfunction parseUnionTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'union');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var types = parseUnionMemberTypes(lexer);\n\n  if (directives.length === 0 && types.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.UNION_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    types: types,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * EnumTypeExtension :\n *   - extend enum Name Directives[Const]? EnumValuesDefinition\n *   - extend enum Name Directives[Const]\n */\n\n\nfunction parseEnumTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'enum');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var values = parseEnumValuesDefinition(lexer);\n\n  if (directives.length === 0 && values.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.ENUM_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    values: values,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * InputObjectTypeExtension :\n *   - extend input Name Directives[Const]? InputFieldsDefinition\n *   - extend input Name Directives[Const]\n */\n\n\nfunction parseInputObjectTypeExtension(lexer) {\n  var start = lexer.token;\n  expectKeyword(lexer, 'extend');\n  expectKeyword(lexer, 'input');\n  var name = parseName(lexer);\n  var directives = parseDirectives(lexer, true);\n  var fields = parseInputFieldsDefinition(lexer);\n\n  if (directives.length === 0 && fields.length === 0) {\n    throw unexpected(lexer);\n  }\n\n  return {\n    kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n    name: name,\n    directives: directives,\n    fields: fields,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveDefinition :\n *   - Description? directive @ Name ArgumentsDefinition? on DirectiveLocations\n */\n\n\nfunction parseDirectiveDefinition(lexer) {\n  var start = lexer.token;\n  var description = parseDescription(lexer);\n  expectKeyword(lexer, 'directive');\n  expectToken(lexer, TokenKind.AT);\n  var name = parseName(lexer);\n  var args = parseArgumentDefs(lexer);\n  expectKeyword(lexer, 'on');\n  var locations = parseDirectiveLocations(lexer);\n  return {\n    kind: Kind.DIRECTIVE_DEFINITION,\n    description: description,\n    name: name,\n    arguments: args,\n    locations: locations,\n    loc: loc(lexer, start)\n  };\n}\n/**\n * DirectiveLocations :\n *   - `|`? DirectiveLocation\n *   - DirectiveLocations | DirectiveLocation\n */\n\n\nfunction parseDirectiveLocations(lexer) {\n  // Optional leading pipe\n  expectOptionalToken(lexer, TokenKind.PIPE);\n  var locations = [];\n\n  do {\n    locations.push(parseDirectiveLocation(lexer));\n  } while (expectOptionalToken(lexer, TokenKind.PIPE));\n\n  return locations;\n}\n/*\n * DirectiveLocation :\n *   - ExecutableDirectiveLocation\n *   - TypeSystemDirectiveLocation\n *\n * ExecutableDirectiveLocation : one of\n *   `QUERY`\n *   `MUTATION`\n *   `SUBSCRIPTION`\n *   `FIELD`\n *   `FRAGMENT_DEFINITION`\n *   `FRAGMENT_SPREAD`\n *   `INLINE_FRAGMENT`\n *\n * TypeSystemDirectiveLocation : one of\n *   `SCHEMA`\n *   `SCALAR`\n *   `OBJECT`\n *   `FIELD_DEFINITION`\n *   `ARGUMENT_DEFINITION`\n *   `INTERFACE`\n *   `UNION`\n *   `ENUM`\n *   `ENUM_VALUE`\n *   `INPUT_OBJECT`\n *   `INPUT_FIELD_DEFINITION`\n */\n\n\nfunction parseDirectiveLocation(lexer) {\n  var start = lexer.token;\n  var name = parseName(lexer);\n\n  if (DirectiveLocation.hasOwnProperty(name.value)) {\n    return name;\n  }\n\n  throw unexpected(lexer, start);\n} // Core parsing utility functions\n\n/**\n * Returns a location object, used to identify the place in\n * the source that created a given parsed object.\n */\n\n\nfunction loc(lexer, startToken) {\n  if (!lexer.options.noLocation) {\n    return new Loc(startToken, lexer.lastToken, lexer.source);\n  }\n}\n\nfunction Loc(startToken, endToken, source) {\n  this.start = startToken.start;\n  this.end = endToken.end;\n  this.startToken = startToken;\n  this.endToken = endToken;\n  this.source = source;\n} // Print a simplified form when appearing in JSON/util.inspect.\n\n\ndefineToJSON(Loc, function () {\n  return {\n    start: this.start,\n    end: this.end\n  };\n});\n/**\n * Determines if the next token is of a given kind\n */\n\nfunction peek(lexer, kind) {\n  return lexer.token.kind === kind;\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expectToken(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \".concat(kind, \", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is of the given kind, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and return undefined.\n */\n\n\nfunction expectOptionalToken(lexer, kind) {\n  var token = lexer.token;\n\n  if (token.kind === kind) {\n    lexer.advance();\n    return token;\n  }\n\n  return undefined;\n}\n/**\n * If the next token is a given keyword, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and throw an error.\n */\n\n\nfunction expectKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  throw syntaxError(lexer.source, token.start, \"Expected \\\"\".concat(value, \"\\\", found \").concat(getTokenDesc(token)));\n}\n/**\n * If the next token is a given keyword, return that token after advancing\n * the lexer. Otherwise, do not change the parser state and return undefined.\n */\n\n\nfunction expectOptionalKeyword(lexer, value) {\n  var token = lexer.token;\n\n  if (token.kind === TokenKind.NAME && token.value === value) {\n    lexer.advance();\n    return token;\n  }\n\n  return undefined;\n}\n/**\n * Helper function for creating an error when an unexpected lexed token\n * is encountered.\n */\n\n\nfunction unexpected(lexer, atToken) {\n  var token = atToken || lexer.token;\n  return syntaxError(lexer.source, token.start, \"Unexpected \".concat(getTokenDesc(token)));\n}\n/**\n * Returns a possibly empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction any(lexer, openKind, parseFn, closeKind) {\n  expectToken(lexer, openKind);\n  var nodes = [];\n\n  while (!expectOptionalToken(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}\n/**\n * Returns a non-empty list of parse nodes, determined by\n * the parseFn. This list begins with a lex token of openKind\n * and ends with a lex token of closeKind. Advances the parser\n * to the next lex token after the closing token.\n */\n\n\nfunction many(lexer, openKind, parseFn, closeKind) {\n  expectToken(lexer, openKind);\n  var nodes = [parseFn(lexer)];\n\n  while (!expectOptionalToken(lexer, closeKind)) {\n    nodes.push(parseFn(lexer));\n  }\n\n  return nodes;\n}","var parser = require('graphql/language/parser');\n\nvar parse = parser.parse;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\n// A map docString -> graphql document\nvar docCache = {};\n\n// A map fragmentName -> [normalized source]\nvar fragmentSourceMap = {};\n\nfunction cacheKeyFromLoc(loc) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// For testing.\nfunction resetCaches() {\n  docCache = {};\n  fragmentSourceMap = {};\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nvar printFragmentWarnings = true;\nfunction processFragments(ast) {\n  var astFragmentMap = {};\n  var definitions = [];\n\n  for (var i = 0; i < ast.definitions.length; i++) {\n    var fragmentDefinition = ast.definitions[i];\n\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc);\n\n      // We know something about this fragment\n      if (fragmentSourceMap.hasOwnProperty(fragmentName) && !fragmentSourceMap[fragmentName][sourceKey]) {\n\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n\n      } else if (!fragmentSourceMap.hasOwnProperty(fragmentName)) {\n        fragmentSourceMap[fragmentName] = {};\n        fragmentSourceMap[fragmentName][sourceKey] = true;\n      }\n\n      if (!astFragmentMap[sourceKey]) {\n        astFragmentMap[sourceKey] = true;\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  }\n\n  ast.definitions = definitions;\n  return ast;\n}\n\nfunction disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nfunction stripLoc(doc, removeLocAtThisLevel) {\n  var docType = Object.prototype.toString.call(doc);\n\n  if (docType === '[object Array]') {\n    return doc.map(function (d) {\n      return stripLoc(d, removeLocAtThisLevel);\n    });\n  }\n\n  if (docType !== '[object Object]') {\n    throw new Error('Unexpected input.');\n  }\n\n  // We don't want to remove the root loc field so we can use it\n  // for fragment substitution (see below)\n  if (removeLocAtThisLevel && doc.loc) {\n    delete doc.loc;\n  }\n\n  // https://github.com/apollographql/graphql-tag/issues/40\n  if (doc.loc) {\n    delete doc.loc.startToken;\n    delete doc.loc.endToken;\n  }\n\n  var keys = Object.keys(doc);\n  var key;\n  var value;\n  var valueType;\n\n  for (key in keys) {\n    if (keys.hasOwnProperty(key)) {\n      value = doc[keys[key]];\n      valueType = Object.prototype.toString.call(value);\n\n      if (valueType === '[object Object]' || valueType === '[object Array]') {\n        doc[keys[key]] = stripLoc(value, true);\n      }\n    }\n  }\n\n  return doc;\n}\n\nvar experimentalFragmentVariables = false;\nfunction parseDocument(doc) {\n  var cacheKey = normalize(doc);\n\n  if (docCache[cacheKey]) {\n    return docCache[cacheKey];\n  }\n\n  var parsed = parse(doc, { experimentalFragmentVariables: experimentalFragmentVariables });\n  if (!parsed || parsed.kind !== 'Document') {\n    throw new Error('Not a valid GraphQL document.');\n  }\n\n  // check that all \"new\" fragments inside the documents are consistent with\n  // existing fragments of the same name\n  parsed = processFragments(parsed);\n  parsed = stripLoc(parsed, false);\n  docCache[cacheKey] = parsed;\n\n  return parsed;\n}\n\nfunction enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nfunction disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nfunction gql(/* arguments */) {\n  var args = Array.prototype.slice.call(arguments);\n\n  var literals = args[0];\n\n  // We always get literals[0] and then matching post literals for each arg given\n  var result = (typeof(literals) === \"string\") ? literals : literals[0];\n\n  for (var i = 1; i < args.length; i++) {\n    if (args[i] && args[i].kind && args[i].kind === 'Document') {\n      result += args[i].loc.source.body;\n    } else {\n      result += args[i];\n    }\n\n    result += literals[i];\n  }\n\n  return parseDocument(result);\n}\n\n// Support typescript, which isn't as nice as Babel about default exports\ngql.default = gql;\ngql.resetCaches = resetCaches;\ngql.disableFragmentWarnings = disableFragmentWarnings;\ngql.enableExperimentalFragmentVariables = enableExperimentalFragmentVariables;\ngql.disableExperimentalFragmentVariables = disableExperimentalFragmentVariables;\n\nmodule.exports = gql;\n","import { __extends } from 'tslib';\nimport ApolloClient__default from 'apollo-client';\nexport * from 'apollo-client';\nimport { ApolloLink, Observable } from 'apollo-link';\nexport * from 'apollo-link';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nexport * from 'apollo-cache-inmemory';\nimport { HttpLink } from 'apollo-link-http';\nexport { HttpLink } from 'apollo-link-http';\nimport { onError } from 'apollo-link-error';\nexport { default as gql } from 'graphql-tag';\nimport { invariant } from 'ts-invariant';\n\nvar PRESET_CONFIG_KEYS = [\n    'request',\n    'uri',\n    'credentials',\n    'headers',\n    'fetch',\n    'fetchOptions',\n    'clientState',\n    'onError',\n    'cacheRedirects',\n    'cache',\n    'name',\n    'version',\n    'resolvers',\n    'typeDefs',\n    'fragmentMatcher',\n];\nvar DefaultClient = (function (_super) {\n    __extends(DefaultClient, _super);\n    function DefaultClient(config) {\n        if (config === void 0) { config = {}; }\n        var _this = this;\n        if (config) {\n            var diff = Object.keys(config).filter(function (key) { return PRESET_CONFIG_KEYS.indexOf(key) === -1; });\n            if (diff.length > 0) {\n                process.env.NODE_ENV === \"production\" || invariant.warn('ApolloBoost was initialized with unsupported options: ' +\n                    (\"\" + diff.join(' ')));\n            }\n        }\n        var request = config.request, uri = config.uri, credentials = config.credentials, headers = config.headers, fetch = config.fetch, fetchOptions = config.fetchOptions, clientState = config.clientState, cacheRedirects = config.cacheRedirects, errorCallback = config.onError, name = config.name, version = config.version, resolvers = config.resolvers, typeDefs = config.typeDefs, fragmentMatcher = config.fragmentMatcher;\n        var cache = config.cache;\n        process.env.NODE_ENV === \"production\" ? invariant(!cache || !cacheRedirects, 1) : invariant(!cache || !cacheRedirects, 'Incompatible cache configuration. When not providing `cache`, ' +\n            'configure the provided instance with `cacheRedirects` instead.');\n        if (!cache) {\n            cache = cacheRedirects\n                ? new InMemoryCache({ cacheRedirects: cacheRedirects })\n                : new InMemoryCache();\n        }\n        var errorLink = errorCallback\n            ? onError(errorCallback)\n            : onError(function (_a) {\n                var graphQLErrors = _a.graphQLErrors, networkError = _a.networkError;\n                if (graphQLErrors) {\n                    graphQLErrors.map(function (_a) {\n                        var message = _a.message, locations = _a.locations, path = _a.path;\n                        return process.env.NODE_ENV === \"production\" || invariant.warn(\"[GraphQL error]: Message: \" + message + \", Location: \" +\n                            (locations + \", Path: \" + path));\n                    });\n                }\n                if (networkError) {\n                    process.env.NODE_ENV === \"production\" || invariant.warn(\"[Network error]: \" + networkError);\n                }\n            });\n        var requestHandler = request\n            ? new ApolloLink(function (operation, forward) {\n                return new Observable(function (observer) {\n                    var handle;\n                    Promise.resolve(operation)\n                        .then(function (oper) { return request(oper); })\n                        .then(function () {\n                        handle = forward(operation).subscribe({\n                            next: observer.next.bind(observer),\n                            error: observer.error.bind(observer),\n                            complete: observer.complete.bind(observer),\n                        });\n                    })\n                        .catch(observer.error.bind(observer));\n                    return function () {\n                        if (handle) {\n                            handle.unsubscribe();\n                        }\n                    };\n                });\n            })\n            : false;\n        var httpLink = new HttpLink({\n            uri: uri || '/graphql',\n            fetch: fetch,\n            fetchOptions: fetchOptions || {},\n            credentials: credentials || 'same-origin',\n            headers: headers || {},\n        });\n        var link = ApolloLink.from([errorLink, requestHandler, httpLink].filter(function (x) { return !!x; }));\n        var activeResolvers = resolvers;\n        var activeTypeDefs = typeDefs;\n        var activeFragmentMatcher = fragmentMatcher;\n        if (clientState) {\n            if (clientState.defaults) {\n                cache.writeData({\n                    data: clientState.defaults,\n                });\n            }\n            activeResolvers = clientState.resolvers;\n            activeTypeDefs = clientState.typeDefs;\n            activeFragmentMatcher = clientState.fragmentMatcher;\n        }\n        _this = _super.call(this, {\n            cache: cache,\n            link: link,\n            name: name,\n            version: version,\n            resolvers: activeResolvers,\n            typeDefs: activeTypeDefs,\n            fragmentMatcher: activeFragmentMatcher,\n        }) || this;\n        return _this;\n    }\n    return DefaultClient;\n}(ApolloClient__default));\n\nexport default DefaultClient;\n//# sourceMappingURL=bundle.esm.js.map\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { gql } from 'apollo-boost';\n\nexport const LIVE = gql`\nquery live {\n  fixtures: live {\n    fixture_id\n    league_id\n    league {\n      logo\n    }\n    homeTeam\n    awayTeam\n    statusShort\n    goalsHomeTeam\n    goalsAwayTeam\n    halftime_score\n    final_score\n    penalty\n  }\n}\n`;\n","import { readable } from 'svelte/store';\n\nvar OBSERVABLE;\r\nfunction isObservable(value) {\r\n    // Lazy-load Symbol to give polyfills a chance to run\r\n    if (!OBSERVABLE) {\r\n        OBSERVABLE =\r\n            (typeof Symbol === 'function' && Symbol.observable) || '@@observable';\r\n    }\r\n    return value && value[OBSERVABLE] && value[OBSERVABLE]() === value;\r\n}\r\nfunction deferred(set, initial) {\r\n    var initialized = initial !== undefined;\r\n    var resolve;\r\n    var reject;\r\n    // Set initial value\r\n    set(initialized\r\n        ? initial\r\n        : new Promise(function (_resolve, _reject) {\r\n            resolve = _resolve;\r\n            reject = _reject;\r\n        }));\r\n    return {\r\n        fulfill: function (value) {\r\n            if (initialized)\r\n                return set(Promise.resolve(value));\r\n            initialized = true;\r\n            resolve(value);\r\n        },\r\n        reject: function (error) {\r\n            if (initialized)\r\n                return set(Promise.reject(error));\r\n            initialized = true;\r\n            reject(error);\r\n        }\r\n    };\r\n}\n\nvar noop = function () { };\r\nfunction observe(observable, initial) {\r\n    if (!isObservable(observable)) {\r\n        return readable(observable, noop);\r\n    }\r\n    return readable(undefined, function (set) {\r\n        var _a = deferred(set, initial), fulfill = _a.fulfill, reject = _a.reject;\r\n        var subscription = observable.subscribe({\r\n            next: function (value) {\r\n                fulfill(value);\r\n            },\r\n            error: function (err) {\r\n                reject(err);\r\n            }\r\n        });\r\n        return function () { return subscription.unsubscribe(); };\r\n    });\r\n}\n\nfunction flat(subscribable, initial) {\r\n    var is_observable = isObservable(subscribable);\r\n    return readable(undefined, function (set) {\r\n        var inner_unsubscribe = null;\r\n        var outer_unsubscribe = null;\r\n        var _a = (is_observable\r\n            ? deferred(set, initial)\r\n            : {}), _b = _a.fulfill, fulfill = _b === void 0 ? function (value) { return set(value); } : _b, reject = _a.reject;\r\n        function next(value) {\r\n            if (inner_unsubscribe) {\r\n                inner_unsubscribe();\r\n                inner_unsubscribe = null;\r\n            }\r\n            if (isObservable(value))\r\n                value = observe(value);\r\n            if (isStore(value)) {\r\n                inner_unsubscribe = value.subscribe(function (inner) { return fulfill(inner); });\r\n            }\r\n            else {\r\n                fulfill(value);\r\n            }\r\n        }\r\n        function error(error) {\r\n            reject(error);\r\n        }\r\n        if (is_observable) {\r\n            var subscription_1 = subscribable.subscribe({\r\n                next: next,\r\n                error: error\r\n            });\r\n            outer_unsubscribe = function () { return subscription_1.unsubscribe(); };\r\n        }\r\n        else {\r\n            outer_unsubscribe = subscribable.subscribe(next);\r\n        }\r\n        return function () {\r\n            if (inner_unsubscribe)\r\n                inner_unsubscribe();\r\n            outer_unsubscribe();\r\n        };\r\n    });\r\n}\r\nfunction isStore(value) {\r\n    return value && typeof value.subscribe === 'function';\r\n}\n\nexport { flat, observe };\n//# sourceMappingURL=svelte-observable.es.js.map\n","<script context=\"module\">\n  import ApolloClient, { gql } from \"apollo-boost\";\n  import { LIVE } from \"../data\";\n\n  let client;\n  export async function preload() {\n    client = new ApolloClient({\n      uri:\n        \"https://emjxn6xptvbvlhcocrhq7gwhoy.appsync-api.ap-southeast-2.amazonaws.com/graphql\",\n      headers: {\n        \"x-api-key\": \"da2-htijskntwzehlai3cbhmt7c24e\"\n      },\n      fetch: this.fetch\n    });\n\n    return {\n      cache: await client.query({ query: LIVE })\n    };\n  }\n</script>\n\n<script>\n  import { getClient, restore, query } from \"svelte-apollo\";\n\n  export let cache;\n  restore(client, LIVE, cache.data);\n\n  const live = query(client, { query: LIVE });\n</script>\n\n<style>\n  main {\n    text-align: center;\n    background-color: #41563d;\n    background-image: url(\"/bg.png\");\n    background-repeat: repeat;\n    background-attachment: fixed;\n    height: 100vh;\n  }\n  main,\n  content {\n    font-family: \"Inter\", sans-serif;\n    margin: 0;\n  }\n\n  content {\n    padding: 48px 0;\n  }\n  ul {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    padding: 0;\n    margin: 0;\n  }\n\n  page-title {\n    font-size: 32px;\n    font-weight: 500;\n    color: white;\n    margin-bottom: 32px;\n  }\n  li {\n    display: flex;\n    justify-content: space-between;\n    box-sizing: border-box;\n    width: 640px;\n    max-width: calc(100% - 32px);\n    font-size: 16px;\n    padding: 32px;\n    border-radius: 8px;\n    margin-bottom: 16px;\n    place-items: center;\n    background: white;\n    box-shadow: 0 8px 16px 0 rgba(0, 0, 0, 0.3);\n  }\n\n  team {\n    width: 35%;\n    text-align: center;\n  }\n\n  team-name {\n    font-size: 14px;\n    margin: 0;\n  }\n\n  team-logo {\n    display: block;\n    margin: 0 auto;\n    width: 64px;\n    height: 64px;\n    margin-bottom: 16px;\n    background: #f2f2f2;\n    border-radius: 32px;\n  }\n\n  goals {\n    display: block;\n    font-weight: 500;\n    font-size: 32px;\n    line-height: 64px;\n    margin: 0 0 16px;\n  }\n\n  score {\n    width: 30%;\n    text-align: center;\n  }\n\n  status {\n    display: block;\n    font-size: 14px;\n    color: #999;\n  }\n</style>\n\n<main>\n  <title>Svelte SSR Demo</title>\n  <content>\n    <page-title>Live Results</page-title>\n    <ul>\n      {#await $live}\n        <li>Loading...</li>\n      {:then result}\n        {#each result.data.fixtures as fixture (fixture.fixture_id)}\n          <li>\n            <team>\n              <team-logo />\n              <team-name>{fixture.homeTeam}</team-name>\n            </team>\n            <score>\n              <goals>{fixture.goalsHomeTeam} – {fixture.goalsAwayTeam}</goals>\n              <status>{fixture.statusShort}</status>\n            </score>\n            <team>\n              <team-logo />\n              <team-name>{fixture.awayTeam}</team-name>\n            </team>\n          </li>\n        {:else}\n          <li>No games live</li>\n        {/each}\n      {:catch error}\n        <li>Error loading games: {error}</li>\n      {/await}\n    </ul>\n  </content>\n</main>\n"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","TypeError","pop","push","nodejsCustomInspectSymbol","for","undefined","_typeof","obj","_typeof2","MAX_ARRAY_LENGTH","MAX_RECURSIVE_DEPTH","inspect","formatValue","seenValues","JSON","stringify","name","concat","previouslySeenValues","indexOf","customInspectFn","object","String","getCustomFn","customValue","isArray","array","len","Math","min","remaining","items","join","formatArray","keys","tag","toString","replace","getObjectTag","map","key","formatObject","formatObjectValue","QueryDocumentKeys","Name","Document","OperationDefinition","VariableDefinition","Variable","SelectionSet","Field","Argument","FragmentSpread","InlineFragment","FragmentDefinition","IntValue","FloatValue","StringValue","BooleanValue","NullValue","EnumValue","ListValue","ObjectValue","ObjectField","Directive","NamedType","ListType","NonNullType","SchemaDefinition","OperationTypeDefinition","ScalarTypeDefinition","ObjectTypeDefinition","FieldDefinition","InputValueDefinition","InterfaceTypeDefinition","UnionTypeDefinition","EnumTypeDefinition","EnumValueDefinition","InputObjectTypeDefinition","DirectiveDefinition","SchemaExtension","ScalarTypeExtension","ObjectTypeExtension","InterfaceTypeExtension","UnionTypeExtension","EnumTypeExtension","InputObjectTypeExtension","BREAK","visit","root","visitor","visitorKeys","stack","inArray","index","edits","node","parent","path","ancestors","newRoot","isLeaving","isEdited","slice","clone","_i","_Object$keys","k","editOffset","ii","editKey","editValue","splice","prev","isNode","Error","visitFn","getVisitFn","kind","maybeNode","Boolean","kindVisitor","kindSpecificVisitor","leave","enter","specificVisitor","specificKindVisitor","genericMessage","_a","proto","InvariantError","_super","message","_this","framesToPop","invariant","condition","wrapConsoleMethod","method","console","warn","error","processStub","env","process","Function","atLeastWeTried","data","opts","cmp","cycles","a","aobj","bobj","seen","toJSON","isFinite","out","seenIndex","sort","argObj","variables","isIntValue","isBooleanValue","isObjectValue","fields","valueToObjectRepresentation","nestedArgObj_1","isVariable","variableValue","isListValue","nestedArgArrayObj","listValue","isEnumValue","KNOWN_DIRECTIVES","getStoreKeyName","fieldName","args","directives","filterKeys","filteredArgs_1","forEach","completeFieldName","stringifiedArgs","argumentsObjectFromField","argObj_1","field","resultKeyNameFromField","alias","isField","selection","isInlineFragment","isIdValue","idObject","generated","idConfig","type","id","typename","defineProperty","exports","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Constructor","protoProps","staticProps","_classCallCheck","instance","hasSymbols","hasSymbol","getSymbol","observable","SymbolIterator","SymbolObservable","SymbolSpecies","getMethod","getSpecies","ctor","Observable","isObservable","x","hostReportError","log","setTimeout","enqueue","fn","cleanupSubscription","subscription","cleanup","_cleanup","unsubscribe","closeSubscription","_observer","_queue","_state","notifySubscription","observer","m","onNotify","queue","flushSubscription","Subscription","subscriber","subscriptionObserver","SubscriptionObserver","get","_subscription","_subscriber","complete","subscribe","_this2","_this3","_this4","C","hasSeed","hasValue","acc","first","_this5","_len","sources","_key","startNext","from","_this6","subscriptions","outer","inner","completeIfDone","closed","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","item","err","return","_len2","_key2","symbol","require$$0","dedentBlockStringValue","rawString","lines","split","commonIndent","line","indent","leadingWhitespace","getBlockStringIndentation","isBlank","shift","str","print","ast","printDocASTReducer","definitions","operation","varDefs","wrap","variableDefinitions","selectionSet","_ref","variable","defaultValue","_ref2","block","selections","_ref3","_ref4","_ref5","_ref6","typeCondition","_ref7","_ref8","_ref9","_ref10","indentation","preferMultipleLines","isSingleLine","hasLeadingSpace","hasTrailingQuote","printAsMultipleLines","printBlockString","_ref11","_ref12","_ref13","values","_ref14","_ref15","_ref16","_ref17","_ref18","_ref19","_ref20","operationTypes","_ref21","addDescription","_ref22","_ref23","interfaces","_ref24","hasMultilineItems","_ref25","_ref26","_ref27","types","_ref28","_ref29","_ref30","_ref31","locations","_ref32","_ref33","_ref34","_ref35","_ref36","_ref37","_ref38","cb","description","maybeArray","separator","filter","start","maybeString","end","isMultiline","string","some","LinkError","link","request","fromError","errorValue","createOperation","starting","context","query","operationName","getKey","transformedOperation","extensions","getOperationName","OPERATION_FIELDS","NetworkStatus","ponyfill","self","window","global","module","networkStatus","queryFromPojo","selectionSetFromObj","justTypenameQuery","currentContext","MISSING_VALUE","idCounter","host","Slot","Date","now","random","context_1","slots","getValue","withValue","callback","bind","saved","noContext","defaultDispose","Cache","max","dispose","Infinity","Map","newest","oldest","has","entry","getEntry","older","newer","set","clean","size","testMap","set_1","testSet","Set","add_1","add","frozen","freeze","delete","seal","preventExtensions","jsonObject","directivesObj","directive","http","includeQuery","includeExtensions","headers","accept","options","throwServerError","response","createHttpLink","linkOptions","uri","fetcher","fetch","useGETForQueries","requestOptions","getOwnPropertySymbols","__rest","checkFetcher","linkConfig","fetchOptions","credentials","ApolloLink","chosenURI","selectURI","getContext","clientAwarenessHeaders","clientAwareness","name_1","version","controller","contextHeaders","contextConfig","_b","selectHttpOptionsAndBody","fallbackHttpConfig","signal","_c","createSignalIfSupported","_controller","_d","queryParams","addQueryParam","encodeURIComponent","serializedVariables","serializeFetchParameter","parseError","serializedExtensions","fragment","preFragment","fragmentStart","substr","queryParamsPrefix","newURI","rewriteURIForGET","setContext","catch","errors","abort","HttpLink","onError","errorHandler","forward","sub","retriedSub","retriedResult","graphQLErrors","networkError","ErrorLink","defineToJSON","classObject","Source","locationOffset","column","getLocation","source","position","match","lineRegexp","exec","highlightSourceAtLocation","location","firstLineColumnOffset","whitespace","lineIndex","lineOffset","lineNum","columnOffset","columnNum","existingLines","padLen","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","prefix","printPrefixedLines","GraphQLError","nodes","positions","originalError","_nodes","_source","loc","_locations","_positions","reduce","list","pos","_extensions","captureStackTrace","syntaxError","createLexer","startOfFileToken","Tok","TokenKind","SOF","lastToken","token","lineStart","advance","advanceLexer","lookahead","EOF","readToken","COMMENT","toStringTag","printedLocations","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","printError","BANG","DOLLAR","AMP","PAREN_L","PAREN_R","SPREAD","COLON","EQUALS","AT","BRACKET_L","BRACKET_R","BRACE_L","PIPE","BRACE_R","NAME","INT","FLOAT","STRING","BLOCK_STRING","getTokenDesc","printCharCode","code","isNaN","fromCharCode","toUpperCase","lexer","bodyLength","startPosition","charCodeAt","positionAfterWhitespace","col","readComment","readName","firstCode","isFloat","readDigits","readNumber","chunkStart","rawValue","readBlockString","charCode","c","char2hex","readString","unexpectedCharacterMessage","Kind","DOCUMENT","OPERATION_DEFINITION","VARIABLE_DEFINITION","SELECTION_SET","FIELD","ARGUMENT","FRAGMENT_SPREAD","INLINE_FRAGMENT","FRAGMENT_DEFINITION","VARIABLE","BOOLEAN","NULL","ENUM","LIST","OBJECT","OBJECT_FIELD","DIRECTIVE","NAMED_TYPE","LIST_TYPE","NON_NULL_TYPE","SCHEMA_DEFINITION","OPERATION_TYPE_DEFINITION","SCALAR_TYPE_DEFINITION","OBJECT_TYPE_DEFINITION","FIELD_DEFINITION","INPUT_VALUE_DEFINITION","INTERFACE_TYPE_DEFINITION","UNION_TYPE_DEFINITION","ENUM_TYPE_DEFINITION","ENUM_VALUE_DEFINITION","INPUT_OBJECT_TYPE_DEFINITION","DIRECTIVE_DEFINITION","SCHEMA_EXTENSION","SCALAR_TYPE_EXTENSION","OBJECT_TYPE_EXTENSION","INTERFACE_TYPE_EXTENSION","UNION_TYPE_EXTENSION","ENUM_TYPE_EXTENSION","INPUT_OBJECT_TYPE_EXTENSION","DirectiveLocation","QUERY","MUTATION","SUBSCRIPTION","SCHEMA","SCALAR","ARGUMENT_DEFINITION","INTERFACE","UNION","ENUM_VALUE","INPUT_OBJECT","INPUT_FIELD_DEFINITION","parseName","expectToken","parseDefinition","peek","parseExecutableDefinition","parseTypeSystemDefinition","keywordToken","expectKeyword","parseDirectives","many","parseOperationTypeDefinition","unexpected","parseSchemaExtension","parseScalarTypeExtension","parseImplementsInterfaces","parseFieldsDefinition","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionMemberTypes","parseUnionTypeExtension","parseEnumValuesDefinition","parseEnumTypeExtension","parseInputFieldsDefinition","parseInputObjectTypeExtension","parseTypeSystemExtension","peekDescription","parseOperationDefinition","experimentalFragmentVariables","parseFragmentName","parseVariableDefinitions","parseNamedType","parseSelectionSet","parseFragmentDefinition","parseOperationType","operationToken","parseVariableDefinition","parseVariable","parseTypeReference","expectOptionalToken","parseValueLiteral","parseSelection","hasTypeCondition","expectOptionalKeyword","parseFragment","nameOrAlias","parseArguments","parseField","isConst","parseConstArgument","parseArgument","parseConstValue","parseValueValue","any","parseList","parseObjectField","parseObject","parseStringLiteral","parseDirective","parseSchemaDefinition","parseDescription","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseArgumentDefs","parseDirectiveLocation","parseDirectiveLocations","parseDirectiveDefinition","allowLegacySDLImplementsInterfaces","allowLegacySDLEmptyFields","parseFieldDefinition","parseInputValueDef","parseEnumValueDefinition","startToken","noLocation","Loc","endToken","atToken","openKind","parseFn","closeKind","parse","sourceObj","parseDocument","normalize","trim","docCache","fragmentSourceMap","printFragmentWarnings","doc","cacheKey","parsed","stripLoc","removeLocAtThisLevel","docType","valueType","astFragmentMap","fragmentDefinition","fragmentName","sourceKey","substring","processFragments","gql","literals","default","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","PRESET_CONFIG_KEYS","DefaultClient","config","diff","clientState","cacheRedirects","errorCallback","resolvers","typeDefs","fragmentMatcher","cache","InMemoryCache","errorLink","ApolloClient","strings","raw","OBSERVABLE","LIVE","initial","_reject2","initialized","_resolve","_reject","fulfill","client","fixtures","fixture","fixture_id","homeTeam","goalsHomeTeam","goalsAwayTeam","statusShort","awayTeam","$live","preload","restore","live"],"mappings":"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"}